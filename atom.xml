<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jun</title>
  
  <subtitle>面向信仰编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wangjunjun.club/"/>
  <updated>2020-06-27T14:28:07.183Z</updated>
  <id>http://www.wangjunjun.club/</id>
  
  <author>
    <name>Jun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA 如何配置JVM虚拟机启动参数</title>
    <link href="http://www.wangjunjun.club/2020/06/27/Idea-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEJVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/"/>
    <id>http://www.wangjunjun.club/2020/06/27/Idea-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEJVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/</id>
    <published>2020-06-27T13:29:42.000Z</published>
    <updated>2020-06-27T14:28:07.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-如何配置JVM虚拟机启动参数"><a href="#IDEA-如何配置JVM虚拟机启动参数" class="headerlink" title="IDEA 如何配置JVM虚拟机启动参数"></a>IDEA 如何配置JVM虚拟机启动参数</h1><p>在读《深入理解Java虚拟机》中有个IDE设置JVM的启动参数（VM Arg）,小编用的IDEA不知道如何设置，所以写个博客记录一下</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/idea%20jvm%20第一步.png" alt=""></p><p>下面的两个箭头代表两个方法，二选一即可</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/idea%20jvm%20第二步.png" alt=""><br><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/idea%20jvm%20第三步.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-如何配置JVM虚拟机启动参数&quot;&gt;&lt;a href=&quot;#IDEA-如何配置JVM虚拟机启动参数&quot; class=&quot;headerlink&quot; title=&quot;IDEA 如何配置JVM虚拟机启动参数&quot;&gt;&lt;/a&gt;IDEA 如何配置JVM虚拟机启动参数&lt;/h1&gt;&lt;p&gt;在读
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://www.wangjunjun.club/categories/JVM/"/>
    
    
      <category term="IDEA JVM" scheme="http://www.wangjunjun.club/tags/IDEA-JVM/"/>
    
  </entry>
  
  <entry>
    <title>vim 编辑器</title>
    <link href="http://www.wangjunjun.club/2020/06/17/vim-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://www.wangjunjun.club/2020/06/17/vim-%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-06-17T05:05:08.000Z</published>
    <updated>2020-06-17T15:13:46.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vi: Visual Interface，文本编辑器</p><p>文本：ASCII, Unicode</p><p>文本编辑种类：</p><pre><code>- 行编辑器: sed- 全屏编辑器：nano, vi</code></pre><p>Vim - Vi improved</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>打开文件：</p><p>vim [OPTION]… FILE…</p><p>​        +#: 打开文件后，直接让光标处于第#行的行首；<br>​        +/PATTERN：打开文件后，直接让光标处于第一个被PATTERN匹配到的行的行首；</p></li><li><p>vim：模式化的编辑</p><p>基本模式：</p><ul><li><p>编辑模式，命令模式</p></li><li><p>输入模式</p></li><li><p>末行模式</p><p>内置的命令行接口</p></li></ul><p>模式转换：</p><pre><code>编辑模式 --&gt; 输入模式    i: insert, 在光标所在处输入；    a: append, 在光标所在处后面输入；    o: 在当前光标所在行的下方打开一个新行；    I：在当前光标所在行的行首输入；    A：在当前光标所在行的行尾输入；    O：在当前光标所在行的上方打开一个新行；    c    C</code></pre><p>​    输入模式 —&gt; 编辑模式<br>​        ESC</p><p>​    编辑模式 —&gt; 末行模式<br>​        :</p><p>​    末行模式 —&gt; 编辑模式<br>​        ESC</p></li><li><p>关闭文件：</p><ul><li>:q 退出</li><li>:q! 强制退出，丢弃做出的修改\</li><li>:wq 保存退出</li><li>:x 保存退出</li><li>:w /PATH/TO/SOMEWHERE</li><li>ZZ: 保存退出</li></ul></li><li><p>光标跳转：</p><ul><li><p>字符间跳转：<br>h, j, k, l</p><pre><code>      h: 左      l: 右      j: 下      k: 上</code></pre><p>​         #COMMAND：跳转由#指定的个数的字符；</p></li></ul></li></ol><ul><li><p>行首行尾跳转：</p><pre><code>^: 跳转至行首的第一个非空白字符；  0: 跳转至行首；  $: 跳转至行尾；</code></pre></li><li><p>行间移动：</p><pre><code>#G：跳转至由#指定行；  G：最后一行；  1G, gg: 第一行；</code></pre></li><li><p>句间移动：</p><pre><code>)  (</code></pre></li><li><p>段落间移动：</p><pre><code>}  {</code></pre></li></ul><ol><li><p>vim的编辑命令：</p><ul><li><p>字符编辑：</p><pre><code>x: 删除光标处的字符；  #x: 删除光标处起始的#个字符；</code></pre><p>xp: 交换光标所在处的字符及其后面字符的位置；</p></li><li><p>替换命令(r, replace)</p><pre><code>r: 替换光标所在处的字符</code></pre></li><li><p>删除命令：</p><pre><code>d: 删除命令，可结合光标跳转字符，实现范围删除；      d$:      d^:      d0:</code></pre><p>​        dw<br>​        de<br>​        db</p><p>​        #COMMAND</p><p>​        dd: 删除光标所在的行；<br>​        #dd：多行删除；</p></li></ul></li></ol><ul><li>粘贴命令(p, put, paste)：<pre><code>p：缓冲区存的如果为整行，则粘贴当前光标所在行的下方；否则，则粘贴至当前光标所在处的后面；  P：缓冲区存的如果为整行，则粘贴当前光标所在行的上方；否则，则粘贴至当前光标所在处的前面；</code></pre></li></ul><ul><li><p>复制命令(y, yank)：</p><pre><code>y: 复制，工作行为相似于d命令；      y$      y0      y^</code></pre><p>​        ye<br>​        yw<br>​        yb</p><p>​        #COMMAND</p><p>​        yy：复制行<br>​        #yy: 复制多行；</p></li></ul><ol><li><p>改变命令(c, change)</p><pre><code>c: 修改       编辑模式 --&gt; 输入模式</code></pre><p>​    c$<br>​    c^<br>​    c0</p><p>​    cb<br>​    ce<br>​    cw</p><p>​    #COMMAND    </p><p>​    cc：删除并输入新内容<br>​    #cc:</p></li></ol><ol><li><p>其它编辑操作</p><ul><li><p>可视化模式：</p><pre><code>v: 按字符选定  V：按行行定</code></pre></li><li><p>Note：经常结合编辑命令；</p><pre><code>    d, c, y</code></pre></li><li><p>撤消此前的编辑：</p><pre><code>u(undo)：撤消此前的操作；      #u: 撤消指定次数的操作；</code></pre></li><li><p>撤消此前的撤消：</p><pre><code>Ctrl+r</code></pre></li><li><p>重复前一个编辑操作：</p><pre><code>.</code></pre></li><li><p>翻屏操作：</p><pre><code>Ctrl+f: 向文件尾部翻一屏；  Ctrl+b: 向文件首部翻一屏；</code></pre><p>​    Ctrl+d: 向文件尾部翻半屏；<br>​    Ctrl+u：向文件首部翻半屏；</p></li></ul></li></ol><ol><li><p>vim自带的练习教程：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vimtutor</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vim编辑器&quot;&gt;&lt;a href=&quot;#Vim编辑器&quot; class=&quot;headerlink&quot; title=&quot;Vim编辑器&quot;&gt;&lt;/a&gt;Vim编辑器&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.wangjunjun.club/categories/linux/"/>
    
    
      <category term="vim编辑器" scheme="http://www.wangjunjun.club/tags/vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux 权限管理</title>
    <link href="http://www.wangjunjun.club/2020/06/11/Linux-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://www.wangjunjun.club/2020/06/11/Linux-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
    <published>2020-06-11T15:15:53.000Z</published>
    <updated>2020-06-12T00:28:55.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux权限管理"><a href="#Linux权限管理" class="headerlink" title="Linux权限管理"></a>Linux权限管理</h1><h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><p>   文件的权限主要针对三类对象进行定义：<br>                owner: 属主, u<br>                group: 属组, g<br>                other: 其他, o</p><p>每个文件针对每类访问者都定义了三种权限：<br>        r: readable<br>        w: writable<br>        x: excute</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rwxrw-r--  1 user  user   665 6月  11 23:33 f1</span><br><span class="line"> |u    | g  | o</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件：</span><br><span class="line">        r: 可使用文件查看类工具获取其内容；</span><br><span class="line">        w: 可修改其内容；</span><br><span class="line">        x: 可以把此文件提请内核启动为一个进程；</span><br><span class="line"></span><br><span class="line">目录：</span><br><span class="line">        r: 可以使用ls查看此目录中文件列表；</span><br><span class="line">        w: 可在此目录中创建文件，也可删除此目录中的文件；</span><br><span class="line">        x: 可以使用ls -l查看此目录中文件列表，可以cd进入此目录；</span><br></pre></td></tr></table></figure><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>修改文件权限：chmod<br>                chmod [OPTION]… OCTAL-MODE FILE…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod [OPTION]... MODE[,MODE]... FILE...</span><br><span class="line">       MODE:</span><br><span class="line">       修改一类用户的所有权限：</span><br><span class="line">       u&#x3D;</span><br><span class="line">       g&#x3D;</span><br><span class="line">       o&#x3D;</span><br><span class="line">       ug&#x3D;</span><br><span class="line">       a&#x3D;</span><br><span class="line">       u&#x3D;,g&#x3D;</span><br><span class="line"></span><br><span class="line">修改一类用户某位或某些位权限</span><br><span class="line">u+</span><br><span class="line">u-</span><br><span class="line">    -R: 递归修改权限</span><br><span class="line">chmod [OPTION]... --reference&#x3D;RFILE FILE...</span><br><span class="line">参考RFILE文件的权限，将FILE的修改为同RFILE；</span><br></pre></td></tr></table></figure><ul><li><p>模式法</p><p>chmod who opt per file</p><p>who:    u    g    o    a</p><p>opt:     + - =</p><p>per: r w x </p></li><li><p>数字法 </p><p>chmod 数字 file</p></li></ul><div class="table-container"><table><thead><tr><th>权限</th><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>—-</td><td>000</td><td>0</td></tr><tr><td>—x</td><td>001</td><td>1</td></tr><tr><td>-w-</td><td>010</td><td>2</td></tr><tr><td>-wx</td><td>011</td><td>3</td></tr><tr><td>r—</td><td>100</td><td>4</td></tr><tr><td>r-x</td><td>101</td><td>5</td></tr><tr><td>rw-</td><td>110</td><td>6</td></tr><tr><td>rwx</td><td>111</td><td>7</td></tr></tbody></table></div><h2 id="修改文件所属者和组"><a href="#修改文件所属者和组" class="headerlink" title="修改文件所属者和组"></a>修改文件所属者和组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改文件的属主和属组：</span><br><span class="line">        仅root可用；</span><br><span class="line"></span><br><span class="line">        修改文件的属主：chown</span><br><span class="line">                chown [OPTION]... [OWNER][:[GROUP]] FILE...</span><br><span class="line"></span><br><span class="line">                        用法：</span><br><span class="line">                                OWNER</span><br><span class="line">                                OWNER:GROUP</span><br><span class="line">                                :GROUP</span><br><span class="line"></span><br><span class="line">                                Note: 命令中的冒号可用.替换；</span><br><span class="line"></span><br><span class="line">                        -R: 递归</span><br><span class="line"></span><br><span class="line">                chown [OPTION]... --reference&#x3D;RFILE FILE...</span><br><span class="line"></span><br><span class="line">        修改文件的属组：chgrp</span><br><span class="line">                chgrp [OPTION]... GROUP FILE...</span><br><span class="line">        chgrp [OPTION]... --reference&#x3D;RFILE FILE...</span><br></pre></td></tr></table></figure><h1 id="权限掩码"><a href="#权限掩码" class="headerlink" title="权限掩码"></a>权限掩码</h1><p>文件或目录创建时的遮罩码：umask<br>        FILE: 666-umask<br>                Note: 如果某类的用户的权限减得的结果中存在x权限，则将其权限+1<br>        DIR: 777-umask</p><p><strong>新建的权限=666 - umask</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umask: 查看</span><br><span class="line">umask #: 设定</span><br><span class="line">umask -S  # 查看创建后权限</span><br></pre></td></tr></table></figure><p>命令总结：chmod, chown, chgrp, umask</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件管理、用户管理、权限管理、bash的基础特性</span><br><span class="line">        文件管理：cp, mv, rm</span><br><span class="line">        用户管理：</span><br><span class="line">                useradd, usermod, chsh, chfn, chage, userdel</span><br><span class="line">                groupad, groupmod, groupdel</span><br><span class="line">                passwd, gpasswd, pwck</span><br><span class="line">                id, finger, who, whoami, w</span><br><span class="line">                su</span><br><span class="line">                配置文件：&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group, &#x2F;etc&#x2F;gshadow</span><br><span class="line">        权限管理：</span><br><span class="line">                perm: mode(rwxrwxrwx), ownership</span><br><span class="line">                        chmod</span><br><span class="line">                        chown</span><br><span class="line">                        chgrp</span><br><span class="line">                                -R, --reference&#x3D;RFILE</span><br><span class="line"></span><br><span class="line">                        FILE: 666-umask</span><br><span class="line">                        DIR: 777-umask</span><br><span class="line"></span><br><span class="line">                        umask [UMASK]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux权限管理&quot;&gt;&lt;a href=&quot;#Linux权限管理&quot; class=&quot;headerlink&quot; title=&quot;Linux权限管理&quot;&gt;&lt;/a&gt;Linux权限管理&lt;/h1&gt;&lt;h2 id=&quot;权限介绍&quot;&gt;&lt;a href=&quot;#权限介绍&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.wangjunjun.club/categories/linux/"/>
    
    
      <category term="权限管理" scheme="http://www.wangjunjun.club/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署Jenkins自动化部署</title>
    <link href="http://www.wangjunjun.club/2020/06/10/Docker-%E9%83%A8%E7%BD%B2Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.wangjunjun.club/2020/06/10/Docker-%E9%83%A8%E7%BD%B2Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</id>
    <published>2020-06-10T01:42:51.000Z</published>
    <updated>2020-06-10T08:25:55.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-部署Jenkins自动化部署"><a href="#Docker-部署Jenkins自动化部署" class="headerlink" title="Docker 部署Jenkins自动化部署"></a>Docker 部署Jenkins自动化部署</h1><p>一直都在因为打包，重新部署烦恼，今天我试着利用docker搭建Jenkins实现自动化部署。</p><ol><li><p>获取并启动 Jenkins镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8080 -v /opt/jenkins:/var/jenkins_home --name jenkins --restart=always jenkins:2.46.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个权限别忘了，不是在自己的目录下的话，就要给权限，不然权限错误</span></span><br><span class="line">sudo chown -R 1000 /opt/jenkins</span><br></pre></td></tr></table></figure></li><li><p>通过Jenkins日志 查看初始化密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f jenkins</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%A5%E5%BF%97.png" alt=""></p></li><li><p>浏览器登录 Jenkins</p><p>localhost:8081</p><p>输入 上面的初始化密码，登录</p></li></ol><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ul><li>Jenkins的版本太高导致插件安装失败，降到 2.150.1 可以了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-部署Jenkins自动化部署&quot;&gt;&lt;a href=&quot;#Docker-部署Jenkins自动化部署&quot; class=&quot;headerlink&quot; title=&quot;Docker 部署Jenkins自动化部署&quot;&gt;&lt;/a&gt;Docker 部署Jenkins自动化部署&lt;/
      
    
    </summary>
    
    
    
      <category term="Jenkins" scheme="http://www.wangjunjun.club/tags/Jenkins/"/>
    
      <category term="docker" scheme="http://www.wangjunjun.club/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>软链接和硬链接</title>
    <link href="http://www.wangjunjun.club/2020/06/07/%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/"/>
    <id>http://www.wangjunjun.club/2020/06/07/%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</id>
    <published>2020-06-07T10:50:54.000Z</published>
    <updated>2020-06-07T14:41:08.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux中的软链接和硬链接"><a href="#Linux中的软链接和硬链接" class="headerlink" title="Linux中的软链接和硬链接"></a>Linux中的软链接和硬链接</h1><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E7%A1%AC%E9%93%BE%E6%8E%A5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux中的软链接和硬链接&quot;&gt;&lt;a href=&quot;#Linux中的软链接和硬链接&quot; class=&quot;headerlink&quot; title=&quot;Linux中的软链接和硬链接&quot;&gt;&lt;/a&gt;Linux中的软链接和硬链接&lt;/h1&gt;&lt;h2 id=&quot;硬链接&quot;&gt;&lt;a href=&quot;#硬链
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.wangjunjun.club/categories/linux/"/>
    
    
      <category term="软/硬链接" scheme="http://www.wangjunjun.club/tags/%E8%BD%AF-%E7%A1%AC%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-数据链路层小结</title>
    <link href="http://www.wangjunjun.club/2020/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-06-05T05:26:22.698Z</published>
    <updated>2020-06-05T05:26:22.698Z</updated>
    
    <content type="html"><![CDATA[<p>title: 计算机网络-数据链路层小结<br>date: 2020-02-22 13:35:15<br>tags:</p><ul><li>数据链路层<br>categories:</li><li>计算机网络</li></ul><p>[TOC]</p><h1 id="计算机网络-数据链路层"><a href="#计算机网络-数据链路层" class="headerlink" title="计算机网络 数据链路层"></a>计算机网络 数据链路层</h1><h2 id="数据链路层基本概念及基本问题"><a href="#数据链路层基本概念及基本问题" class="headerlink" title="数据链路层基本概念及基本问题"></a>数据链路层基本概念及基本问题</h2><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/数据发送模型.png" alt="数据发送模型"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="链路（link）"><a href="#链路（link）" class="headerlink" title="链路（link）"></a>链路（link）</h4><p>链路是一条点到点的物理线路段，中间没有其他点，一条链路只是一条通路的一个组成部分。</p><h4 id="数据链路（data-link）"><a href="#数据链路（data-link）" class="headerlink" title="数据链路（data link）"></a>数据链路（data link）</h4><p>除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了<code>数据链路</code>。</p><ol><li>目前最常用的方法是使用适配器（网卡）来实现这些协议的硬件和软件。</li><li>一般的适配器都包括了数据链路层和物理层这两层的功能。</li></ol><h4 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h4><p>数据链路层传送的是<code>帧</code></p><p>在两个对等的数据链路层之间画出一个数字管道，而在这条数字管道上<code>传输的数据单位是帧</code>。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/数据链路层 帧.png" alt="数据链路层 帧"></p><h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p>封装成帧就是在一段<code>数据</code>的<code>前后分别添加首部和尾部</code>，然后就构成了一个帧。确定帧的界限。</p><p>首部和尾部的一个重要作用就是进行<code>帧定界</code></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/封装成帧.png" alt="封装成帧"></p><p>MTU 最大传输单元  帧的数据部分最大为 1500字节</p><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>如果传输的数据是ASCII码中“可打印字符（共95个）”集时，是一个正常的帧，但是当数据中出现帧尾的时候，就会错误的认为一个帧的范围，数据<code>不是仅由“可打印字符”组成时，就会出问题</code>，如图：</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/透明传输.png" alt="透明传输"></p><p><code>解决方案</code>： 使用<code>转义字符</code>的字节填充方法</p><p><strong><em>个人认为这种解决方案C语言中的转义字符思想一样，所以类比理解就好了</em></strong></p><ul><li><p>发送端</p><p>​    发送端的数据链路层在数据中出现控制字符”SOH“ 或 ”EOT“ 的前面插入一个转义字符”ESC“（十六进制编码 1B）</p></li><li><p>接收端</p><p>​    <code>字节填充</code>（byte stuffing）或<code>字符填充</code>（character stuffing）接收端的数据链路层在<code>将数据送往网络层之前</code>删除插入的转义字符。</p></li></ul><p>如果转义字符也出现在数据中，就在转义字符前再插入一个转义字符</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/透明传输 转义字符法.png" alt="透明传输 转义字符 字节填充方法"></p><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><p>传输过程中可能会出现产生 比特差错：<code>1 可能变成0 ，0可能变成1</code></p><p>在一段时间中，传输错误的比特占所有传输比特总数的比率称为 <code>误码率（BER Bit Error Rate）</code></p><p><code>为了保证数据传输的可靠性</code>，在计算机网络传输数据时，必须才用各种差错检查措施。</p><h5 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h5><ol><li><p>循环冗余检验 CRC</p><p>在数据链路层 传送的帧中，广泛使用了循环冗余检验 CRC的方法。</p><p>在发送端，先把数据划分为组，假定每组 k 个比特。</p><blockquote><p>假设带待传送的一组数据 M=101001（现在k=6）。我们在M的后面再添加供差错检测用的 n 位 冗余码一起发送。</p></blockquote><p>冗余码的计算</p><p>用二进制的模 2 运算进行2^n ,这相当于在M后面添加n个0。</p><p>得到的（k + n）位的数除以是先选定好的长度为（n + 1）位的除数 P，得出商是Q而余数是R，余数R比除数P少一位，即 R是 n 位。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/循环冗余检验的计算过程.png" alt="循环冗余检验的计算过程"></p></li><li><p>帧检验序列 FCS</p><p>在数据后面添加上的冗余码称为 <code>帧检验序列</code> FCS （frame check sequence）</p><p>循环冗余检验 CRC 和 帧检验序列 FCS 不等同。</p><ul><li>CRS是一种常用的检错方法，而FCS是添加在数据后面的冗余码</li><li>FCS 可以用CRC这种方法得出，但 CRC 并非用来获得FCS的唯一方法</li></ul></li></ol><p>小结：CRC差错检测技术</p><p>仅用循环冗余检验 CRC差错检测技术只能做到<code>无差错接收</code>（accept）</p><ul><li>无差错接收是指 <code>凡是接受的帧（即不包括丢弃的帧），我们都能非常接近于1的概率认为这些帧在传输过程中没有产生差错</code>。换句话就是 <code>凡是接收端数据链路层接受的帧都没有传输差错（有差错的帧就丢弃不接受）</code></li></ul><p>CRC是一种 <code>没有比特差错</code>，而不是<code>没有传输差错</code>的检测机制</p><p>要做到 <code>可靠传输</code> 就必须再加上 <code>确认</code>和<code>重传</code>机制</p><h2 id="两种情况下的数据链路层"><a href="#两种情况下的数据链路层" class="headerlink" title="两种情况下的数据链路层"></a>两种情况下的数据链路层</h2><h3 id="使用点对点（PPP）信道的数据链路层"><a href="#使用点对点（PPP）信道的数据链路层" class="headerlink" title="使用点对点（PPP）信道的数据链路层"></a>使用点对点（PPP）信道的数据链路层</h3><h3 id="使用广播信道（CSMA-CD）的数据链路层"><a href="#使用广播信道（CSMA-CD）的数据链路层" class="headerlink" title="使用广播信道（CSMA/CD）的数据链路层"></a>使用广播信道（CSMA/CD）的数据链路层</h3><p>CSMA/CD （Carrier Sense Multiple Access with Collision Detection）</p><ul><li><p>多点接入 表示许多计算机以<code>多点接入</code>的方式连接在<code>一根总线</code>上。</p></li><li><p>载波监听 是指<code>每一个站在发送数据之前</code>先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不发送数据，以免发送碰撞</p><p>载波监听 就是用电子技术检测总线上有没有其他计算机发送数据信号</p></li></ul><h2 id="以太局域网"><a href="#以太局域网" class="headerlink" title="以太局域网"></a>以太局域网</h2><h3 id="MAC的硬件地址（MAC地址）"><a href="#MAC的硬件地址（MAC地址）" class="headerlink" title="MAC的硬件地址（MAC地址）"></a>MAC的硬件地址（MAC地址）</h3><p>在局域网中，硬件地址又称物理地址（或MAC地址）</p><blockquote><p>​    802标准中 地址严格地将 每个站的名字（或标识符）,<code>IEEE 的注册管理机构</code> RA负责向 厂家 分配<code>地址段的前三个字节（高位24位）</code>，地址字段中的<code>后三个字节（低位24位）</code>由厂家自行指派，称为<code>拓展标识</code>，必须保证生产出的适配器没有重复地址。</p><p>​    一个地址块可以生成2^24个不同的地址，这种48位地址称为<code>MAC-48</code>，通用名称<code>EUI-48</code>。</p><p>​    <code>MAC地址</code>，实际上就是适配器地址或适配器标识符EUI-48。</p></blockquote><h2 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h2><h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 计算机网络-数据链路层小结&lt;br&gt;date: 2020-02-22 13:35:15&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据链路层&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;计算机网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux 文件管理</title>
    <link href="http://www.wangjunjun.club/2020/06/05/linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://www.wangjunjun.club/2020/06/05/linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</id>
    <published>2020-06-04T16:11:58.000Z</published>
    <updated>2020-06-04T16:43:14.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-文件管理"><a href="#Linux-文件管理" class="headerlink" title="Linux 文件管理"></a>Linux 文件管理</h1><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/Linux%E7%9B%AE%E5%BD%95.png" alt="Linux文件目录结构"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-文件管理&quot;&gt;&lt;a href=&quot;#Linux-文件管理&quot; class=&quot;headerlink&quot; title=&quot;Linux 文件管理&quot;&gt;&lt;/a&gt;Linux 文件管理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubuserconten
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.wangjunjun.club/categories/linux/"/>
    
    
      <category term="文件管理" scheme="http://www.wangjunjun.club/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>VS Code远程开发工具</title>
    <link href="http://www.wangjunjun.club/2020/06/02/VS-Code%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.wangjunjun.club/2020/06/02/VS-Code%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</id>
    <published>2020-06-02T02:35:27.000Z</published>
    <updated>2020-06-03T07:33:45.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-远程开发工具"><a href="#VS-Code-远程开发工具" class="headerlink" title="VS Code 远程开发工具"></a>VS Code 远程开发工具</h1><p>最看了一篇<a href="https://mp.weixin.qq.com/s/xwfWJolHsiSBGaJDlgD8Kw" target="_blank" rel="noopener">微信文章</a>，讲的是如何用VS Code进行远程开发，刚巧我租了一台云服务器。今天就介绍给大家，废话不说，淦！</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p><strong>Visual Studio Code</strong>（简称<strong>VS Code</strong>）是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器，它支持测试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全（类似于 IntelliSense）、代码片段和代码重构等。该编辑器支持用户个性化配置，例如改变主题颜色、键盘快捷方式等各种属性和参数，同时还在编辑器中内置了扩展程序管理的功能 - 引用维基百科</p></blockquote><p>VS Code 最迷人的地方在于强大的插件支持，基本上啥功能的插件都可以找到。</p><p>VS Code远程开发的工作原理，大概是这样的：</p><p><img src="/media/jun/programming/VS Code远程原理.png" alt=""></p><p>下面讲一下如何进行配置，我的local OS是Ubuntu，Remote OS是CentOS 7 云主机。</p><h2 id="远程开发配置"><a href="#远程开发配置" class="headerlink" title="远程开发配置"></a>远程开发配置</h2><h3 id="配置SSH环境变量"><a href="#配置SSH环境变量" class="headerlink" title="配置SSH环境变量"></a>配置SSH环境变量</h3><p>远程开发本地的VS Code用的SSH协议和远程服务器通信，所以先配置SSH环境，因为GIt自带SSH客户端，所以先把 Git安装一下。</p><p><a href="https://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">可以参考这里 Git 安装配置</a></p><h3 id="VS-Code安装远程开发插件"><a href="#VS-Code安装远程开发插件" class="headerlink" title="VS Code安装远程开发插件"></a>VS Code安装远程开发插件</h3><p>连接远程主机，需要在VS Code安装远程开发插件：</p><p><img src="/media/jun/programming/VS Code远程插件.png" alt=""></p><ul><li>Remote - SSH：通过SSH连接虚拟或者 Linux主机</li><li>Remote - Containers：连接Docker开发容器</li><li>Remote - WSL：裂解Windows Subsystem for Linux（Linux子系统）</li></ul><p>因为我连接的是Linux主机，只需要安装Remote - SSH插件即可。</p><h3 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><ol><li><p>首先点侧边栏的「远程资源管理器」之后点击「设置按钮」，进入远程机器配置界面。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20%E7%AC%AC%E4%B8%80%E6%AD%A5.png" alt=""></p></li></ol><ol><li><p>修改 ssh配置文件，用来登录远程主机，</p><ol><li>Linux版本</li></ol><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" alt=""></p><p>​    2. Windows版本</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20%E7%AC%AC%E4%B8%89%E6%AD%A5.png" alt=""></p></li><li><p>点击连接，登录远程服务器，需要数据远程主机密码，输入确认即可。第一次连接会做初始化工作，可能会慢一点，耐心等等。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%AC%AC%E5%9B%9B%E6%AD%A5.png" alt=""></p></li><li><p>登录成功，即可像操作本地环境一样，在VS Code客户端操作远程云主机上的文件。注意，<strong>下图中的「打开文件夹」已经是远端机器上的目录结构了。</strong></p></li><li><p>远程VS Code 安装插件。安装的插件是在云服务器的VS Code上，对本机的VS Code没有影响，插件在远端提供功能，比如代码审查、自动补齐等等，而这所有的一切就像在本地操作一样，对文件的更改也是直接操作的云主机上的文件，丝滑连接。</p></li><li><p>代码编辑与远程终端调试。打开文件编辑的是云服务器的文件，同时可以打开云服务终端，直接在终端操作编译或者查看云服务器信息。</p></li></ol><h2 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h2><p>   按照上面的配置步骤，每次连接到远程服务器，都需要输入服务器登录密码很麻烦，可以配置SSH免密登录，免去每次输入密码的烦恼，具体操作步骤如下：</p><ol><li><p>打开终端生成密钥对</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>打开生成的秘钥保存路径，拷贝 <code>id_rsa.pub</code> 内容，添加到到云服务器的 <code>~/.ssh/authorized_keys</code> 文件后面。</p><p>OK了！！！</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VS-Code-远程开发工具&quot;&gt;&lt;a href=&quot;#VS-Code-远程开发工具&quot; class=&quot;headerlink&quot; title=&quot;VS Code 远程开发工具&quot;&gt;&lt;/a&gt;VS Code 远程开发工具&lt;/h1&gt;&lt;p&gt;最看了一篇&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="好东西" scheme="http://www.wangjunjun.club/categories/%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
    
    
      <category term="VS Code" scheme="http://www.wangjunjun.club/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>linux命令笔记</title>
    <link href="http://www.wangjunjun.club/2020/06/02/linux%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.wangjunjun.club/2020/06/02/linux%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-02T02:14:21.000Z</published>
    <updated>2020-06-04T19:06:10.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux上-常用命令笔记"><a href="#在Linux上-常用命令笔记" class="headerlink" title="在Linux上 常用命令笔记"></a>在Linux上 常用命令笔记</h1><p>这里的命令都是在centos 7的环境上测试的</p><p>命令的优先级</p><p>alias  &gt; 内部命令 &gt; hash表（记录外部命令的路径） &gt; $PATH  &gt; 找不到命令</p><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置历史格式 加时间</span></span><br><span class="line">HISTTIMEFORMAT="%F %T "</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/history.png" alt=""></p><h3 id="求帮助"><a href="#求帮助" class="headerlink" title="求帮助"></a>求帮助</h3><ul><li><p>简单查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看命令的用法</span></span><br><span class="line">whatis ls</span><br><span class="line">ls (1)               - list directory contents</span><br><span class="line">man -f ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果新装的没有，新建数据库</span></span><br><span class="line">mandb</span><br></pre></td></tr></table></figure></li><li><p>详细查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help help</span><br><span class="line">man help</span><br></pre></td></tr></table></figure></li></ul><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 给常用长命令起别名格式: <span class="built_in">alias</span> aplianame=cmd</span></span><br><span class="line">alias cdnet='cd /etc/sysconfig/network-scripts/'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 起别名 不会保存，一旦退出就失效了，写入 文件中，使开机后命令从文件中读到内存中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入的文件目录：/root/.bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如添加 ,添加后不会立即生效 </span></span><br><span class="line">alias ll='ls -a'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加后不会立即生效 ,二选一将文件写入内存中，就生效了</span></span><br><span class="line">source .bashrc</span><br><span class="line">. .bashrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上面该的文件，仅仅对当前用户有效，想要对所有用户有效，设置 /etc/bashrc，生效同理</span></span><br></pre></td></tr></table></figure><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统时间</span></span><br><span class="line">date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 时区</span></span><br><span class="line"> /etc/localtime</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 日历</span></span><br><span class="line"> cal</span><br></pre></td></tr></table></figure><h3 id="远程桌面共享"><a href="#远程桌面共享" class="headerlink" title="远程桌面共享"></a>远程桌面共享</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 终端断网</span></span><br><span class="line">screen </span><br><span class="line">screen -ls# 显示所有会话</span><br><span class="line">screen -r [session] # 恢复会话</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.请求协助</span></span><br><span class="line">screen -S help  # -S 起名</span><br><span class="line">screen -x help  # -x 加入</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/screen.png" alt=""></p><h3 id="查看所有用户执行命令"><a href="#查看所有用户执行命令" class="headerlink" title="查看所有用户执行命令"></a>查看所有用户执行命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure><h3 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">init 3 # 纯命令</span><br><span class="line">init 5 # 切换到桌面</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看登录者</span></span><br><span class="line">whoami</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户是不是管理员 0-是 非0-不是</span></span><br><span class="line">id -u</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看系统版本</span></span><br><span class="line">cat /etc/centos-release</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Linux 内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 cpu信息</span></span><br><span class="line">lscpu </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看内存大小</span></span><br><span class="line">free -h</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看硬盘大小</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看可用的shell类型</span></span><br><span class="line">cat /etc/shells </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看使用的哪种shell 打印用的shell类型</span></span><br><span class="line">echo $SHELL</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主机名字</span></span><br><span class="line">hostname</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改提示符 样式</span></span><br><span class="line">touch env.sh</span><br><span class="line">vim /etc/profile.d/env.sh</span><br><span class="line">PS1="\[\e[1;33m\][\u@\h \w]\\$\[\e[0m\]"</span><br><span class="line">echo $PS1 # 查看</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录后提示信息修改 可以进行修改提示信息</span></span><br><span class="line">/etc/motd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux上-常用命令笔记&quot;&gt;&lt;a href=&quot;#在Linux上-常用命令笔记&quot; class=&quot;headerlink&quot; title=&quot;在Linux上 常用命令笔记&quot;&gt;&lt;/a&gt;在Linux上 常用命令笔记&lt;/h1&gt;&lt;p&gt;这里的命令都是在centos 7的环境上测试
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.wangjunjun.club/categories/linux/"/>
    
    
      <category term="命令" scheme="http://www.wangjunjun.club/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>docker 部署ngxin镜像启动失败 外加一些常用操作</title>
    <link href="http://www.wangjunjun.club/2020/05/26/docker-%E9%83%A8%E7%BD%B2ngxin%E9%95%9C%E5%83%8F%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5-%E5%A4%96%E5%8A%A0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.wangjunjun.club/2020/05/26/docker-%E9%83%A8%E7%BD%B2ngxin%E9%95%9C%E5%83%8F%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5-%E5%A4%96%E5%8A%A0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-26T04:52:48.000Z</published>
    <updated>2020-05-26T04:57:36.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-部署ngxin镜像启动失败-外加一些常用操作"><a href="#docker-部署ngxin镜像启动失败-外加一些常用操作" class="headerlink" title="docker 部署ngxin镜像启动失败 外加一些常用操作"></a>docker 部署ngxin镜像启动失败 外加一些常用操作</h1><p>今天在docker里部署nginx遇到一个坑,如下:<br> [emerg] “user” directive is not allowed here in /etc/nginx/conf.d/nginx.conf:2</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接运行nginx 镜像</span></span><br><span class="line">docker run -d -p 80:80 --name nginx_1 \</span><br><span class="line">-v /opt/nginx/project:/usr/share/nginx/html \</span><br><span class="line">-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /opt/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /opt/nginx/cache:/var/cache/nginx/ \</span><br><span class="line">--privileged=true nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像,结果镜像没有起来</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">docker logs 126d58471a08</span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误结果说是 nginx.conf 的错误</span></span><br><span class="line">[emerg] "user" directive is not allowed here in /etc/nginx/conf.d/nginx.conf:2</span><br></pre></td></tr></table></figure><p>解决方法:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先跑一个</span></span><br><span class="line">docker run --name nginx_2 -d nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将它里的配置文件复制到想要映射的位置</span></span><br><span class="line">docker cp 126d58471a08:/etc/nginx/nginx.conf /opt/nginx/conf/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删掉之前的nginx 镜像,重新创建</span></span><br><span class="line">docker run -d -p 80:80 --name nginx_1 \</span><br><span class="line">-v /opt/nginx/project:/usr/share/nginx/html \</span><br><span class="line">-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /opt/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /opt/nginx/cache:/var/cache/nginx/ \</span><br><span class="line">--privileged=true nginx</span><br></pre></td></tr></table></figure><br>我这里有个想法,就不实验了,复制好了配置文件,直接启动之前的没有起来的镜像,看看是不是也可以,这样就省的重新 删除创建了,感兴趣的小伙伴可以试试.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到此为止镜像已经成功起来,下面记录一些常用操作<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入系统</span></span><br><span class="line">docker exec -it 126d58471a08 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查配置⽂件</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新载⼊配置⽂件</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 Nginx</span></span><br><span class="line">nginx -s reopen </span><br><span class="line"><span class="meta">#</span><span class="bash"> 停⽌ Nginx</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-部署ngxin镜像启动失败-外加一些常用操作&quot;&gt;&lt;a href=&quot;#docker-部署ngxin镜像启动失败-外加一些常用操作&quot; class=&quot;headerlink&quot; title=&quot;docker 部署ngxin镜像启动失败 外加一些常用操作&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="docker" scheme="http://www.wangjunjun.club/tags/docker/"/>
    
      <category term="nginx" scheme="http://www.wangjunjun.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>flex 布局</title>
    <link href="http://www.wangjunjun.club/2020/05/25/flex-%E5%B8%83%E5%B1%80/"/>
    <id>http://www.wangjunjun.club/2020/05/25/flex-%E5%B8%83%E5%B1%80/</id>
    <published>2020-05-25T09:34:02.000Z</published>
    <updated>2020-05-26T04:36:56.044Z</updated>
    
    <content type="html"><![CDATA[<p>Flex 布局</p><p>最近接触了 Flex布局，话不多说，干！</p><p>先说说Flex香在哪里，之前都用 float、position、display的各种迫害，Flex布局一个就可以搞定了</p><p><strong>注意： flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p><h2 id="简单介绍-Flex概念"><a href="#简单介绍-Flex概念" class="headerlink" title="简单介绍 Flex概念"></a>简单介绍 Flex概念</h2><p><img src="https://i.loli.net/2020/05/26/nAqjuwo1byP3XdY.png" alt="下载.png"></p><ul><li>轴：Flex 容器默认有两条轴，水平主轴（main axis）和垂直的交叉轴（cross axis）,当然这个并不是绝对的，好比直角坐标系的 x ,y 轴一样 地位相同可以互换。</li><li>flex item：容器中的每个单元块被称为 flex item，每个 item占用的主轴空间叫做（main size）,占据交叉轴的空间叫做（cross size）</li></ul><p>注意：还是说明一下，水平和垂直 只是相对的，可以互换，主要是看怎么调整的结果</p><h3 id="Flex-容器"><a href="#Flex-容器" class="headerlink" title="Flex 容器"></a>Flex 容器</h3><p>Flex布局的前提是先确定一个容器，可以类比一个房子，房子里的 item 都可以使用 flex 进行布局了。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex | inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex 是好比 div 的块元素</li><li>inline-flex 好比 span 的行内元素</li></ul><p>选好了 flex 容器，下面介绍一下容器可以设置的属性</p><ol><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ol><h4 id="1-flex-direction：决定主轴的方向-即项目的排列方向"><a href="#1-flex-direction：决定主轴的方向-即项目的排列方向" class="headerlink" title="1.flex-direction：决定主轴的方向(即项目的排列方向)"></a>1.flex-direction：决定主轴的方向(即项目的排列方向)</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：row  主轴为水平方向，起点在左端</li><li>row-reverse：主轴为水平方向，起点在右端</li><li>column：主轴为垂直方向，起点在上沿</li><li>column-reverse：主轴为垂直方向，起点在下沿</li></ul><h4 id="2-flex-wrap-决定容器内项目是否可换行"><a href="#2-flex-wrap-决定容器内项目是否可换行" class="headerlink" title="2. flex-wrap: 决定容器内项目是否可换行"></a>2. flex-wrap: 决定容器内项目是否可换行</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：nowrap 不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整而并不会挤到下一行。</li><li>wrap：项目主轴总尺寸超出容器时换行，第一行在上方</li><li>wrap-reverse：换行，第一行在下方</li></ul><h4 id="3-flex-flow-flex-direction-和-flex-wrap-的简写形式"><a href="#3-flex-flow-flex-direction-和-flex-wrap-的简写形式" class="headerlink" title="3. flex-flow: flex-direction 和 flex-wrap 的简写形式"></a>3. flex-flow: flex-direction 和 flex-wrap 的简写形式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-justify-content：定义了项目在-主轴-的对齐方式"><a href="#4-justify-content：定义了项目在-主轴-的对齐方式" class="headerlink" title="4. justify-content：定义了项目在 主轴 的对齐方式"></a>4. justify-content：定义了项目在 <strong><em>主轴</em></strong> 的对齐方式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值: flex-start 左对齐</li><li>flex-end：右对齐</li><li>center：居中 </li><li>space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙</li><li>space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍</li></ul><h4 id="5-align-items-定义了项目在交叉轴上的对齐方式"><a href="#5-align-items-定义了项目在交叉轴上的对齐方式" class="headerlink" title="5. align-items: 定义了项目在交叉轴上的对齐方式"></a>5. align-items: 定义了项目在交叉轴上的对齐方式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值为 stretch 即如果项目未设置高度或者设为 auto，将占满整个容器的高度。</li><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center：交叉轴的中点对齐</li><li>baseline: 项目的第一行文字的基线对齐</li></ul><h4 id="6-align-content-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用"><a href="#6-align-content-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用" class="headerlink" title="6. align-content: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用"></a><strong>6. align-content: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flex-Item-属性"><a href="#Flex-Item-属性" class="headerlink" title="Flex Item 属性"></a>Flex Item 属性</h3><p>flex item 有六种属性</p><ol><li>order</li><li>flex-basis</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ol><h4 id="1-order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0"><a href="#1-order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0" class="headerlink" title="1. order: 定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0"></a><strong>1. order: 定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间"><a href="#2-flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间" class="headerlink" title="2. flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间"></a><strong>2. flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值。</li><li><strong>当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</strong><ul><li>当 flex-basis 值为 0 % 时，是把该项目视为零尺寸的，故即使声明该尺寸为 140px，也并没有什么用。</li><li>当 flex-basis 值为 auto 时，则跟根据尺寸的设定值(假如为 100px)，则这 100px 不会纳入剩余空间。</li></ul></li></ul><h4 id="3-flex-grow-定义项目的放大比例"><a href="#3-flex-grow-定义项目的放大比例" class="headerlink" title="3. flex-grow: 定义项目的放大比例"></a>3<strong>. flex-grow: 定义项目的放大比例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-flex-shrink-定义了项目的缩小比例"><a href="#4-flex-shrink-定义了项目的缩小比例" class="headerlink" title="4. flex-shrink: 定义了项目的缩小比例"></a><strong>4. flex-shrink: 定义了项目的缩小比例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-flex-flex-grow-flex-shrink-和-flex-basis的简写"><a href="#5-flex-flex-grow-flex-shrink-和-flex-basis的简写" class="headerlink" title="5. flex: flex-grow, flex-shrink 和 flex-basis的简写"></a><strong>5. flex: flex-grow, flex-shrink 和 flex-basis的简写</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。</p><p>有关快捷值：auto (1 1 auto) 和 none (0 0 auto)</p><p>关于 flex 取值，还有许多特殊的情况，可以按以下来进行划分：</p><ul><li>当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 flex 取值为 0 时，对应的三个值分别为 0 1 0%</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;<span class="attribute">flex</span>: <span class="number">0%</span>;&#125;</span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;<span class="attribute">flex</span>: <span class="number">24px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2</span> <span class="number">3</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">11</span> <span class="number">32px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">11</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议优先使用这个属性，而不是单独写三个分离的属性。</p><p>grow 和 shrink 是一对双胞胎，grow 表示伸张因子，shrink 表示是收缩因子。</p><p>grow 在 flex 容器下的子元素的宽度和比容器和小的时候起作用。 grow 定义了子元素的尺寸增长因子，容器中除去子元素之和剩下的尺寸会按照各个子元素的 grow 值进行平分加大各个子元素上。</p><p><a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flex 布局&lt;/p&gt;
&lt;p&gt;最近接触了 Flex布局，话不多说，干！&lt;/p&gt;
&lt;p&gt;先说说Flex香在哪里，之前都用 float、position、display的各种迫害，Flex布局一个就可以搞定了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意： flex 布局之后，子元素的 
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.wangjunjun.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="flex" scheme="http://www.wangjunjun.club/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机 一</title>
    <link href="http://www.wangjunjun.club/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%B8%80/"/>
    <id>http://www.wangjunjun.club/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%B8%80/</id>
    <published>2020-03-05T04:48:24.000Z</published>
    <updated>2020-03-14T10:26:56.325Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><p><a href="https://docs.oracle.com/javase/8/docs/" target="_blank" rel="noopener">认识Java</a></p><h2 id="Java内存区域-与-内存溢出-异常"><a href="#Java内存区域-与-内存溢出-异常" class="headerlink" title="Java内存区域 与 内存溢出 异常"></a>Java内存区域 与 内存溢出 异常</h2><h3 id="一、-运行时数据区域"><a href="#一、-运行时数据区域" class="headerlink" title="一、 运行时数据区域"></a>一、 运行时数据区域</h3><h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h4><blockquote><p>程序计数器（Program Counter Register）是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</p></blockquote><p>  每个线程都有独立的程序计数器，各个线程之间计数器互不影响，<code>独立存储线程私有内存</code></p><ul><li>线程正在执<code>行一个Java方法</code>，计数器记录的是<code>正在执行的虚拟机字节码指令的地址</code></li><li>如果正在执行一个<code>native方法</code>，这个<code>计数器 为 空（undefined）</code></li></ul><h4 id="2-Java虚拟栈"><a href="#2-Java虚拟栈" class="headerlink" title="2. Java虚拟栈"></a>2. Java虚拟栈</h4><blockquote><p>Java虚拟栈（Java Virtual Machine Stacks）<code>也是线程私有的，它的生命周期和线程相同</code>。虚拟机栈描述的是Java方法执行的内存模型：<code>每个方法在执行的同时都会创建一个栈帧</code>（Stack Frame）用于存储<code>局部变量表、操作数栈、动态链接、方法出口</code> 等信息。每个方法从<code>调用</code>直到<code>执行完成</code>的过程，就对应<code>一个栈帧在虚拟机栈中入栈到出栈的过程</code>。</p></blockquote><h4 id="3-本地-方法栈"><a href="#3-本地-方法栈" class="headerlink" title="3. 本地 方法栈"></a>3. 本地 方法栈</h4><blockquote><p>本地方法栈（native method stack）与<code>Java虚拟机栈</code>所发挥的作用是非常相似的，它们之间的区别是<code>Java虚拟机栈 为虚拟机执行Java方法（字节码）服务，本地方法栈 为虚拟机使用到的native方法 服务。</code></p></blockquote><h4 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4. Java堆"></a>4. Java堆</h4><blockquote><p>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。 Java堆是被<code>所有线程共享</code>的一块<code>内存区域</code>，在<code>虚拟机启动时创建</code>。<code>目的：</code>存放对象实例，几乎所有的对象实例都在这里分配内存。</p><blockquote><p>所有的对象实例以及数组都要在堆上分配，但是随着 JIT 编辑器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换 优化技术将会导致一些微妙变化发生，所有对象都分配在堆上也渐渐变得 不是 那么 <code>绝对</code>了</p></blockquote></blockquote><p>Java堆 是<code>垃圾收集器管理</code>的<code>主要区域</code>，很多时候被成为 <code>GC堆（Garbage Collected Heap）</code></p><p>从<code>内存回收</code>的角度看，由于现在收集器基本都采用<code>分代收集算法</code></p><ol><li>新生代</li><li>老年代</li></ol><p>从<code>内存分配</code>的角度来看，线程共享的<code>Java堆</code>中可能划分出<code>多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）</code></p><p>Java堆<code>只要在逻辑上连续即可，不一定要物理上连续</code>。在实现时候，是可以扩展的（通过-Xmx  和 -Xms 控制）。如果在堆上没有内存完成实例分配，而且堆也无法拓展时 就会抛出 OutOfMemoryError异常</p><h4 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h4><blockquote><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于<code>存储已被虚拟机加载</code>的<code>类信息、常量、静态变量、即时编译器 编译后的代码</code>数据。别名（非堆 用来区分Java堆区）</p></blockquote><p>JDK1.7 的 HotSpot 字符串常量池 移出 永久代</p><p>Java虚拟机规范 对 方法区的限制非常宽松，在方法区 很少进行垃圾收集，内存回收目标 主要是针对常量池的回收和堆对类型的卸载</p><h4 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h4><blockquote><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了类的 <code>版本、字段、方法、接口</code>等描述的信息外，还有一项信息是<code>常量池（Constant Pool Table）</code>用于存放编译器生成的<code>各种字面量</code>和<code>符号引用</code>，这部分内容将<code>在类加载后</code> 进入方法区运行时常量池里<code>存放</code>。</p><p>运行时常量池 相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，运行期间也可能将新的常量放入池中，<code>例：String 类 的intern() 方法</code></p></blockquote><p>运行时常量池是方法区的一部分，自然受到方法区的限制，当常量池无法再申请到内存的时就会抛出　OutOfMemoryError 异常。</p><h4 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h4><blockquote><p>​    直接内存（Direct Memory）不是<code>虚拟机运行时候数据区的一部分</code>，也不是<code>Java虚拟机规范中定义的内存区域</code>。</p><p>​    在JDK1.4 中新加入的NIO（New Input/Output）类，引入了一种基于通道（Channel）和缓存区（Buffer）的 I/O 方式，它可以使用Native函数库直接分配堆外内存，<code>然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作</code>。这样就能在一些场景中显著提高性能，来避免在Java堆 和 Native堆中来回复制数据。</p><p>​    本机直接内存的分配不会受到Java堆大小的限制。但是，既然是内存，肯定还是会受到本机总内存（包括RAM 以及 SWAP区 或者分页文件）大小以及处理器寻址的限制。</p></blockquote><h3 id="二、HotSpot-虚拟机对象探秘"><a href="#二、HotSpot-虚拟机对象探秘" class="headerlink" title="二、HotSpot 虚拟机对象探秘"></a>二、HotSpot 虚拟机对象探秘</h3><p>这里会介绍 虚拟机内存中的数据的其他细节，比如 它们是<code>如何创建</code>、<code>如何布局</code> 以及 <code>如何访问的</code>，这里探讨<code>HotSpot 虚拟机 在Java堆中 对象分配、布局 和 访问 的全过程</code>。</p><h4 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1. 对象的创建"></a>1. 对象的创建</h4><ul><li><p>类加载检查</p><blockquote><p>​    虚拟机遇到一条 new 指令时，首先将去检查这个<code>指令的参数</code>是否能在<code>常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</code></p></blockquote><p>检查是否创建过，创建过直接使用引用，没创建 执行类加载过程</p></li></ul><ul><li><p>虚拟机为新生对象分配内存</p><p>在 <code>类加载检查后（也就是确保类已经生成了）</code>，在类加载完成后已经确定了 要创建对象所需要的内存的大小是多少。</p><p>两种情况：</p><ol><li><p>Java堆绝对规整 </p><p>指针碰撞    已用和空闲 中间放着一个指针作为分界点</p></li><li><p>Java堆不规整 </p><p>空闲列表    虚拟机维护一个列表，记录哪些内存可以使用</p></li></ol></li><li><p>考虑虚拟机创建是否频繁行为</p><p>两种解决方案：</p><ol><li><p>对分配内存空间的动作进行同步处理 实际上虚拟机采用 <code>CAS配上失败重试的方式保证更新操作的原子性</code></p></li><li><p>把内存分配的动作按照线程划分在不同的空间之中进行，即 每个线程在Java堆中预先分配一小块内存，称为<code>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</code>。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB<code>用完分配新的TLAB时</code>，才需要<code>同步锁定</code>。</p><p><code>虚拟机是否使用TLAB：通过 -XX：+/-UseTLAB</code></p></li></ol></li><li><p>内存分配完后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）</p><p>如果使用 TLAB，在TLAB分配前进行。<code>（保证对象的实例字段在Java代码中可以不赋值就可以直接使用，程序访问到这些字段的数据类型所对应的 零值）</code></p></li><li><p>虚拟机对对象进行必要的设置</p><p>对象信息头（Object Header）中：对象是哪个类实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄</p></li></ul><p>到这里位置</p><p>​    从<code>虚拟机的角度</code>看 已经产生一个新的对象产生了，</p><p>​    从<code>Java程序的视角</code>看 对象创建才刚开始<init>方法还没有执行，所有字段都为 零</p><h4 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2. 对象的内存布局"></a>2. 对象的内存布局</h4><p>HotSpot 中，对象在<code>内存中存储布局</code>分为 3 块区域：<code>对象头（Header）</code>、<code>实例数据（Instance Data）</code>、<code>对齐填充（Padding）</code></p><ul><li><p>对象头</p><p>对象头包括两部分信息，</p><p>第一部分用于存储对象自身的运行时数据，哈希码（Hash Code）、GC分代年龄、锁状态、线程持有锁、偏向线程ID、偏向时间戳，这部分长度32bit（32位虚拟机）或64bit（64位虚拟机）<code>官方称作 -&gt; Mark Word</code></p><p>​    Mark Word被设计城一个<code>非固定的数据结构以便在极小的空间内存存储尽量多的信息，它会根据对象的状态复用自己的存储空间。</code></p></li></ul><p>  <img src="https://github.com/mambaJun/picture/blob/master/blog/image.OYOZG0.png" alt="image.OYOZG0"></p><p>  第二部分 是类型指针，即对象指向它的类 元数据的指针，虚拟机根据指针确定对象是哪个类实例。</p><p>  但是 并不是所有的虚拟机实现都必须在对象数据上保留类型指针</p><ul><li><p>实例数据</p><p>​    实例数据部分是<code>对象真正的存储的有效信息</code>,也是在程序代码中所定义的各种类型的字段内容。这部分的存储顺序会受到<code>虚拟机分配策略参数 和 字段在Java源码中定义顺序</code>影响。</p><p>​    HotSpot虚拟机默认的分配策略为 longs/doubles 、ints、shorts/chars、bytes/booleans、oop（Ordinary Object Pointers）,从<code>分配策略</code>中可以看出，<code>相同宽度字段总是分配到一起</code>。</p><p>​    在满足这个前提条件下，<code>父类中定义的变量</code>会出现在<code>子类之前</code>，如果CompactField 参数值 为 true（默认为true），<code>子类中较窄的变量</code>也可能插入<code>父类变量的空隙中</code>。</p></li></ul><ul><li><p>对齐填充</p><p>​    对齐填充并不是必然存在的,也没有特别的含义,它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍,换句话说，就是对象的大小必须是8字节的整数倍。</p><p>而对象头部分正好是8字节的倍数(1倍或者2倍)，因此,当<code>对象实例数据部分没有对齐时,就需要通过对齐填充来补全。</code></p></li></ul><h4 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a>3. 对象的访问定位</h4><p>​    创建对象是为了使用对象，Java程序通过 <code>栈上的reference 数据</code>来操作<code>堆上的具体对象</code>。<code>由于 reference类型在Java虚拟机规范中只规定了一个指向对象的引用，但是没有定义通过何种方式去定位</code></p><p>目前主流的指针访问方式 有使用 <code>句柄</code> 和 <code>直接指针</code> 两种。</p><ul><li><p>使用句柄访问</p><p>​    <img src="https://github.com/mambaJun/picture/blob/master/blog/image.B2MIH0.png" alt=""></p><p><img src="/tmp/evince-30282/image.B2MIH0.png" alt="image.B2MIH0"></p><p>使用句柄访问，<code>Java堆</code>中将会<code>划分出一块内存来作为句柄</code>，reference 中存储的就是对象的句柄地址，句柄中包含了<code>对象实例数据</code> 与 <code>类型数据各自的具体地址信息</code></p></li><li><p>使用直接指针访问</p><p>使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中存储的直接就是对象地址</p></li></ul><p><img src="/tmp/evince-30282/image.MGC1G0.png" alt="image.MGC1G0"></p><p>​    <img src="https://github.com/mambaJun/picture/blob/master/blog/image.MGC1G0.png" alt=""></p><p>小结：</p><p>​    两种访问方式各有优势</p><p>​    句柄访问最大的好处 reference中存储稳定的句柄地址，在对象被移动（垃圾收集时移动对象）时 只会改变句柄中的实例数据指针，而 reference本身不需要修改</p><p>​    直接指针访问 最大的好处是 速度更快，节省了一次指针定位的时间开销，由于对象的访问在Java中频繁， 这种开销积少成多后是非常客观的</p><p>​    <code>HotSpot 是采用直接指针方式进行对象访问，但是各种语言和框架使用句柄的情况也很常见</code></p><h3 id="三、实战：OutOfMemoryError-异常"><a href="#三、实战：OutOfMemoryError-异常" class="headerlink" title="三、实战：OutOfMemoryError 异常"></a>三、实战：OutOfMemoryError 异常</h3><p>在 Java虚拟机规范中，除了程序计数器外，虚拟机内存的其他几个运行时 区域都有发生 OutOfMemoryError（OOM）</p><p>​    第一：通过代码验证Java虚拟机规范中描述的各个运行时 区域存储的内容</p><p>​    第二：在工作中遇到实际的内存溢出异常时,能根据异常的信息快速，判断是哪个区域的内存溢出,知道什么样的代码可能会导致这些区域内存溢出,以及出现这些异常后该如何处理。</p><h4 id="1-Java堆溢出"><a href="#1-Java堆溢出" class="headerlink" title="1. Java堆溢出"></a>1. Java堆溢出</h4><p>​    <code>Java堆</code> 用于<code>存储对象实例</code>，只要不断地创建对象并且保证GC Roots 到对象之间有可达路径来避免垃圾回收机制清除这些对象，在对象数量到达最大堆容量限制后就会产生产生内存溢出异常。</p><p>​    Java堆 将<code>堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</code>   </p><p>​    <code>-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆</code><br><code>转储快照以便事后进行分析</code></p><h4 id="2-虚拟机栈-和-本地方法栈溢出"><a href="#2-虚拟机栈-和-本地方法栈溢出" class="headerlink" title="2. 虚拟机栈 和 本地方法栈溢出"></a>2. 虚拟机栈 和 本地方法栈溢出</h4><p>由于在HotSpot 虚拟机中并不区分 虚拟机栈 和 本地方法栈</p><p>​    如果<code>线程请求的栈深度大于 虚拟机所允许的最大深度</code>，抛出 StackOverflowError 异常</p><p>​    如果<code>虚拟机在扩展时无法申请到足够的内存空间</code>，抛出 StackOverflowError 异常</p><p>当栈空间无法继续分配时，本质上就是栈空间使用太大，导致的内存太小</p><p>-Xss 参数减少栈 内存容量</p><h4 id="3-方法区-和-运行时常量池-溢出"><a href="#3-方法区-和-运行时常量池-溢出" class="headerlink" title="3. 方法区 和 运行时常量池 溢出"></a>3. 方法区 和 运行时常量池 溢出</h4><p>-XX: PermSize=10m<br>-XX: MaxPermSize=10m</p><p>-XX:PermSize和-XX:MaxPermSize限制方法区大小,从而间接限制其中常量池的容量</p><h4 id="4-本机直接内存溢出"><a href="#4-本机直接内存溢出" class="headerlink" title="4. 本机直接内存溢出"></a>4. 本机直接内存溢出</h4><p>DirectMemory 容量 可以通过 -XX: MaxDirectMemorySize 指定，如果不指定默认和Java堆最大堆一样</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Java虚拟机&quot;&gt;&lt;a href=&quot;#Java虚拟机&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机&quot;&gt;&lt;/a&gt;Java虚拟机&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/java
      
    
    </summary>
    
    
      <category term="Java虚拟机" scheme="http://www.wangjunjun.club/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java虚拟机" scheme="http://www.wangjunjun.club/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机 二</title>
    <link href="http://www.wangjunjun.club/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%BA%8C/"/>
    <id>http://www.wangjunjun.club/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%BA%8C/</id>
    <published>2020-03-05T04:48:24.000Z</published>
    <updated>2020-03-15T03:34:37.715Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="垃圾收集器-与-内存分配策略"><a href="#垃圾收集器-与-内存分配策略" class="headerlink" title="垃圾收集器 与 内存分配策略"></a>垃圾收集器 与 内存分配策略</h1><blockquote><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”,墙外面的人想<br>进去,墙里面的人却想出来。</p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>了解GC和内存分配的原因：</p><p>​    当需要排查各种内存溢出、内存泄露问题时，当垃圾收集成为系统达到更高并发量的瓶颈时候，就需要对这些“自动化”的技术实施必要的监控和调节。</p><p><span id = "jump">跳转到这里：</span></p><h2 id="二、对象已死吗"><a href="#二、对象已死吗" class="headerlink" title="二、对象已死吗"></a>二、对象已死吗</h2><p>在 Java堆 放着Java中几乎所有的对象实例，垃圾收集器在进行 堆<code>回收之前</code>，首先要做的就是确定这些对象中 哪些对象还 “存活”着，哪些已经“死去”<code>（即不可能再被任何途径使用的对象）</code></p><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1. 引用计数算法"></a>1. 引用计数算法</h3><blockquote><p>给对象中添加一个引用计数器，每有一个地方引用她时候，计数器就 加 1；引用失效时，计数器就 减 1,，任何时刻计数器 为 0的对象就不可能再被使用</p></blockquote><p>Java没有选用 引用计数算法来管理内存，<code>原因是它很难解决对象之间的互相循环引用问题。</code></p><h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h3><blockquote><p>基本思路：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径为 引用链（Reference Chain）,当一个对象到GC Roots没有任何引用链 相连时，证明此对象不可用</p></blockquote><p>Java中 可以作为 GC Roots对象包括以下几种：</p><ul><li><code>虚拟机栈（栈帧中的本地变量表）中引用</code>的对象</li><li><code>方法区中类静态属性 引用</code>的对象</li><li><code>方法区中常量引用</code>的对象</li><li><code>本地方法栈 中JNI（一般说的 Native 方法）引用</code>的对象。</li></ul><h3 id="3-引用是啥玩意-都有啥"><a href="#3-引用是啥玩意-都有啥" class="headerlink" title="3. 引用是啥玩意,都有啥"></a>3. 引用是啥玩意,都有啥</h3><blockquote><p>如果<code>reference类型的数据中存储的数值</code>代表的是<code>另外一块内存的起始地址</code>，就称为这块内存代表着一个引用。</p></blockquote><p>Java中分为 <code>强引用、软引用、弱引用、虚引用</code></p><ul><li><p>强引用（Strong Reference）</p><p>在程序代码中普遍存在的，类似 <code>Object obj = new Object()</code>的引用，只要强引用还存在，垃圾收集器不会回收被引用的对象。</p></li><li><p>软引用（Soft Reference）</p><p>软引用用来描述一些还有用但并非必需的对象，软引用关联的对象，在系统将要发生内存溢出的异常之前会把这些对象列进中进行第二次回收。这次回收没有足够的内存，才会抛出内存溢出异常</p></li><li><p>弱引用（Weak Reference）</p><p>弱引用用来描述非必需对象的，强调比弱引用更弱，被<code>弱引用关联的对象</code>只能<code>生存到下一次垃圾收集前</code></p></li><li><p>虚引用（Phantom Reference）</p><p>​    最弱的引用关系。<code>一个对象是否有虚引用的存在不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例</code>，<code>为</code>一个<code>对象设置虚引用</code>关联的<code>唯一目的</code>就是能<code>在这个对象被收集器回收时收到一个系统通知</code></p></li></ul><h3 id="4-生存还是死亡（标记过程）"><a href="#4-生存还是死亡（标记过程）" class="headerlink" title="4. 生存还是死亡（标记过程）"></a>4. 生存还是死亡（标记过程）</h3><p>在<code>可达性分析算法中</code>的<code>不可达的对象，也不是非死不可的，</code>这个时候它们暂时处于缓刑阶段，真正的宣告一个对象死亡需要经历两次<span id="markup_process">标记过程</span>：</p><ol><li><p>如果对象在进行可达性分析后发现没有与 GC Roots相连接的引用链，会被第一次标记并且进行一次筛选，筛选的条件是这个对象是不是有必要执行 finalize()方法。</p><ul><li>当对象没有<code>覆盖 finalize() 方法</code></li><li>finalize() 方法<code>已经被虚拟机调用过</code></li></ul><p>以上两种情况，虚拟机都当做“没必要执行”</p></li><li><p>如果<code>对象被判定有必要执行finalize() 方法</code>，这个对象<code>就被放置在一个叫做 F-Queue的队列中</code>，并且在稍后 <code>一个由虚拟机自动建立的、低优先级的Finalizer 线程 去执行它</code>。这里所谓的“执行”是指<code>虚拟机会触发这个方法,但并不承诺会等待它运行结束</code>,这样做的原因是,如果一个对象在finalize()方法中执行缓慢,或者发生了死循环(更极端的情况),将很可能会导致F-Queue队列中其他对象永久处于等待,甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会,稍后GC将对F-Queue中的对象进行第二次小规模的标记,如<code>果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可</code>,譬如把自己(this关键字)赋值给某个类变量或者对象的成员变量,那在第二次标记时<code>它将被移除出“即将回收”的集合</code>;如果对象这时候还没有逃脱,那基本上它就真的被回收了。</p></li></ol><h3 id="5-回收方法区"><a href="#5-回收方法区" class="headerlink" title="5. 回收方法区"></a>5. 回收方法区</h3><blockquote><p>Java虚拟机规范中说过 可以不要求虚拟机在方法区实现垃圾收集，而且在方法区中进行垃圾收集的“性价比”一般比较低。在堆中国，尤其是新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，永久代的垃圾收集效率远低于这个。</p></blockquote><p>永久代的垃圾收集主要回收两个部分内容： <code>废弃常量和无用的类</code></p><p>回收废弃常量和回收Java堆中的对象类似。如果没有对象引用 常量池的某个常量，也没有其他地方引用了这个字面量。如果这个时候发生内存回收，而且必要的话，常量就会被系统清理出常量池。常量池中的其他类（接口）、方法、字段的符号引用也是类似。</p><p>判定<code>无用类</code>的条件：</p><ul><li>该类的所有实例都已经被回收，即Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li></ul><p>虚拟机可以对满足上述3个条件的无用类进行回收,这里说的仅<code>仅是“可以”</code>,而并<code>不是和对象一样,不使用了就必然会回收</code>。</p><p>HotSpot 虚拟机提供了</p><p>-Xnoclassgc参数进行控制</p><p>-verbose:class、-XX:+TraceClassLoading、-XX:+TraceClassUnLoading 查看类加载和卸载信息</p><h2 id="三-垃圾手机算法"><a href="#三-垃圾手机算法" class="headerlink" title="三. 垃圾手机算法"></a>三. 垃圾手机算法</h2><p>几种算法的思想</p><h3 id="1-清除-标记算法"><a href="#1-清除-标记算法" class="headerlink" title="1. 清除-标记算法"></a>1. 清除-标记算法</h3><p>算法分为两个阶段：<code>清除、标记</code>两个阶段</p><ol><li><p>清除</p><p>先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象</p></li><li><p>标记</p><p>见  <a href="#markup_process">标记过程</a></p></li></ol><p>清除-标记算法是个最基础算法，后续的收集算法都是基于这个思路对其不足进行改进而得到的</p><p>主要不足：<code>浪费时间和空间</code></p><ol><li><code>效率问题</code>，标记和清除<code>两个过程的效率</code>都<code>不</code>是太<code>高</code></li><li><code>空间问题</code>，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致后面程序运行过程中需要分配较大对象时，不能找到足够内存而不得不提前触发的一次垃圾收集动作</li></ol><h3 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2. 复制算法"></a>2. 复制算法</h3><p>为了</p><h3 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3. 标记-整理算法"></a>3. 标记-整理算法</h3><h3 id="4-分代收集算法"><a href="#4-分代收集算法" class="headerlink" title="4. 分代收集算法"></a>4. 分代收集算法</h3><p>​    根据对象存活周期的不同将内存划分为几块。<code>Java堆</code>分为新生代 和 老年代，可以<code>根据各个年代的特点采用最适当的收集算法</code></p><p>​    在<code>新生代中</code>，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就蒜用<code>复制算法</code>，只需要付出少量存活对象的复制成本就可以完成收集</p><p>​    在<code>老年代中</code> 因对象存活率高、没有额外空间进行分配担保，就必须使用<code>“标记-清理”或者“标记-整理”算法 进行回收。</code></p><h2 id="四、HotSpot-的算法实现"><a href="#四、HotSpot-的算法实现" class="headerlink" title="四、HotSpot 的算法实现"></a>四、HotSpot 的算法实现</h2><h3 id="1-枚举根节点"><a href="#1-枚举根节点" class="headerlink" title="1. 枚举根节点"></a>1. 枚举根节点</h3><h3 id="2-安全点"><a href="#2-安全点" class="headerlink" title="2. 安全点"></a>2. 安全点</h3><h3 id="3-安全域"><a href="#3-安全域" class="headerlink" title="3. 安全域"></a>3. 安全域</h3><h2 id="五、垃圾收集器"><a href="#五、垃圾收集器" class="headerlink" title="五、垃圾收集器"></a>五、垃圾收集器</h2><h3 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1. Serial 收集器"></a>1. Serial 收集器</h3><h3 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2. ParNew 收集器"></a>2. ParNew 收集器</h3><h3 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3. Parallel Scavenge 收集器"></a>3. Parallel Scavenge 收集器</h3><h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h3><h3 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5. Parallel Old 收集器"></a>5. Parallel Old 收集器</h3><h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h3><h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. G1收集器</h3><h3 id="8-理解-GC日志"><a href="#8-理解-GC日志" class="headerlink" title="8. 理解 GC日志"></a>8. 理解 GC日志</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;垃圾收集器-与-内存分配策略&quot;&gt;&lt;a href=&quot;#垃圾收集器-与-内存分配策略&quot; class=&quot;headerlink&quot; title=&quot;垃圾收集器 与 内存分配策略&quot;&gt;&lt;/a&gt;垃圾收集器 与 内存分配策略&lt;/h1&gt;&lt;blockquote&gt;
      
    
    </summary>
    
    
      <category term="Java虚拟机" scheme="http://www.wangjunjun.club/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java虚拟机" scheme="http://www.wangjunjun.club/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-网络安全</title>
    <link href="http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
    <published>2020-02-19T13:12:53.000Z</published>
    <updated>2020-06-05T05:27:53.783Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机网络-网络安全"><a href="#计算机网络-网络安全" class="headerlink" title="计算机网络 网络安全"></a>计算机网络 网络安全</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1安全包括："><a href="#1-1安全包括：" class="headerlink" title="1.1安全包括："></a>1.1安全包括：</h3><ul><li>数据安全</li><li>应用安全</li><li><p>操作系统安全</p></li><li><p>网络安全</p></li><li>物理安全</li><li>用户安全教育</li></ul><h3 id="1-2网络安全问题概述"><a href="#1-2网络安全问题概述" class="headerlink" title="1.2网络安全问题概述"></a>1.2网络安全问题概述</h3><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/被动攻击与主动攻击.png" alt="被动攻击与主动攻击"></p><p>计算机网络上通信面临一下四种威胁</p><ol><li><p>截获 — 从网络上窃听他人的通信内容。</p><p>MAC地址欺骗</p><p>IP 地址欺骗</p></li><li><p>中断 — 有意中断他人在网络上的通信<br> <code>本质上是ARP 欺骗</code></p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>篡改 — 故意篡改网络上传送的报文</p></li><li><p>伪造 — 伪造信息在网络上传送</p></li></ol><p>截获信息的攻击称为<code>被动攻击</code>，而更改信息和拒绝用户使用资源的攻击称为<code>主动攻击</code>。</p><h2 id="二、两类密码体制"><a href="#二、两类密码体制" class="headerlink" title="二、两类密码体制"></a>二、两类密码体制</h2><h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><ul><li><p>对称加密</p><p>优点 效率高</p><p>缺点 密钥不适合在网上传输 密钥维护麻烦</p></li><li><p>非对称密钥</p><p>加密密钥和解密密钥是不同的 密钥对 <code>公钥和私钥</code></p><p>​    公钥加密   -&gt; 私钥解密</p><p>​    私钥加密  -&gt; 公钥解密</p></li></ul><h2 id="三、数字签名"><a href="#三、数字签名" class="headerlink" title="三、数字签名"></a>三、数字签名</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>数字签名：防止抵赖 能够检查签名后内容是否被更改。</p><h3 id="3-2-证书颁发机构作用"><a href="#3-2-证书颁发机构作用" class="headerlink" title="3.2  证书颁发机构作用)"></a>3.2 <a href="[https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741?fromtitle=CA&amp;fromid=20721560](https://baike.baidu.com/item/CA证书/10028741?fromtitle=CA&amp;fromid=20721560"> 证书颁发机构作用</a>)</h3><p>证书颁发机构作用：</p><ul><li>为企’’业和用户颁发数据证书 确认这些企业和个人的身份</li><li>发布证书吊销列表</li><li>企业和个人信任证书颁发机构</li></ul><h2 id="四、因特网使用的安全协议"><a href="#四、因特网使用的安全协议" class="headerlink" title="四、因特网使用的安全协议"></a>四、因特网使用的安全协议</h2><h3 id="4-1-安全套接字-SSL"><a href="#4-1-安全套接字-SSL" class="headerlink" title="4.1 安全套接字 SSL"></a>4.1 安全套接字 SSL</h3><p>​    在发送发，SSL收到应用层的数据（如HTTP或IMAP报文），对数据进行加密，然后把加密的数据送往TCP套接字。</p><p>​    在接收方，SSL从TCP套接字读取数据，解密后把数据交给应用层。</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">在发送方发送前 和 在接收方接收前 进行数据安全验证，位于应用层和传输层之间。</span><br><span class="line">用来防止数据泄露。</span><br></pre></td></tr></table></figure><p>HTTPS    TCP + 443</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/SSL位置.png" alt="SSL位置"></p><h3 id="4-2-网络层安全-IPSec"><a href="#4-2-网络层安全-IPSec" class="headerlink" title="4.2 网络层安全 IPSec"></a>4.2 网络层安全 IPSec</h3><h4 id="安全关联-SA（Security-Association）"><a href="#安全关联-SA（Security-Association）" class="headerlink" title="安全关联 SA（Security Association）"></a>安全关联 SA（Security Association）</h4><p>​    在使用 AH 或 ESP之前，先要从源主机到目的主机建立一条网络层的逻辑连接。此逻辑连接叫做安全关联 SA。</p><p>​    IPsec 就把传统的因特网无连接的网络层转换为具有逻辑连接的层。</p><blockquote><p>SA（安全关联）是构成IPSec的基础，是两个通信实体经协商（利用IKE协议）建立起来的一种协定，它决定了用来保护数据分组安全的安全协议（AH协议或ESP协议）、转码方式，密钥及密钥的有效存在时间等。</p></blockquote><h4 id="鉴别首部-AH（Authentication-Header）"><a href="#鉴别首部-AH（Authentication-Header）" class="headerlink" title="鉴别首部 AH（Authentication Header）"></a>鉴别首部 AH（Authentication Header）</h4><blockquote><p>鉴别首部 AH（Authentication Header）：AH鉴别源点和检查数据完整性，但<code>不能保密</code>。</p></blockquote><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/鉴别首部协议AH在数据报中的位置.png" alt="鉴别首部协议AH在数据报中的位置"></p><p>在使用鉴别首部协议 AH时，把AH 首部插在原数据报数据部分的前面，同时把<code>IP首部中的协议字段置为　51</code>。</p><h4 id="封装安全有效载荷（Encapsulation-Security）"><a href="#封装安全有效载荷（Encapsulation-Security）" class="headerlink" title="封装安全有效载荷（Encapsulation Security）"></a>封装安全有效载荷（Encapsulation Security）</h4><blockquote><p>封装安全有效载荷 ESP（Encapsulation Security）：ESP 比AH复杂得多，它鉴别源点、检查数据完整性和<code>提供保密</code>。</p></blockquote><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/封装安全有效载荷ESP在数据报中的位置.png" alt="封装安全有效载荷ESP在数据报中的位置"></p><p>使用ESP时，IP数据报首部的协议字段置为50。当IP首部检查到协议字段是 50 时，就知道在IP首部后面紧接着的是ESP首部，同时在原IP数据报后面增加了两个字段，即ESP尾部和ESP数据。</p><h2 id="五、链路加密与端到端加密"><a href="#五、链路加密与端到端加密" class="headerlink" title="五、链路加密与端到端加密"></a>五、链路加密与端到端加密</h2><h2 id="六、防火墙"><a href="#六、防火墙" class="headerlink" title="六、防火墙"></a>六、防火墙</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;计算机网络-网络安全&quot;&gt;&lt;a href=&quot;#计算机网络-网络安全&quot; class=&quot;headerlink&quot; title=&quot;计算机网络 网络安全&quot;&gt;&lt;/a&gt;计算机网络 网络安全&lt;/h1&gt;&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="网络安全" scheme="http://www.wangjunjun.club/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-传输层小结</title>
    <link href="http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-02-18T18:28:34.686Z</published>
    <updated>2020-05-26T04:38:09.868Z</updated>
    
    <content type="html"><![CDATA[<p>title: 计算机网络-传输层小结<br>date: 2020-02-13 13:35:15<br>tags:</p><ul><li>传输层</li><li>TCP/UDP协议<br>categories:</li><li>计算机网络</li></ul><p>index_img: /img/default.png  </p><p>[TOC]</p><h1 id="传输层学习笔记"><a href="#传输层学习笔记" class="headerlink" title="传输层学习笔记"></a>传输层学习笔记</h1><p>主要内容包括：</p><ol><li>传输层的功能</li><li>传输层协议UDP 和 TCP</li><li>网络安全</li><li>TCP可靠传输的实现</li><li>TCP流量控制</li><li>TCP的拥塞控制</li><li>TCP的传输连接管理</li></ol><div class="table-container"><table><thead><tr><th>OSI</th><th>DOD</th><th>TCP/IP协议集</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>Telent，FTP，SMTP，DNS，HTTP等</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP，UCP</td></tr><tr><td>网络层</td><td>网络层</td><td>IP，ARP，RARP，ICMP</td></tr><tr><td>数据链路层</td><td>网络接口</td><td>各种通信网络接口（以太网等）物理网络</td></tr><tr><td>物理层</td><td>网络接口</td></tr></tbody></table></div><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="传输层有个协议-TCP-和UDP"><a href="#传输层有个协议-TCP-和UDP" class="headerlink" title="传输层有个协议 TCP 和UDP"></a>传输层有个协议 <code>TCP</code> 和<code>UDP</code></h3><ul><li><p>TCP （Transmission Control Protocol），传输控制协议</p><p>客户端与服务器之间建立会话，将需要传输的文件分段传输，可靠传输、流量控制</p></li><li><p>UDP（User Data Protocol）,用户数据报协议</p><p>用户报文协议，一个数据包就能够完成数据通信，不分段，不需要建立会话，不需要流量控制，不是可靠传输</p></li></ul><p>一个数据包最大是 65535（2^16）字节</p><p>数据链路层 46-1500 字节</p><h3 id="应用层和传输层协议之间的关系"><a href="#应用层和传输层协议之间的关系" class="headerlink" title="应用层和传输层协议之间的关系"></a>应用层和传输层协议之间的关系</h3><p><img src="https://i.loli.net/2020/02/13/P4bXVAFnZhkouiU.png" alt="应用层和传输层关系.png"></p><p>常见的应用层协议使用的端口</p><div class="table-container"><table><thead><tr><th>协议名称</th><th>端口</th></tr></thead><tbody><tr><td>Http</td><td>TCP + 80</td></tr><tr><td>Https</td><td>TCP + 443</td></tr><tr><td>RDP</td><td>TCP + 3389</td></tr><tr><td>FTP</td><td>TCP + 21</td></tr><tr><td>共享文件夹</td><td>TCP + 445</td></tr><tr><td>SMTP</td><td>TCP + 25</td></tr><tr><td>POP3</td><td>TCP + 110</td></tr><tr><td>Telnet</td><td>TCP + 23</td></tr><tr><td>DNS</td><td>UDP + 53</td></tr></tbody></table></div><h3 id="服务与应用层之间的关系"><a href="#服务与应用层之间的关系" class="headerlink" title="服务与应用层之间的关系"></a>服务与应用层之间的关系</h3><ul><li>服务使用TCP或UDP端口侦听客户端请求</li><li>客户端使用IP地址定位服务器 （使用目标端口 定位服务）</li><li>可以在服务器网卡上设置只开放必要端口，实现服务器的网络安全</li></ul><p>如何查看服务侦听</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看会话</span></span><br><span class="line">netstat -n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看建立会话的进程</span></span><br><span class="line">netstat -nb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看计算机侦听端口</span></span><br><span class="line">netstat -an</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据状态筛选</span></span><br><span class="line">netstat -n : find "ESTABLISHED"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试到远程计算机某个端口是否打开 telnet 192.168.1.1 3389</span></span><br><span class="line">telnet 192.168.1.1 3389</span><br></pre></td></tr></table></figure><h3 id="传输层功能-和-端口范围"><a href="#传输层功能-和-端口范围" class="headerlink" title="传输层功能 和 端口范围"></a>传输层功能 和 端口范围</h3><p><img src="https://i.loli.net/2020/02/14/zpdTxJjk5Vu174t.png" alt="传输层功能.png"></p><h4 id="传输层功能"><a href="#传输层功能" class="headerlink" title="传输层功能"></a>传输层功能</h4><p>传输层功能：为<code>应用进程之间</code>提供端到端的逻辑通信</p><ul><li>传输层还要对收到的报文进行差错检测</li><li>传输层提供面向连接（TCP）和面向无连接（UDP）的服务</li></ul><h4 id="传输层和应用层之间的主要区别"><a href="#传输层和应用层之间的主要区别" class="headerlink" title="传输层和应用层之间的主要区别"></a>传输层和应用层之间的主要区别</h4><ul><li>网络层 提供主机之间的逻辑通信</li><li>传输层提供进程之间的逻辑通信</li></ul><p><img src="https://i.loli.net/2020/02/14/nrfCAaeLzmVqZW1.png" alt="传输层和网络层的主要区别.png"></p><h4 id="端口-0-65535"><a href="#端口-0-65535" class="headerlink" title="端口 0 ~ 65535"></a>端口 0 ~ 65535</h4><p>端口用一个 16 位端口号进行标志</p><p>端口号只具有本地意义，即端口号只是为了标志本计算机应用层中各个进程。在因特网中不同计算机的相同端口号咯是没有联系的。</p><p>端口分类（三类端口）</p><ol><li>熟知端口 0 ~ 1023</li><li>登记端口 1024 ~ 49151</li><li>客户端口 49152 ~ 65535</li></ol><h2 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h2><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><ol><li>UDP是无连接的，发送数据之前不需要建立连接</li><li>UDP使用尽量最大努力交付，不保证可靠交付，同时也不适用拥塞控制</li><li>UDP是面向报文的。UDP没有拥塞控制，适合多媒体通信的要求</li><li>UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>UDP的首部开销小，只有八个字节</li></ol><h3 id="UDP首部：首部开销小，只有八个字节"><a href="#UDP首部：首部开销小，只有八个字节" class="headerlink" title="UDP首部：首部开销小，只有八个字节"></a>UDP首部：首部开销小，只有八个字节</h3><p><img src="https://i.loli.net/2020/02/14/c9oGH51gdEab8MV.png" alt="UDP协议首部.png"></p><p><img src="https://i.loli.net/2020/02/14/dn1VuitPBqDr63N.png" alt="UDP首部格式.png"></p><div class="table-container"><table><thead><tr><th>首部字段名称</th><th>描述</th></tr></thead><tbody><tr><td>检验和</td><td><img src="https://i.loli.net/2020/02/14/e2Tlziw8da1mgvF.png" alt="UDP检验和计算.png"></td></tr><tr><td>长度</td><td>UDP首部 + 数据总 长度</td></tr><tr><td>源端口</td><td></td></tr><tr><td>目标端口</td><td></td></tr><tr><td>伪首部（网络层首部的）</td><td>这个是网络层首部信息，不是真的传输层信息，用来计算 <code>检验和</code></td></tr></tbody></table></div><h2 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a>三、TCP</h2><h3 id="TCP-特点和概述"><a href="#TCP-特点和概述" class="headerlink" title="TCP 特点和概述"></a>TCP 特点和概述</h3><ol><li><p>TCP是面向连接的传输层协议</p><p>传输之前，需要进行三次握手，确认通畅</p></li><li><p>每一条TCP连接只能有两个端点（endpoint）,每一条TCP连接只能是点对点（一对一）</p></li><li><p>TCP提供可靠交付服务</p></li><li><p>TCP提供全双工通信</p></li><li><p>面向字节流 </p></li></ol><h3 id="TCP面向字节流-传输"><a href="#TCP面向字节流-传输" class="headerlink" title="TCP面向字节流 传输"></a>TCP面向字节流 传输</h3><ol><li><p>发送方  和 接收方 建立连接，准备文件</p><p><img src="https://i.loli.net/2020/01/07/zxAUH6cR8nYBhqi.png" alt="tcp1.png"></p></li><li><p>发送方 将数据分块 缓存到 TCP 缓存，每次缓存大小没有规律</p></li></ol><p>   <img src="https://i.loli.net/2020/01/07/e3zGocvkX2lbQJR.png" alt="tcp2.png"></p><ol><li><p>从缓存中取出数据（这里的取出也是没有规律），添加TCP 头封装成数据包</p><p><img src="https://i.loli.net/2020/01/07/LTxVzPCHrm453IA.png" alt="tcp3.png"></p></li><li><p>接收端 将收到的数据放入 TCP缓存中，同时去掉 TCP 头，<code>按照顺序</code>将发送端分割的数据包组装起来</p><p><img src="https://i.loli.net/2020/01/07/LF3kS7ReVmdUI41.png" alt="tcp4.png"></p></li><li><p>接收端 从 TCP缓存中读取数据（这里的读取大小也是没有规律，每次读几个不定）</p><p><img src="https://i.loli.net/2020/01/07/tKeLzubr8ABQypC.png" alt="tcp5.png"></p><p><img src="https://i.loli.net/2020/01/07/MZ8D6pt9gAWIsRq.png" alt="tcp6.png"></p></li></ol><h3 id="TCP的连接"><a href="#TCP的连接" class="headerlink" title="TCP的连接"></a>TCP的连接</h3><p>TCP把连接作为最基本的抽象，每一条TCP连接有两个端点</p><p>TCP连接的端口不是主机，不是IP地址，不是应用程序，不是传输层的协议端口。</p><p>TCP连接的端点叫做　<code>套接字（socket）</code></p><p>​    套接字：端口号 + IP地址</p><p><img src="https://i.loli.net/2020/02/14/6Q4ZkxWdFGzNDCh.png" alt="套接字.png"></p><h3 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h3><p><img src="https://i.loli.net/2020/02/14/Ii36hva4fMpOj2e.png" alt="TCP首部样例.png"></p><p><img src="https://i.loli.net/2020/02/14/Q2Wji7YFmqXaJhn.png" alt="TCP首部格式.png"></p><div class="table-container"><table><thead><tr><th>字段名称</th><th>描述</th></tr></thead><tbody><tr><td>源端口 Source Port</td><td></td></tr><tr><td>目的端口 Destination Port</td><td></td></tr><tr><td>序号 Sequence number</td><td>如果是第一个 序号为 1，不是第一个序列号为上个数据包的确认号 + 1</td></tr><tr><td>确认号 Acknowledgment number</td><td>告诉发送者 下一个 该发哪一个数据包</td></tr><tr><td>数据偏移Header Length</td><td>标记TCP段的首位长度，在TCP报文段中第几号开始是TCP数据部分，占四个字节，每个字节是0-15，所以数据偏最大是15 * 4 = 60</td></tr><tr><td>保留</td><td>占6位，保留为今后使用，目前应置为０</td></tr><tr><td>CWR（Congestion　Window　Reduced）</td><td></td></tr><tr><td>ECN-Echo</td><td></td></tr><tr><td>URG</td><td>当URG=1，表明紧急指针有效。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据），而不是按原来的排队顺序来传送。发送应用进程告诉发送方的TCP有紧急数据要传送，于是发送方TCP就把紧急数据插入到<code>本报文段数据的最前面</code>，而在紧急数据后面的数据仍是普通数据<br /> 从发送方TCP缓存中 紧急数据包  相当于插队到第一个位置被发送</td></tr><tr><td>ACK</td><td>仅当ACK= 1时确认号字段才有效。当 ACK=0时，确认号无效，<code>TCP规定，在连接建立后所有传送的报文段都必须把ACK置1</code></td></tr><tr><td>PSH Push</td><td>PSH=1时，接收方 TCP收到 pSH =1的报文段，就尽快 将数据包从TCP缓存中给应用程序，而不是继续在TCP缓存中排队给应用程序</td></tr><tr><td>RST　Reset</td><td>当 RST=1，表明 TCP连接出现严重差错（如主机崩溃，浏览器意外关闭），必须释放连接，然后再重新建立运输连接。<br /> RST置1还可以用来拒绝一个非法的报文段或拒绝打开一个连接<br /> RST 也称为 <code>重建位</code> 或 <code>重置位</code></td></tr><tr><td>SYN Synchronization</td><td>在连接建立时用来同步序号<br /><code>当 SYN=1而ACK=0时，表明这是一个连接请求报文段，对方如果同意建立连接则应在响应的报文段中使用SYN＝１和ACK＝１。</code>因此SYN＝１表示这是一个<code>连接请求</code>或<code>连接接收报文</code>，</td></tr><tr><td>FIN</td><td>用来释放一个连接。当 FIN=1时，表明此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</td></tr><tr><td>窗口 Window size value00</td><td>占两个字节，窗口值是[0,2 ^16 -1 ]之间的整数，窗口是接收方 TCP缓存的窗口大小。窗口值是　接收方　告诉发送方：从报文段首部中的确认号算起，接收方目前允许对方发送的数据量（以字节为单位），<code>窗口值作为是接收方 让 发送方 设置 其 发送窗口大小的依据，窗口值经常动态变化</code><br /><code>发送要给报文段，其确认号是 701，窗口字段是1000，这就是告诉发送方，接收方的我接收缓存空间还可以接收1000个字节数据（字节号是701~1700）</code></td></tr><tr><td>检验和 Checksum</td><td>占两个字节，检验和字段检验范围 包括 TCP首部 和 数据两部分。 和 UDP一样，在计算检验和时，要在TCP报文段前面加上 12 字节的伪首部。伪首部结构跟 UDP伪首部一样，把 第四个字段（协议号）中的（UDP协议号）17 改成（TCP协议号）6</td></tr><tr><td>紧急指针Urgent Pointer</td><td>前提是　URG＝１，紧急指针才有意义。紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据被处理完时，TCP就告诉应用程序恢复到正常操作。<code>即使窗口为0也可以发送紧急数据</code><br /> 比如 紧急指针是50， 从数据部分开始计算 数据大小为50字节<img src="https://i.loli.net/2020/02/15/DvlgwFrG2IUYEdz.png" alt="TCP紧急指针.png"></td></tr><tr><td>选项（可变长度）</td><td>1. <code>最大报文段长度</code> （MSS Maximum Segment Size）：每个TCP报文段（数据部分，不包含首部）的最大长度。发送方和接收方协商最大报文段长度<br /> 2. 窗口扩大选项：为了扩大窗口<br /> 3. 时间戳<br /> 4. 选择确认（SACK）</td></tr><tr><td>填充</td><td>选项不够四个字节，填充0，凑够32位</td></tr></tbody></table></div><h3 id="TCP协议如何实现可靠传输"><a href="#TCP协议如何实现可靠传输" class="headerlink" title="TCP协议如何实现可靠传输"></a>TCP协议如何实现可靠传输</h3><h4 id="1-可靠传输的工作原理（原理）"><a href="#1-可靠传输的工作原理（原理）" class="headerlink" title="1. 可靠传输的工作原理（原理）"></a>1. 可靠传输的工作原理（原理）</h4><p>​    只要发送端接收不到确认包，就重发数据包</p><h5 id="1-停止等待协议"><a href="#1-停止等待协议" class="headerlink" title="1. 停止等待协议"></a>1. 停止等待协议</h5><p><img src="https://i.loli.net/2020/02/14/bmgN2ZtsEUJKwIk.png" alt="停止等待协议.png"></p><ol><li><p>无差错情况</p></li><li><p>超时重传</p><p><img src="https://i.loli.net/2020/02/14/kZqdDmcU62IGnJM.png" alt="停止等待协议等待时间过程.png"></p><p><code>等待时间</code>=分组时间（TD） + 往返时间（RTT） + 接收确认包时间（TA）</p></li></ol><p>   当经过 <code>等待时间</code>，没有确认响应，A默认重发数据包</p><p>   在发送完一个分组后，必须暂时保留已发送的分组副本，分组和确认分组都必须进行编号，超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一点</p><ol><li><p>确认丢失：接收端收到数据后发送的确认包丢失</p><p>发送方经过等待时间，重传数据包，接收方丢弃之前的数据包，接收重传数据包</p></li><li><p>确认迟到：接收端收到数据后发送的确认包迟到（超出等待时间）</p><p>发送方经过等待时间，重传数据包，接收方丢弃之间收到的数据包，重传确认包，发送方收到第一次迟到的确认包，不做任何反应</p></li></ol><p><img src="https://i.loli.net/2020/02/14/fkoFGyE6T5Qdci4.png" alt="确认丢失和确认迟到.png">小结</p><p>使用上述的确认和重传机制，就可以在不可靠的传输网络上实现可靠的通信，这种可靠传输协议叫做<code>自动重传请求ARQ(Automatic Repeat Request)</code></p><p>ARQ 重传请求是自动进行的，接收方不需要请求 发送方 重传 某个出错的分组</p><p>停止等待协议</p><ul><li>优点 简单</li><li>缺点 信道利用率低</li></ul><p>信道利用率公式：</p><p><img src="https://i.loli.net/2020/02/14/GELK4Ve7iCokprX.png" alt="信道利用率公式.png"></p><h5 id="2-流水线传输"><a href="#2-流水线传输" class="headerlink" title="2. 流水线传输"></a>2. 流水线传输</h5><p>发送方 <code>连续发送多个分组，不必每次发完一个分组就停下来等待对方确认</code>，由于信道上一直有数据不间断的传送，这种方式获得很高的信道利用率</p><p><img src="https://i.loli.net/2020/02/14/g82L3zXaN6fsFuP.png" alt="流水线传输过程.png"></p><p>连续 ARQ协议</p><p>发送方维持一个发送窗口，从头开始发送窗口里的数据包，窗口里的数据是可以发送不可以删除，当收到确认后对应的数据包才可以从缓存中删除，窗口向前滑动。</p><p><img src="https://i.loli.net/2020/02/14/wr1YUm8gZQMp5aJ.png" alt="流水线传输窗口.png"><br><img src="https://i.loli.net/2020/02/14/3sD9irtFSRkUXlb.png" alt="流水线传输窗口1.png"><br><img src="https://i.loli.net/2020/02/14/q8wmky2c4HNDMxG.png" alt="流水线传输窗口2.png"><br><img src="https://i.loli.net/2020/02/14/bECm2RGWO5kZ4T8.png" alt="流水线传输窗口3.png"></p><p><code>累计确认</code>：表明接收方已经正确接收序号为n的以前且包括n在内的所有分组</p><h4 id="2-TCP的可靠传输-（原理应用）"><a href="#2-TCP的可靠传输-（原理应用）" class="headerlink" title="2. TCP的可靠传输 （原理应用）"></a>2. TCP的可靠传输 （原理应用）</h4><h5 id="1-以字节位为单位的滑动窗口"><a href="#1-以字节位为单位的滑动窗口" class="headerlink" title="1. 以字节位为单位的滑动窗口"></a>1. 以字节位为单位的滑动窗口</h5><p><img src="https://i.loli.net/2020/02/15/giMn5VNmaOJcG7Q.png" alt="窗口发送1.png"></p><p><img src="https://i.loli.net/2020/02/15/MNDqfvCGTW7lXs3.png" alt="窗口发送2.png"></p><p><img src="https://i.loli.net/2020/02/15/57Ci3mGPIzxYkS4.png" alt="窗口发送3.png"></p><p><img src="https://i.loli.net/2020/02/15/rsEBCUN6kqD92JV.png" alt="窗口发送4.png"></p><p><img src="https://i.loli.net/2020/02/15/EDq73NYu5KRWkBJ.png" alt="窗口发送5.png"></p><h5 id="2-超时重传时间的设置"><a href="#2-超时重传时间的设置" class="headerlink" title="2. 超时重传时间的设置"></a>2. 超时重传时间的设置</h5><p>TCP每发送一个报文段，就对这个报文段设置一次<code>计时器</code>。只要计数器设置的重传时间到但还没有收到确认，就要重传这一段报文段</p><h3 id="TCP协议如何实现流量控制"><a href="#TCP协议如何实现流量控制" class="headerlink" title="TCP协议如何实现流量控制"></a>TCP协议如何实现流量控制</h3><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收。</p><h4 id="1-利用滑动窗口实现流量控制"><a href="#1-利用滑动窗口实现流量控制" class="headerlink" title="1. 利用滑动窗口实现流量控制"></a>1. 利用滑动窗口实现流量控制</h4><p>发送方和接收方建立连接</p><p>接收方 设置接收窗口（rwnd）大小，发送方根据接收方的接收窗口设置发送窗口大小。</p><p>在发送过程中，接收方根据自己缓存大小能力给发送方发送 接收窗口大小，发送方根据这个进行动态调整</p><h3 id="TCP协议如何避免网络拥塞"><a href="#TCP协议如何避免网络拥塞" class="headerlink" title="TCP协议如何避免网络拥塞"></a>TCP协议如何避免网络拥塞</h3><h4 id="拥塞控制介绍"><a href="#拥塞控制介绍" class="headerlink" title="拥塞控制介绍"></a>拥塞控制介绍</h4><p>出现资源拥塞的条件： 对资源需求的总和 &gt; 可用资源</p><p><code>拥塞控制</code>：是一个全局性的过程，涉及到所有的主机、所以的路由器，以及与降低网络传输性能有关的所有因素。</p><p><code>流量控制</code>：指在给定的发送端 和 接收端 之间的点对点通信量的控制，它所要做的是抑制发送端发送数据的速率，以便使接收端来得及接收。</p><p><img src="https://i.loli.net/2020/02/17/jkCFIdHlucXnxKe.png" alt="拥塞控制起的作用‘.png"></p><h4 id="拥塞控制处理方法"><a href="#拥塞控制处理方法" class="headerlink" title="拥塞控制处理方法"></a>拥塞控制处理方法</h4><p>TCP 进行拥塞控制的算法有四种：</p><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><code>发送方维持拥塞窗口 cwnd （congestion window）</code></p><p>发送窗口的实际上限值 = Min[rwnd，cwnd]x</p><h5 id="1-慢开始算法的原理"><a href="#1-慢开始算法的原理" class="headerlink" title="1. 慢开始算法的原理"></a>1. 慢开始算法的原理</h5><p><img src="https://i.loli.net/2020/02/17/1uJthsLwRfbmgdX.png" alt="慢开始算法的原理.png"></p><p>发送方控制拥塞窗口的原则是：</p><ul><li>只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。</li><li>只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</li></ul><h5 id="2-拥塞避免算法"><a href="#2-拥塞避免算法" class="headerlink" title="2. 拥塞避免算法"></a>2. 拥塞避免算法</h5><p>拥塞避免算法思路：让拥塞窗口cwnd缓慢增大，即每经过一个往返世纪那就把发送方的拥塞窗口cwnd加1，而不是加倍，使拥塞窗口cwnd按线性规律缓慢增长。</p><p><img src="https://i.loli.net/2020/02/17/j9BicZP172LaHCK.png" alt="慢开始和拥塞避免算法的实现举例.png"></p><p>拥塞避免不是说完全避免了拥塞，而是在拥塞避免阶段把拥塞窗口控制位按现行规律增长，使网络比较不容易出现拥塞。</p><h5 id="3-快重传算法"><a href="#3-快重传算法" class="headerlink" title="3. 快重传算法"></a>3. 快重传算法</h5><h5 id="4-快恢复"><a href="#4-快恢复" class="headerlink" title="4. 快恢复"></a>4. 快恢复</h5><h4 id="TCP-的传输连接管理-（三次握手）"><a href="#TCP-的传输连接管理-（三次握手）" class="headerlink" title="TCP 的传输连接管理 （三次握手）"></a>TCP 的传输连接管理 （三次握手）</h4><h5 id="传输连接有三个阶段："><a href="#传输连接有三个阶段：" class="headerlink" title="传输连接有三个阶段："></a>传输连接有三个阶段：</h5><ul><li>建立连接</li><li>数据传送</li><li>连接释放</li></ul><p>TCP 连接的建立都是才用<code>客户服务器方式</code></p><p>主动发起连接的应用进程叫做<code>客户（client）</code></p><p>被动等待连接建立的应用进程叫做<code>服务器（server）</code></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP连接建立三次握手.png" alt="TCP连接建立三次握手"></p><h6 id="1-建立连接"><a href="#1-建立连接" class="headerlink" title="1. 建立连接"></a>1. 建立连接</h6><p>​    刚开始两端TCP进程都是 <code>closed（关闭）状态</code>。主机A作为客户端主动打开连接，主机B作为服务器被动打开连接。</p><p>​    一开始，主机B的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。然后服务器进程就处于 <code>LISTEN（收听）状态</code>,等待客户的连接请求，如果有客户请求，作出响应。</p><p>​    主机A的TCP客户进程也是首先创建<code>传输控制模块 TCB</code>，然后在打算建立 TCP连接时，向B发出连接请求报文段，这时首部中的同步位 SYN=1，同时选择一个初始号 seq=x。<code>TCP规定，SYN报文段（即SYN=1的报文段）不能携带数据，但要消耗一个序号</code>，同时TCP客户进程进入SYN-SENT（同步已发送）状态。</p><p>​    主机B收到连接请求报文后，如果同意建立连接，则向A发送确认。在确认报文段中应把<code>SYN位</code> 和 <code>ACK位</code> 都 置1，确认号 是 ACK=x + 1,同时也为自己选择一个初始序号 seq = y。此时，TCP服务器进程进入 <code>SYN-RCVD（同步收到）</code>状态。</p><p>​    TCP客户进程收到 B确认后，还要向B给出确认。确认报文段的ACK置1，确认号ACK=y + 1,而自己的序号 seq=x+1。<code>TCP规定，ACK报文段可以携带数据，但如果不携带数据不消耗序号</code>。这种情况下，一个数据报文段的序号依然是seq=x+1。这时，TCP连接已经建立，客户端A已经进入<code>ESTABLESHED（已建立连接）状态</code>。</p><p>​    当服务器 B TCP进程收到确认后，也进入<code>ESTABLESHED（已建立连接）状态</code></p><p>​    </p><p>思考：当客户端A收到服务器B的响应后为什么还要确认？</p><p>​    为了防止已失效的连接请求报文段又传给服务器B</p><h6 id="2-数据传送"><a href="#2-数据传送" class="headerlink" title="2. 数据传送"></a>2. 数据传送</h6><h6 id="3-连接释放"><a href="#3-连接释放" class="headerlink" title="3. 连接释放"></a>3. 连接释放</h6><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP握手建立状态.png" alt="握手建立各个状态"></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP握手释放过程.png" alt=""></p><p>数据传输结束后，，通信的双方都可释放连接。</p><ol><li>A进程先向TCP发出连接释放报文段，并停止发数据，主动关闭TCP连接。A把连接释放报文段首部的终止控制位（FIN）置1，其序号seq=u（等于前面以传送的数据的最后一个字节序号加一）。这时A进入<code>FIN-WAIT（终止等待）状态</code>等待 B 的确认。<code>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</code></li><li>B收到连接释放报文段后发出确认，确认号 ack=u+1，而这个报文段自己的序号是v（等于 B 前面已传送的数据最后一个字节序号加1）。然后 B 进入 CLOSE-WAIT（关闭等待）状态。TCP服务器进程 这时通知高层应用进程，因而从 A 到 B 这个方向的连接就释放了。此时，TCP连接处于半关闭（half-close）状态（<code>即A已经没有数据要发送了，但B如果发送数据，A依然要接收，也就是说从B到A这个方向的连接并没有关闭，并且这种状态维持一段时间</code>）</li><li>A 在收到 B的连接释放报文后，必须对此发出确认。把标记字段中的ACK置1，确认号ack=w+1,而自己的序号是 seq=u+1（<code>TCP 规定 前面发送过的 FIN报文段要消耗一个序号</code>）。然后进入到TIME-WAIT（时间等待）状态。<code>此时TCP连接还没释放掉，必须经过时间等待计时器 （TIME-WAIT timer）设置的时间2MSL后，A才进入CLOSED状态。时间 MSL叫做最长报文段寿命（Maximum Segment Lifetime）</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 计算机网络-传输层小结&lt;br&gt;date: 2020-02-13 13:35:15&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;TCP/UDP协议&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;计算机网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络-应用层小结</title>
    <link href="http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%BA%94%E7%94%A8%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%BA%94%E7%94%A8%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-02-18T18:27:31.000Z</published>
    <updated>2020-05-26T04:38:22.484Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机网络-应用层小结"><a href="#计算机网络-应用层小结" class="headerlink" title="计算机网络 应用层小结"></a>计算机网络 应用层小结</h1><div class="table-container"><table><thead><tr><th>OSI</th><th>DOD</th><th>TCP/IP协议集</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>Telent，FTP，SMTP，DNS，HTTP，RDP，POP3，SMTP等</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP，UCP</td></tr><tr><td>网络层</td><td>网络层</td><td>ARP，IP，RARP，ICMP，IGMP</td></tr><tr><td>数据链路层</td><td>网络接口</td><td>各种通信网络接口（以太网等）物理网络</td></tr><tr><td>物理层</td><td>网络接口</td></tr></tbody></table></div><h2 id="域名系统DNS（Domain-Name-System）"><a href="#域名系统DNS（Domain-Name-System）" class="headerlink" title="域名系统DNS（Domain Name System）"></a>域名系统DNS（Domain Name System）</h2><blockquote><p>​    在用户与互联网的主机通信时，必须要知道对方IP地址。然而用户很难记住二进制的地址。在应用层为了便于用户记住各种网络应用。在互联网中不仅有IP地址，还有域名。域名服务器DNS可以把互联网上的主机名字解析（转换）为 IP地址。域名系统：域名系统其实是名字系统，只不过互联网的命名系统种使用了许多<code>域</code>，所以叫做域名。</p></blockquote><p>DNS域名服务器作用：负责解析域名  将域名解析成IP地址。</p><p>域名：</p><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>根域名</td><td></td></tr><tr><td>顶级域名</td><td>com，edu，net，cn代表服务器性质</td></tr><tr><td>二级域名</td><td>自己定义申请的域名</td></tr></tbody></table></div><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><h3 id="DHCP-动态主机配置"><a href="#DHCP-动态主机配置" class="headerlink" title="DHCP 动态主机配置"></a>DHCP 动态主机配置</h3><ul><li>静态IP地址</li><li>动态IP地址</li></ul><h3 id="DHCP-客户端请求IP地址的过程"><a href="#DHCP-客户端请求IP地址的过程" class="headerlink" title="DHCP 客户端请求IP地址的过程"></a>DHCP 客户端请求IP地址的过程</h3><p>DHCP必须是静态地址</p><h2 id="文件传输协议-FTP（File-Transfer-Protocol）"><a href="#文件传输协议-FTP（File-Transfer-Protocol）" class="headerlink" title="文件传输协议　FTP（File　Transfer Protocol）"></a>文件传输协议　FTP（File　Transfer Protocol）</h2><h3 id="FTP连接方式："><a href="#FTP连接方式：" class="headerlink" title="FTP连接方式："></a>FTP连接方式：</h3><ul><li><p>控制连接：标准端口 21 ，用于发送 FTP 命令信息</p></li><li><p>数据连接：标准端口 20 ，用于上传、下载数据</p></li><li><p>数据连接的建立类型：</p><ul><li><p>主动模式：服务端从 20端口主动向客户端发起连接</p><p>主动模式防火墙需要打开21 和 20 端口</p></li><li><p>被动模式：服务端在指定范围内的<code>某个端口被动</code>等待客户端发起连接</p><p>防火墙只打开20和21端口，被动模式FTP不能下载数据，因为<code>某个端口</code>在防火墙上没有打开</p></li></ul></li></ul><h3 id="FTP传输模式："><a href="#FTP传输模式：" class="headerlink" title="FTP传输模式："></a>FTP传输模式：</h3><ul><li>文本模式：ASCII模式，以文本序列传输数据</li><li>二进制模式：Binary模式，以二进制序列传输数据</li></ul><h2 id="远程终端协议-Telnet"><a href="#远程终端协议-Telnet" class="headerlink" title="远程终端协议 Telnet"></a>远程终端协议 Telnet</h2><p>默认23端口</p><h2 id="远程桌面-RDP（Remote-Desktop-Protocol）"><a href="#远程桌面-RDP（Remote-Desktop-Protocol）" class="headerlink" title="远程桌面 RDP（Remote Desktop Protocol）"></a>远程桌面 RDP（Remote Desktop Protocol）</h2><p>默认监听 TCP:3389</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更改用户密码</span></span><br><span class="line">net user administrator al!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">net user jun al! /add</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将用户添加到远程桌面组 Remote Desktop Users组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Server多用户操作系统 启用远程桌面可以多用户同时使用服务器</span></span><br></pre></td></tr></table></figure><h2 id="超文本传输协议HTTP-（Hyper-Text-Transfer-Protocol）"><a href="#超文本传输协议HTTP-（Hyper-Text-Transfer-Protocol）" class="headerlink" title="超文本传输协议HTTP （Hyper Text Transfer Protocol）"></a>超文本传输协议HTTP （Hyper Text Transfer Protocol）</h2><h3 id="万维网（World-Wide-Web）"><a href="#万维网（World-Wide-Web）" class="headerlink" title="万维网（World Wide Web）"></a>万维网（World Wide Web）</h3><ul><li><p>客户服务器方式</p></li><li><p>客户程序</p></li><li><p>浏览器</p></li><li><p>服务器程序</p></li><li><p>万维网服务器</p></li><li><p>页面</p></li><li><p>统一资源定位符</p><p>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p></li><li><p>HTTP 使用TCP连接</p></li><li><p>超文本标记语言HTML</p></li><li><p>搜索引擎</p></li></ul><h2 id="电子邮件（SMTP，POP3，IMAP）"><a href="#电子邮件（SMTP，POP3，IMAP）" class="headerlink" title="电子邮件（SMTP，POP3，IMAP）"></a>电子邮件（SMTP，POP3，IMAP）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;计算机网络-应用层小结&quot;&gt;&lt;a href=&quot;#计算机网络-应用层小结&quot; class=&quot;headerlink&quot; title=&quot;计算机网络 应用层小结&quot;&gt;&lt;/a&gt;计算机网络 应用层小结&lt;/h1&gt;&lt;div class=&quot;table-contai
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="应用层" scheme="http://www.wangjunjun.club/tags/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我对递归的一些经验</title>
    <link href="http://www.wangjunjun.club/2020/02/01/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
    <id>http://www.wangjunjun.club/2020/02/01/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</id>
    <published>2020-02-01T13:39:31.000Z</published>
    <updated>2020-05-26T04:40:30.988Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="递归" scheme="http://www.wangjunjun.club/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>运输层-概述和运输层服务</title>
    <link href="http://www.wangjunjun.club/2020/01/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82-%E6%A6%82%E8%BF%B0%E5%92%8C%E8%BF%90%E8%BE%93%E5%B1%82%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.wangjunjun.club/2020/01/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82-%E6%A6%82%E8%BF%B0%E5%92%8C%E8%BF%90%E8%BE%93%E5%B1%82%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-01-29T12:29:48.000Z</published>
    <updated>2020-05-26T04:38:26.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运输层-概述和运输层服务"><a href="#运输层-概述和运输层服务" class="headerlink" title="运输层 概述和运输层服务"></a>运输层 概述和运输层服务</h1><p><img src="https://i.loli.net/2020/01/29/KhQzJYsxeNpEUGw.png" alt="计算机网络分层"></p><p>运输层是介于应用层和网络层之间，为运行在不同主机上的应用进程提供直接的通信服务起至关重要作用。</p><p>这里主要讨论 <code>TCP</code> 和<code>UDP</code> 运输层协议。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运输层-概述和运输层服务&quot;&gt;&lt;a href=&quot;#运输层-概述和运输层服务&quot; class=&quot;headerlink&quot; title=&quot;运输层 概述和运输层服务&quot;&gt;&lt;/a&gt;运输层 概述和运输层服务&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP协议" scheme="http://www.wangjunjun.club/tags/TCP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="运输层" scheme="http://www.wangjunjun.club/tags/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-网络层小结</title>
    <link href="http://www.wangjunjun.club/2020/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-01-26T13:12:53.000Z</published>
    <updated>2020-05-26T04:38:18.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层小结"><a href="#网络层小结" class="headerlink" title="网络层小结"></a>网络层小结</h1><h2 id="一、网络层提供的服务"><a href="#一、网络层提供的服务" class="headerlink" title="一、网络层提供的服务"></a>一、网络层提供的服务</h2><p><img src="https://i.loli.net/2020/02/06/MV3FgBenCRmpsar.png" alt="数据包在互联网中的传递.png"></p><p>网络层 负责<code>在不同网络之间尽力转发数据包</code> 基于数据包的IP地址转发 不负责丢失重传 不负责顺序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Would you like to enter the initial configuration dialog? [yes/no]: no</span><br><span class="line">Press RETURN to get started!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入路由器</span></span><br><span class="line"><span class="meta">Router&gt;</span><span class="bash"><span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终端配置</span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">configure terminal</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 具体的哪个端口</span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface FastEthernet0/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 10.0.0.1 255.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">Router&gt;</span><span class="bash"><span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">configure terminal </span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface serial 2/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown </span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">clock rate 64000</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 11.0.0.1 255.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出当前接口</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入一个接口</span></span><br><span class="line"><span class="meta">Router(config)#</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置IP地址子网掩码</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 12.0.0.1 255.255.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接口打开</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看路由表</span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">show ip route</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加静态路由表</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去哪里网段 -&gt; 12.0.0.0 255.255.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去网段中具体的哪个IP -&gt; 11.0.0.2</span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">ip route 12.0.0.0 255.255.0.0 11.0.0.2</span></span><br></pre></td></tr></table></figure><p>路由器到路由器之间需要路由表才知道，之间路由器的下一跳如何走</p><p>网络设备与iOS之间的关系</p><h2 id="二、网络层协议"><a href="#二、网络层协议" class="headerlink" title="二、网络层协议"></a>二、网络层协议</h2><h2 id="三、网络层如何转发数据包-网络设备"><a href="#三、网络层如何转发数据包-网络设备" class="headerlink" title="三、网络层如何转发数据包 网络设备"></a>三、网络层如何转发数据包 网络设备</h2><p>网络设备和OSI参考模型关系     计算机通信的过程　本网段通信跨网段</p><ol><li><p>应用层程序准备要传输的文件</p></li><li><p>传输层 将文件分段 并 编号</p></li><li><p>网络层 添加<code>目标IP地址（IP4）</code>和<code>源IP地址（IP3）</code></p></li><li><p>数据链路层 使用自己的子网掩码 判断自己在哪个网段，使用自己的子网掩码 判断目标地址在哪个网段两种情况</p><ol><li>如果是同一个网段     arp 协议广播解析 目标IP地址的MAC</li><li>如果不是同一个网段 发送端</li></ol><p>添加MAC地址，确定下一跳把数据给谁</p></li><li><p>物理层 把数据变成比特流进行传输</p><p>集线器只是负责将比特流的传递，和网线功能相同</p></li><li><p>数据链路层 交换机将比特流 存储 根据 MAC转发</p></li></ol><p><img src="https://i.loli.net/2020/02/09/vnK1iRLkAadI2OW.png" alt="数据过程.png"></p><h2 id="四、网络层协议"><a href="#四、网络层协议" class="headerlink" title="四、网络层协议"></a>四、网络层协议</h2><p><img src="https://i.loli.net/2020/02/09/RYutJ5xls4DVjMq.png" alt="TCPIP协议层次.png"></p><p>在网络层中 <code>ARP 协议</code> 为 <code>IP协议</code>提供服务,<code>IP协议</code>为<code>ICMP</code>或<code>IGMP</code>提供服务</p><h3 id="1-IP协议-（RIP、OSPF）"><a href="#1-IP协议-（RIP、OSPF）" class="headerlink" title="1. IP协议 （RIP、OSPF）"></a>1. IP协议 （RIP、OSPF）</h3><p>IP协议是个统称，所有能够让路由器学习路由表的协议都是IP协议。分两种<code>静态路由</code>和<code>动态路由</code></p><ul><li><p>静态路由 是 管理员告诉路由器没有直连（不在同一个网段）的网络下一跳给谁（给路由器配置路由表）</p><ul><li><p>优点：配置路由表可以实现负载均衡</p></li><li><p>缺点：适合小规模网络，不能自动调整路由</p></li></ul></li><li><p>动态路由 是 路由器使用IP协议自己学习网络怎么走</p><p>有以下几种协议</p><p>| 协议名称 | 描述                                                         |<br>| ———— | —————————————————————————————— |<br>| RIP协议  | 周期性广播路由表 选择路径的标准（跳数），30秒更新一次，目的是告诉其相邻自己正在运行，最大条数是 15跳 |<br>| OSPF协议 | 根据带宽选择路径                                             |</p></li></ul><p>网络畅通的条件 <code>数据包有去有回</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">Router&gt;</span><span class="bash"><span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">config terminal </span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface fastEthernet 0/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 192.168.0.1 255.255.255.0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置串口</span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface serial 2/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">clock rate ?</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">clock rate 64000</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 172.16.0.1 255.255.255.0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown</span></span><br></pre></td></tr></table></figure><h3 id="2-ARP协议"><a href="#2-ARP协议" class="headerlink" title="2. ARP协议"></a>2. ARP协议</h3><p><code>ARP</code>将IP地址通过广播 目标MAC地址是 形如<code>FF-FF-FF-FF-FF-FF</code> 解析目标IP地址的MAC地址，分两种情况</p><p>前提是ARP协议只能作用在本网段中</p><ol><li>如果目标IP地址在本网段中 获得MAC地址</li><li>如果目标IP地址不在本网段中，将获得网关的MAC地址</li></ol><p>查看本地缓存物理地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><h3 id="3-网际控制报文协议-ICMP"><a href="#3-网际控制报文协议-ICMP" class="headerlink" title="3. 网际控制报文协议 ICMP"></a>3. 网际控制报文协议 ICMP</h3><h4 id="1-ping-基于网络层ICMP协议-来排除网络故障"><a href="#1-ping-基于网络层ICMP协议-来排除网络故障" class="headerlink" title="1. ping 基于网络层ICMP协议 来排除网络故障"></a>1. ping 基于网络层ICMP协议 来排除网络故障</h4><ol><li>ping 命令诊断网络故障</li></ol><p>​    ping（Packet Internet Grope）,因特网包探索器，用于测试网络连接量的程序。ping发送一个ICMP回声请求消息给目的地并报告是否收到希望的ICMP回声应答。</p><p>​    ping 指的是端对端联通，通常用来作为可用性的检查，但是某个病毒强行大量远程执行ping命令抢占网络资源，导致系统变慢，网络变慢。严禁ping入侵作为大多数防火墙的一个基本功能</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 ping 参数</span></span><br><span class="line">ping /?</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一直ping</span></span><br><span class="line">ping IP -t# ping 10.0.0.1 -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定ping 发包大小</span></span><br><span class="line">ping -l 200 IP# ping -l 200 10.0.0.1 ping 10.0.0.1  -l 200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 TTL 值，能够跟踪数据包途径的路由器</span></span><br><span class="line">ping IP -i TTL# ping 8.8.8.8 -i 1</span><br></pre></td></tr></table></figure><p>DOS 下面可以ping 网站可以解析出域名说明 网络层是通的</p><ol><li>pathping (windows 专有 跟踪数据包路径 计算丢包情况)</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\Jun&gt;pathping www.baidu.com</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪</span><br><span class="line">到 www.a.shifen.com [180.101.49.12] 的路由:</span><br><span class="line">  0  DESKTOP-PNGGK3V [192.168.1.4]</span><br><span class="line">  1  CHINATELECOM [192.168.1.1]</span><br><span class="line">  2  100.82.128.1</span><br><span class="line">  3  218.2.122.197</span><br><span class="line">  4  58.213.94.54</span><br><span class="line">  5     *        *        *</span><br><span class="line">正在计算统计信息，已耗时 100 秒...</span><br><span class="line">            指向此处的源   此节点/链接</span><br><span class="line">跃点  RTT    已丢失/已发送 = Pct  已丢失/已发送 = Pct  地址</span><br><span class="line">  0                                           DESKTOP-PNGGK3V [192.168.1.4]</span><br><span class="line">                                7/ 100 =  7%   |</span><br><span class="line">  1  153ms     7/ 100 =  7%     0/ 100 =  0%  CHINATELECOM [192.168.1.1]</span><br><span class="line">                                6/ 100 =  6%   |</span><br><span class="line">  2  143ms    16/ 100 = 16%     3/ 100 =  3%  100.82.128.1</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  3  178ms    13/ 100 = 13%     0/ 100 =  0%  218.2.122.197</span><br><span class="line">                                3/ 100 =  3%   |</span><br><span class="line">  4  169ms    16/ 100 = 16%     0/ 100 =  0%  58.213.94.54</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br></pre></td></tr></table></figure><ol><li>tracert (windows 专有)</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\Jun&gt;tracert www.baidu.com</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪</span><br><span class="line">到 www.a.shifen.com [180.101.49.12] 的路由:</span><br><span class="line"></span><br><span class="line">  1    99 ms   118 ms   119 ms  CHINATELECOM [192.168.1.1]</span><br><span class="line">  2     *        *       77 ms  100.82.128.1</span><br><span class="line">  3   232 ms   110 ms   133 ms  218.2.122.197</span><br><span class="line">  4    55 ms   110 ms   133 ms  58.213.94.54</span><br><span class="line">  5     *        *      254 ms  58.213.94.90</span><br><span class="line">  6    58 ms   106 ms   120 ms  58.213.96.130</span><br><span class="line">  7     *        *        *     请求超时。</span><br><span class="line">  8     *        *        *     请求超时。</span><br><span class="line">  9     *        *        *     请求超时。</span><br><span class="line"> 10    75 ms   105 ms   119 ms  180.101.49.12</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br></pre></td></tr></table></figure><ol><li><p>traceroute IP    路由器上跟踪数据包路径的命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">traceroute 10.0.0.1</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-TTL-Time-to-live-生存周期"><a href="#2-TTL-Time-to-live-生存周期" class="headerlink" title="2. TTL  (Time to live) 生存周期"></a>2. TTL  (Time to live) 生存周期</h4><p>TTL 从 一个数（初始值跟操作系统有关，这个值是可以设置的）开始倒数 没经过一个路由器就减一，当 TTL=0时，数据包被丢弃，防止数据包在网络中循环，占用网路资源</p><p>初始值：</p><ul><li>Linux 64</li><li>Windows 128</li><li>Unix 255</li></ul><h3 id="4-Internet组播管理协议-IGMP"><a href="#4-Internet组播管理协议-IGMP" class="headerlink" title="4. Internet组播管理协议 IGMP"></a>4. Internet组播管理协议 IGMP</h3><p>点到点（联想TCP）</p><p>广播（联想UDP）</p><p>组播=多播（联想看电视可以换频道）</p><h2 id="五、IP数据包格式"><a href="#五、IP数据包格式" class="headerlink" title="五、IP数据包格式"></a>五、IP数据包格式</h2><h3 id="1-IP数据包"><a href="#1-IP数据包" class="headerlink" title="1.IP数据包"></a>1.IP数据包</h3><p><img src="https://i.loli.net/2020/02/11/YKT3bzwxRA8XWJ1.png" alt="IP数据包.png"></p><h4 id="A-IP数据包由首部和数据两部分组成。"><a href="#A-IP数据包由首部和数据两部分组成。" class="headerlink" title="A. IP数据包由首部和数据两部分组成。"></a>A. IP数据包由首部和数据两部分组成。</h4><ul><li>首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的。</li><li>在首部的固定部分的后面是一些可选阻断，其长度是可变的。</li><li>首部是在拿到传输层的数据后在网络层添加的</li></ul><h4 id="B-数据包结构"><a href="#B-数据包结构" class="headerlink" title="B. 数据包结构"></a>B. 数据包结构</h4><ol><li>| 名称                         | 作用                                                         |<br>| —————————————— | :—————————————————————————————- |<br>| 版本                         | 用来表示TCP/IP协议版本　4/6                                  |<br>| 标识                         | 标识是哪个数据包的分片，比如都是 100，                       |<br>| 总长度                       | 整个数据包的总长度                                           |<br>| 标志                         | 标志（flag）占3位，目前只有前两位有意义，<br />标志字段最低位是MF（More Fragment）。MF=1表示后面“还有分片”，MF=0表示是最后一个分片 标志字段中间一位是DF（Don’t Fragment）只有当DF= 0时才允许分片 |<br>| 片偏移                       | ping www.baidu.com -t -l 65500 ,可以ping 发大包，来抓包演示一下片偏移<br />片偏移表示在整个字节中的位置<img src="https://i.loli.net/2020/02/11/wMpZ5qBIQ8zgVRv.png" alt="IP数据报分片举例.png"> |<br>| 生存时间  TTL  Time  to live | TTL 从 一个数（初始值跟操作系统有关，这个值是可以设置的）开始倒数 没经过一个路由器就减一，当 TTL=0时，数据包被丢弃，防止数据包在网络中循环，占用网路资源<br />初始值：<br />          Linux     64<br />          Windows 128<br />          Unix 225 |<br>| 协议号                       | 协议字段指出将数据部分交给哪个进程处理，协议可以是<br />传输层的中（TCP - 6、UDP - 17）<br /> 网络层中 （ICMP - 1、IGMP - 2、OSPF - 89）<br />　TCP－１<img src="https://i.loli.net/2020/02/11/oJfn1eKIX74Fs8h.png" alt="IP中协议号.png"> |<br>| 首部检验和                   | <img src="https://i.loli.net/2020/02/11/OE9BpbvS6aQinx1.png" alt="首部检验和校验过程.png"> |</li></ol><p><img src="https://i.loli.net/2020/02/11/5YdSiePDEUMVJ6m.png" alt="IP首部演示.png"></p><p>网络层 数据包 65535字节（ 2^16 - 1）,数据链路层 数据最大 1500字节  MTU（最大传输单元）,当网络层的数据包大于 1500字节，网络层就会<code>数据包分片</code>,一般情况下不用分片。在接收方的数据链路层将分片重新组装成数据包给网络层。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li>网络设备的机械特性<ul><li>电器特性</li><li>功能特性</li><li>过程特性</li></ul></li><li>数据通信的基础知识<ul><li>数字信号</li><li>模拟信号</li></ul></li><li>频分多路复用</li><li>时分多路复用</li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="　 数据链路层"></a>　 数据链路层</h2><ul><li><p>封装成帧</p></li><li><p>透明封装</p></li><li>无差错接受</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>使用协议</th></tr></thead><tbody><tr><td>点到点线路的数据链路层</td><td>PPP（Point-to-point protocol）</td></tr><tr><td>广播信道的数据链路层</td><td>CSMA /CD</td></tr></tbody></table></div><ul><li>以太网 100M 1000M 10000M</li><li>集线器</li><li>网桥</li><li>交换机</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络层小结&quot;&gt;&lt;a href=&quot;#网络层小结&quot; class=&quot;headerlink&quot; title=&quot;网络层小结&quot;&gt;&lt;/a&gt;网络层小结&lt;/h1&gt;&lt;h2 id=&quot;一、网络层提供的服务&quot;&gt;&lt;a href=&quot;#一、网络层提供的服务&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="IP协议" scheme="http://www.wangjunjun.club/tags/IP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>从 三、四数之和到n数之和的推导</title>
    <link href="http://www.wangjunjun.club/2020/01/17/%E4%BB%8E-%E4%B8%89%E3%80%81%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%E5%88%B0n%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9A%84%E6%8E%A8%E5%AF%BC/"/>
    <id>http://www.wangjunjun.club/2020/01/17/%E4%BB%8E-%E4%B8%89%E3%80%81%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%E5%88%B0n%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9A%84%E6%8E%A8%E5%AF%BC/</id>
    <published>2020-01-17T08:19:30.000Z</published>
    <updated>2020-05-25T14:23:30.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h1><blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。<br>注意：<br>答案中不可以包含重复的四元组。  </p></blockquote><p>下面把题目变一下</p><blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d …m ，使得 a + b + c + d + … + m 的值与 target 相等？找出所有满足条件且不重复的m元组。<br>注意：<br>答案中不可以包含重复的m元组。 </p></blockquote><p>通过 两数之和、三数之和、四数之和 推出 n 数之和</p><p>先说一下两数之和，最容易想的一定是 两层for循环 O(n^2)  优化方法 用 map key匹配的方法 优化成 O(n)</p><p>下面给个这类通用方法；  </p><p>这里 的 排序很重要，如果不排序发现根本没法下手<br>每多一层就加一层 for,最后简化成 三数之和 （for循环 ＋ 双指针）</p><ul><li>步骤</li></ul><ol><li>排序</li><li>for 里嵌套 for一直到 三数之和</li><li>over<br>提示：<br> for 和 递归 可以互相转换，也就是说通过递归，一直到递归出口，但是递归比for更加消耗内存，这个方法不适用n 过大，还在刷题总结中，后面看看有没有更好的方法</li></ol><ul><li>代码<br>三数之和<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 跳过重复答案</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">int</span> l = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[l] + nums[r] == target) &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[l], nums[r]));</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">                        l++;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">                        r--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[l] + nums[r] &lt; target) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">                        l++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[l] + nums[r] &gt; target) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">                        r--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>四数之和  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length - <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> l = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> r = length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[l] + nums[r] == target) &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));</span><br><span class="line">                        l = moveLeft(nums, l, r);</span><br><span class="line">                        r = moveRight(nums, l, r);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[l] + nums[r] &lt; target) &#123;</span><br><span class="line">                        l = moveLeft(nums, l, r);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    r = moveRight(nums, l, r);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; length - <span class="number">2</span> &amp;&amp; nums[j] == nums[j + <span class="number">1</span>]) j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; length - <span class="number">3</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">moveRight</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">    r--;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">moveLeft</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">    l++;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;四数之和&quot;&gt;&lt;a href=&quot;#四数之和&quot; class=&quot;headerlink&quot; title=&quot;四数之和&quot;&gt;&lt;/a&gt;四数之和&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.wangjunjun.club/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://www.wangjunjun.club/tags/leetcode/"/>
    
  </entry>
  
</feed>
