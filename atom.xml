<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jun Smith</title>
  
  <subtitle>Stay hungry,Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wangjunjun.club/"/>
  <updated>2020-03-06T10:59:39.537Z</updated>
  <id>http://www.wangjunjun.club/</id>
  
  <author>
    <name>Jun Smith</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java虚拟机 一</title>
    <link href="http://www.wangjunjun.club/2020/03/05/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%B8%80/"/>
    <id>http://www.wangjunjun.club/2020/03/05/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%B8%80/</id>
    <published>2020-03-05T04:48:24.000Z</published>
    <updated>2020-03-06T10:59:39.537Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><p><a href="https://docs.oracle.com/javase/8/docs/" target="_blank" rel="noopener">认识Java</a></p><h2 id="Java内存区域-与-内存溢出-异常"><a href="#Java内存区域-与-内存溢出-异常" class="headerlink" title="Java内存区域 与 内存溢出 异常"></a>Java内存区域 与 内存溢出 异常</h2><h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><blockquote><p>程序计数器（Program Counter Register）是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</p></blockquote><p>  每个线程都有独立的程序计数器，各个线程之间计数器互不影响，<code>独立存储线程私有内存</code></p><ul><li>线程正在执<code>行一个Java方法</code>，计数器记录的是<code>正在执行的虚拟机字节码指令的地址</code></li><li>如果正在执行一个<code>native方法</code>，这个<code>计数器 为 空（undefined）</code></li></ul><h4 id="Java虚拟栈"><a href="#Java虚拟栈" class="headerlink" title="Java虚拟栈"></a>Java虚拟栈</h4><blockquote><p>Java虚拟栈（Java Virtual Machine Stacks）<code>也是线程私有的，它的生命周期和线程相同</code>。虚拟机栈描述的是Java方法执行的内存模型：<code>每个方法在执行的同时都会创建一个栈帧</code>（Stack Frame）用于存储<code>局部变量表、操作数栈、动态链接、方法出口</code> 等信息。每个方法从<code>调用</code>直到<code>执行完成</code>的过程，就对应<code>一个栈帧在虚拟机栈中入栈到出栈的过程</code>。</p></blockquote><h4 id="本地-方法栈"><a href="#本地-方法栈" class="headerlink" title="本地 方法栈"></a>本地 方法栈</h4><blockquote><p>本地方法栈（native method stack）与<code>Java虚拟机栈</code>所发挥的作用是非常相似的，它们之间的区别是<code>Java虚拟机栈 为虚拟机执行Java方法（字节码）服务，本地方法栈 为虚拟机使用到的native方法 服务。</code></p></blockquote><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><blockquote><p>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。 Java堆是被<code>所有线程共享</code>的一块<code>内存区域</code>，在<code>虚拟机启动时创建</code>。<code>目的：</code>存放对象实例，几乎所有的对象实例都在这里分配内存。</p><blockquote><p>所有的对象实例以及数组都要在堆上分配，但是随着 JIT 编辑器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换 优化技术将会导致一些微妙变化发生，所有对象都分配在堆上也渐渐变得 不是 那么 <code>绝对</code>了</p></blockquote></blockquote><p>Java堆 是<code>垃圾收集器管理</code>的<code>主要区域</code>，很多时候被成为 <code>GC堆（Garbage Collected Heap）</code></p><p>从<code>内存回收</code>的角度看，由于现在收集器基本都采用<code>分代收集算法</code></p><ol><li>新生代</li><li>老年代</li></ol><p>从<code>内存分配</code>的角度来看，线程共享的<code>Java堆</code>中可能划分出<code>多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）</code></p><p>Java堆<code>只要在逻辑上连续即可，不一定要物理上连续</code>。在实现时候，是可以扩展的（通过-Xmx  和 -Xms 控制）。如果在堆上没有内存完成实例分配，而且堆也无法拓展时 就会抛出 OutOfMemoryError异常</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><blockquote><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于<code>存储已被虚拟机加载</code>的<code>类信息、常量、静态变量、即时编译器 编译后的代码</code>数据。别名（非堆 用来区分Java堆区）</p></blockquote><p>JDK1.7 的 HotSpot 字符串常量池 移出 永久代</p><p>Java虚拟机规范 对 方法区的限制非常宽松，在方法区 很少进行垃圾收集，内存回收目标 主要是针对常量池的回收和堆对类型的卸载</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><blockquote><p>常量池（Constant Pool Table）用于存放编译器生成的<code>各种字面量</code>和<code>符号引用</code>，这部分内容将<code>在类加载后</code> 进入方法区运行时常量池里<code>存放</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Java虚拟机&quot;&gt;&lt;a href=&quot;#Java虚拟机&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机&quot;&gt;&lt;/a&gt;Java虚拟机&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/java
      
    
    </summary>
    
    
      <category term="Java虚拟机" scheme="http://www.wangjunjun.club/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java虚拟机" scheme="http://www.wangjunjun.club/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-网络安全</title>
    <link href="http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
    <published>2020-02-19T13:12:53.000Z</published>
    <updated>2020-02-23T02:27:49.416Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机网络-网络安全"><a href="#计算机网络-网络安全" class="headerlink" title="计算机网络 网络安全"></a>计算机网络 网络安全</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1安全包括："><a href="#1-1安全包括：" class="headerlink" title="1.1安全包括："></a>1.1安全包括：</h3><ul><li><p>数据安全</p></li><li><p>应用安全</p></li><li><p>操作系统安全</p></li><li><p>网络安全</p></li><li><p>物理安全</p></li><li><p>用户安全教育</p></li></ul><h3 id="1-2网络安全问题概述"><a href="#1-2网络安全问题概述" class="headerlink" title="1.2网络安全问题概述"></a>1.2网络安全问题概述</h3><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%A2%AB%E5%8A%A8%E6%94%BB%E5%87%BB%E4%B8%8E%E4%B8%BB%E5%8A%A8%E6%94%BB%E5%87%BB.png" alt="被动攻击与主动攻击"></p><p>计算机网络上通信面临一下四种威胁</p><ol><li><p>截获 – 从网络上窃听他人的通信内容。</p><p>MAC地址欺骗</p><p>IP 地址欺骗</p></li><li><p>中断 – 有意中断他人在网络上的通信<br> <code>本质上是ARP 欺骗</code></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>篡改 – 故意篡改网络上传送的报文</p></li><li><p>伪造 – 伪造信息在网络上传送</p></li></ol><p>截获信息的攻击称为<code>被动攻击</code>，而更改信息和拒绝用户使用资源的攻击称为<code>主动攻击</code>。</p><h2 id="二、两类密码体制"><a href="#二、两类密码体制" class="headerlink" title="二、两类密码体制"></a>二、两类密码体制</h2><h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><ul><li><p>对称加密</p><p>优点 效率高</p><p>缺点 密钥不适合在网上传输 密钥维护麻烦</p></li><li><p>非对称密钥</p><p>加密密钥和解密密钥是不同的 密钥对 <code>公钥和私钥</code></p><p>​    公钥加密   -&gt; 私钥解密</p><p>​    私钥加密  -&gt; 公钥解密</p></li></ul><h2 id="三、数字签名"><a href="#三、数字签名" class="headerlink" title="三、数字签名"></a>三、数字签名</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>数字签名：防止抵赖 能够检查签名后内容是否被更改。</p><h3 id="3-2-证书颁发机构作用"><a href="#3-2-证书颁发机构作用" class="headerlink" title="3.2  证书颁发机构作用"></a>3.2 <a href="[https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741?fromtitle=CA&fromid=20721560](https://baike.baidu.com/item/CA证书/10028741?fromtitle=CA&fromid=20721560)"> 证书颁发机构作用</a></h3><p>证书颁发机构作用：</p><ul><li>为企’’业和用户颁发数据证书 确认这些企业和个人的身份</li><li>发布证书吊销列表</li><li>企业和个人信任证书颁发机构</li></ul><h2 id="四、因特网使用的安全协议"><a href="#四、因特网使用的安全协议" class="headerlink" title="四、因特网使用的安全协议"></a>四、因特网使用的安全协议</h2><h3 id="4-1-安全套接字-SSL"><a href="#4-1-安全套接字-SSL" class="headerlink" title="4.1 安全套接字 SSL"></a>4.1 安全套接字 SSL</h3><p>​    在发送发，SSL收到应用层的数据（如HTTP或IMAP报文），对数据进行加密，然后把加密的数据送往TCP套接字。</p><p>​    在接收方，SSL从TCP套接字读取数据，解密后把数据交给应用层。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在发送方发送前 和 在接收方接收前 进行数据安全验证，位于应用层和传输层之间。</span><br><span class="line">用来防止数据泄露。</span><br></pre></td></tr></table></figure><p>HTTPS    TCP + 443</p><h3 id="4-2-网络层安全-IPSec"><a href="#4-2-网络层安全-IPSec" class="headerlink" title="4.2 网络层安全 IPSec"></a>4.2 网络层安全 IPSec</h3><h2 id="五、链路加密与端到端加密"><a href="#五、链路加密与端到端加密" class="headerlink" title="五、链路加密与端到端加密"></a>五、链路加密与端到端加密</h2><h2 id="六、防火墙"><a href="#六、防火墙" class="headerlink" title="六、防火墙"></a>六、防火墙</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;计算机网络-网络安全&quot;&gt;&lt;a href=&quot;#计算机网络-网络安全&quot; class=&quot;headerlink&quot; title=&quot;计算机网络 网络安全&quot;&gt;&lt;/a&gt;计算机网络 网络安全&lt;/h1&gt;&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="网络安全" scheme="http://www.wangjunjun.club/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-传输层小结</title>
    <link href="http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-02-18T18:28:34.686Z</published>
    <updated>2020-02-18T18:28:34.686Z</updated>
    
    <content type="html"><![CDATA[<p>title: 计算机网络-传输层小结<br>date: 2020-02-13 13:35:15<br>tags:</p><ul><li>传输层</li><li>TCP/UDP协议<br>categories:</li><li>计算机网络</li></ul><p>[TOC]</p><h1 id="传输层学习笔记"><a href="#传输层学习笔记" class="headerlink" title="传输层学习笔记"></a>传输层学习笔记</h1><p>主要内容包括：</p><ol><li>传输层的功能</li><li>传输层协议UDP 和 TCP</li><li>网络安全</li><li>TCP可靠传输的实现</li><li>TCP流量控制</li><li>TCP的拥塞控制</li><li>TCP的传输连接管理</li></ol><table><thead><tr><th>OSI</th><th>DOD</th><th>TCP/IP协议集</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>Telent，FTP，SMTP，DNS，HTTP等</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP，UCP</td></tr><tr><td>网络层</td><td>网络层</td><td>IP，ARP，RARP，ICMP</td></tr><tr><td>数据链路层</td><td>网络接口</td><td>各种通信网络接口（以太网等）物理网络</td></tr><tr><td>物理层</td><td>网络接口</td><td></td></tr></tbody></table><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="传输层有个协议-TCP-和UDP"><a href="#传输层有个协议-TCP-和UDP" class="headerlink" title="传输层有个协议 TCP 和UDP"></a>传输层有个协议 <code>TCP</code> 和<code>UDP</code></h3><ul><li><p>TCP （Transmission Control Protocol），传输控制协议</p><p>客户端与服务器之间建立会话，将需要传输的文件分段传输，可靠传输、流量控制</p></li><li><p>UDP（User Data Protocol）,用户数据报协议</p><p>用户报文协议，一个数据包就能够完成数据通信，不分段，不需要建立会话，不需要流量控制，不是可靠传输</p></li></ul><p>一个数据包最大是 65535（2^16）字节</p><p>数据链路层 46-1500 字节</p><h3 id="应用层和传输层协议之间的关系"><a href="#应用层和传输层协议之间的关系" class="headerlink" title="应用层和传输层协议之间的关系"></a>应用层和传输层协议之间的关系</h3><p><img src="https://i.loli.net/2020/02/13/P4bXVAFnZhkouiU.png" alt="应用层和传输层关系.png"></p><p>常见的应用层协议使用的端口</p><table><thead><tr><th>协议名称</th><th>端口</th></tr></thead><tbody><tr><td>Http</td><td>TCP + 80</td></tr><tr><td>Https</td><td>TCP + 443</td></tr><tr><td>RDP</td><td>TCP + 3389</td></tr><tr><td>FTP</td><td>TCP + 21</td></tr><tr><td>共享文件夹</td><td>TCP + 445</td></tr><tr><td>SMTP</td><td>TCP + 25</td></tr><tr><td>POP3</td><td>TCP + 110</td></tr><tr><td>Telnet</td><td>TCP + 23</td></tr><tr><td>DNS</td><td>UDP + 53</td></tr></tbody></table><h3 id="服务与应用层之间的关系"><a href="#服务与应用层之间的关系" class="headerlink" title="服务与应用层之间的关系"></a>服务与应用层之间的关系</h3><ul><li>服务使用TCP或UDP端口侦听客户端请求</li><li>客户端使用IP地址定位服务器 （使用目标端口 定位服务）</li><li>可以在服务器网卡上设置只开放必要端口，实现服务器的网络安全</li></ul><p>如何查看服务侦听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看会话</span></span><br><span class="line">netstat -n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看建立会话的进程</span></span><br><span class="line">netstat -nb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看计算机侦听端口</span></span><br><span class="line">netstat -an</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据状态筛选</span></span><br><span class="line">netstat -n : find "ESTABLISHED"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试到远程计算机某个端口是否打开 telnet 192.168.1.1 3389</span></span><br><span class="line">telnet 192.168.1.1 3389</span><br></pre></td></tr></table></figure><h3 id="传输层功能-和-端口范围"><a href="#传输层功能-和-端口范围" class="headerlink" title="传输层功能 和 端口范围"></a>传输层功能 和 端口范围</h3><p><img src="https://i.loli.net/2020/02/14/zpdTxJjk5Vu174t.png" alt="传输层功能.png"></p><h4 id="传输层功能"><a href="#传输层功能" class="headerlink" title="传输层功能"></a>传输层功能</h4><p>传输层功能：为<code>应用进程之间</code>提供端到端的逻辑通信</p><ul><li>传输层还要对收到的报文进行差错检测</li><li>传输层提供面向连接（TCP）和面向无连接（UDP）的服务</li></ul><h4 id="传输层和应用层之间的主要区别"><a href="#传输层和应用层之间的主要区别" class="headerlink" title="传输层和应用层之间的主要区别"></a>传输层和应用层之间的主要区别</h4><ul><li>网络层 提供主机之间的逻辑通信</li><li>传输层提供进程之间的逻辑通信</li></ul><p><img src="https://i.loli.net/2020/02/14/nrfCAaeLzmVqZW1.png" alt="传输层和网络层的主要区别.png"></p><h4 id="端口-0-65535"><a href="#端口-0-65535" class="headerlink" title="端口 0 ~ 65535"></a>端口 0 ~ 65535</h4><p>端口用一个 16 位端口号进行标志</p><p>端口号只具有本地意义，即端口号只是为了标志本计算机应用层中各个进程。在因特网中不同计算机的相同端口号咯是没有联系的。</p><p>端口分类（三类端口）</p><ol><li>熟知端口 0 ~ 1023</li><li>登记端口 1024 ~ 49151</li><li>客户端口 49152 ~ 65535</li></ol><h2 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h2><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><ol><li>UDP是无连接的，发送数据之前不需要建立连接</li><li>UDP使用尽量最大努力交付，不保证可靠交付，同时也不适用拥塞控制</li><li>UDP是面向报文的。UDP没有拥塞控制，适合多媒体通信的要求</li><li>UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>UDP的首部开销小，只有八个字节</li></ol><h3 id="UDP首部：首部开销小，只有八个字节"><a href="#UDP首部：首部开销小，只有八个字节" class="headerlink" title="UDP首部：首部开销小，只有八个字节"></a>UDP首部：首部开销小，只有八个字节</h3><p><img src="https://i.loli.net/2020/02/14/c9oGH51gdEab8MV.png" alt="UDP协议首部.png"></p><p><img src="https://i.loli.net/2020/02/14/dn1VuitPBqDr63N.png" alt="UDP首部格式.png"></p><table><thead><tr><th>首部字段名称</th><th>描述</th></tr></thead><tbody><tr><td>检验和</td><td><img src="https://i.loli.net/2020/02/14/e2Tlziw8da1mgvF.png" alt="UDP检验和计算.png"></td></tr><tr><td>长度</td><td>UDP首部 + 数据总 长度</td></tr><tr><td>源端口</td><td></td></tr><tr><td>目标端口</td><td></td></tr><tr><td>伪首部（网络层首部的）</td><td>这个是网络层首部信息，不是真的传输层信息，用来计算 <code>检验和</code></td></tr></tbody></table><h2 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a>三、TCP</h2><h3 id="TCP-特点和概述"><a href="#TCP-特点和概述" class="headerlink" title="TCP 特点和概述"></a>TCP 特点和概述</h3><ol><li><p>TCP是面向连接的传输层协议</p><p>传输之前，需要进行三次握手，确认通畅</p></li><li><p>每一条TCP连接只能有两个端点（endpoint）,每一条TCP连接只能是点对点（一对一）</p></li><li><p>TCP提供可靠交付服务</p></li><li><p>TCP提供全双工通信</p></li><li><p>面向字节流 </p></li></ol><h3 id="TCP面向字节流-传输"><a href="#TCP面向字节流-传输" class="headerlink" title="TCP面向字节流 传输"></a>TCP面向字节流 传输</h3><ol><li><p>发送方  和 接收方 建立连接，准备文件</p><p><img src="https://i.loli.net/2020/01/07/zxAUH6cR8nYBhqi.png" alt="tcp1.png"></p></li><li><p>发送方 将数据分块 缓存到 TCP 缓存，每次缓存大小没有规律</p></li></ol><p>   <img src="https://i.loli.net/2020/01/07/e3zGocvkX2lbQJR.png" alt="tcp2.png"></p><ol start="3"><li><p>从缓存中取出数据（这里的取出也是没有规律），添加TCP 头封装成数据包</p><p><img src="https://i.loli.net/2020/01/07/LTxVzPCHrm453IA.png" alt="tcp3.png"></p></li><li><p>接收端 将收到的数据放入 TCP缓存中，同时去掉 TCP 头，<code>按照顺序</code>将发送端分割的数据包组装起来</p><p><img src="https://i.loli.net/2020/01/07/LF3kS7ReVmdUI41.png" alt="tcp4.png"></p></li><li><p>接收端 从 TCP缓存中读取数据（这里的读取大小也是没有规律，每次读几个不定）</p><p><img src="https://i.loli.net/2020/01/07/tKeLzubr8ABQypC.png" alt="tcp5.png"></p><p><img src="https://i.loli.net/2020/01/07/MZ8D6pt9gAWIsRq.png" alt="tcp6.png"></p></li></ol><h3 id="TCP的连接"><a href="#TCP的连接" class="headerlink" title="TCP的连接"></a>TCP的连接</h3><p>TCP把连接作为最基本的抽象，每一条TCP连接有两个端点</p><p>TCP连接的端口不是主机，不是IP地址，不是应用程序，不是传输层的协议端口。</p><p>TCP连接的端点叫做　<code>套接字（socket）</code></p><p>​    套接字：端口号 + IP地址</p><p><img src="https://i.loli.net/2020/02/14/6Q4ZkxWdFGzNDCh.png" alt="套接字.png"></p><h3 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h3><p><img src="https://i.loli.net/2020/02/14/Ii36hva4fMpOj2e.png" alt="TCP首部样例.png"></p><p><img src="https://i.loli.net/2020/02/14/Q2Wji7YFmqXaJhn.png" alt="TCP首部格式.png"></p><table><thead><tr><th>字段名称</th><th>描述</th></tr></thead><tbody><tr><td>源端口 Source Port</td><td></td></tr><tr><td>目的端口 Destination Port</td><td></td></tr><tr><td>序号 Sequence number</td><td>如果是第一个 序号为 1，不是第一个序列号为上个数据包的确认号 + 1</td></tr><tr><td>确认号 Acknowledgment number</td><td>告诉发送者 下一个 该发哪一个数据包</td></tr><tr><td>数据偏移Header Length</td><td>标记TCP段的首位长度，在TCP报文段中第几号开始是TCP数据部分，占四个字节，每个字节是0-15，所以数据偏最大是15 * 4 = 60</td></tr><tr><td>保留</td><td>占6位，保留为今后使用，目前应置为０</td></tr><tr><td>CWR（Congestion　Window　Reduced）</td><td></td></tr><tr><td>ECN-Echo</td><td></td></tr><tr><td>URG</td><td>当URG=1，表明紧急指针有效。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据），而不是按原来的排队顺序来传送。发送应用进程告诉发送方的TCP有紧急数据要传送，于是发送方TCP就把紧急数据插入到<code>本报文段数据的最前面</code>，而在紧急数据后面的数据仍是普通数据<br /> 从发送方TCP缓存中 紧急数据包  相当于插队到第一个位置被发送</td></tr><tr><td>ACK</td><td>仅当ACK= 1时确认号字段才有效。当 ACK=0时，确认号无效，<code>TCP规定，在连接建立后所有传送的报文段都必须把ACK置1</code></td></tr><tr><td>PSH Push</td><td>PSH=1时，接收方 TCP收到 pSH =1的报文段，就尽快 将数据包从TCP缓存中给应用程序，而不是继续在TCP缓存中排队给应用程序</td></tr><tr><td>RST　Reset</td><td>当 RST=1，表明 TCP连接出现严重差错（如主机崩溃，浏览器意外关闭），必须释放连接，然后再重新建立运输连接。<br /> RST置1还可以用来拒绝一个非法的报文段或拒绝打开一个连接<br /> RST 也称为 <code>重建位</code> 或 <code>重置位</code></td></tr><tr><td>SYN Synchronization</td><td>在连接建立时用来同步序号<br /><code>当 SYN=1而ACK=0时，表明这是一个连接请求报文段，对方如果同意建立连接则应在响应的报文段中使用SYN＝１和ACK＝１。</code>因此SYN＝１表示这是一个<code>连接请求</code>或<code>连接接收报文</code>，</td></tr><tr><td>FIN</td><td>用来释放一个连接。当 FIN=1时，表明此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</td></tr><tr><td>窗口 Window size value00</td><td>占两个字节，窗口值是[0,2 ^16 -1 ]之间的整数，窗口是接收方 TCP缓存的窗口大小。窗口值是　接收方　告诉发送方：从报文段首部中的确认号算起，接收方目前允许对方发送的数据量（以字节为单位），<code>窗口值作为是接收方 让 发送方 设置 其 发送窗口大小的依据，窗口值经常动态变化</code><br /><code>发送要给报文段，其确认号是 701，窗口字段是1000，这就是告诉发送方，接收方的我接收缓存空间还可以接收1000个字节数据（字节号是701~1700）</code></td></tr><tr><td>检验和 Checksum</td><td>占两个字节，检验和字段检验范围 包括 TCP首部 和 数据两部分。 和 UDP一样，在计算检验和时，要在TCP报文段前面加上 12 字节的伪首部。伪首部结构跟 UDP伪首部一样，把 第四个字段（协议号）中的（UDP协议号）17 改成（TCP协议号）6</td></tr><tr><td>紧急指针Urgent Pointer</td><td>前提是　URG＝１，紧急指针才有意义。紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据被处理完时，TCP就告诉应用程序恢复到正常操作。<code>即使窗口为0也可以发送紧急数据</code><br /> 比如 紧急指针是50， 从数据部分开始计算 数据大小为50字节<img src="https://i.loli.net/2020/02/15/DvlgwFrG2IUYEdz.png" alt="TCP紧急指针.png"></td></tr><tr><td>选项（可变长度）</td><td>1. <code>最大报文段长度</code> （MSS Maximum Segment Size）：每个TCP报文段（数据部分，不包含首部）的最大长度。发送方和接收方协商最大报文段长度<br /> 2. 窗口扩大选项：为了扩大窗口<br /> 3. 时间戳<br /> 4. 选择确认（SACK）</td></tr><tr><td>填充</td><td>选项不够四个字节，填充0，凑够32位</td></tr></tbody></table><h3 id="TCP协议如何实现可靠传输"><a href="#TCP协议如何实现可靠传输" class="headerlink" title="TCP协议如何实现可靠传输"></a>TCP协议如何实现可靠传输</h3><h4 id="1-可靠传输的工作原理（原理）"><a href="#1-可靠传输的工作原理（原理）" class="headerlink" title="1. 可靠传输的工作原理（原理）"></a>1. 可靠传输的工作原理（原理）</h4><p>​    只要发送端接收不到确认包，就重发数据包</p><h5 id="1-停止等待协议"><a href="#1-停止等待协议" class="headerlink" title="1. 停止等待协议"></a>1. 停止等待协议</h5><p><img src="https://i.loli.net/2020/02/14/bmgN2ZtsEUJKwIk.png" alt="停止等待协议.png"></p><ol><li><p>无差错情况</p></li><li><p>超时重传</p><p><img src="https://i.loli.net/2020/02/14/kZqdDmcU62IGnJM.png" alt="停止等待协议等待时间过程.png"></p><p><code>等待时间</code>=分组时间（TD） + 往返时间（RTT） + 接收确认包时间（TA）</p></li></ol><p>   当经过 <code>等待时间</code>，没有确认响应，A默认重发数据包</p><p>   在发送完一个分组后，必须暂时保留已发送的分组副本，分组和确认分组都必须进行编号，超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一点</p><ol><li><p>确认丢失：接收端收到数据后发送的确认包丢失</p><p>发送方经过等待时间，重传数据包，接收方丢弃之前的数据包，接收重传数据包</p></li><li><p>确认迟到：接收端收到数据后发送的确认包迟到（超出等待时间）</p><p>发送方经过等待时间，重传数据包，接收方丢弃之间收到的数据包，重传确认包，发送方收到第一次迟到的确认包，不做任何反应</p></li></ol><p><img src="https://i.loli.net/2020/02/14/fkoFGyE6T5Qdci4.png" alt="确认丢失和确认迟到.png">小结</p><p>使用上述的确认和重传机制，就可以在不可靠的传输网络上实现可靠的通信，这种可靠传输协议叫做<code>自动重传请求ARQ(Automatic Repeat Request)</code></p><p>ARQ 重传请求是自动进行的，接收方不需要请求 发送方 重传 某个出错的分组</p><p>停止等待协议</p><ul><li>优点 简单</li><li>缺点 信道利用率低</li></ul><p>信道利用率公式：</p><p><img src="https://i.loli.net/2020/02/14/GELK4Ve7iCokprX.png" alt="信道利用率公式.png"></p><h5 id="2-流水线传输"><a href="#2-流水线传输" class="headerlink" title="2. 流水线传输"></a>2. 流水线传输</h5><p>发送方 <code>连续发送多个分组，不必每次发完一个分组就停下来等待对方确认</code>，由于信道上一直有数据不间断的传送，这种方式获得很高的信道利用率</p><p><img src="https://i.loli.net/2020/02/14/g82L3zXaN6fsFuP.png" alt="流水线传输过程.png"></p><p>连续 ARQ协议</p><p>发送方维持一个发送窗口，从头开始发送窗口里的数据包，窗口里的数据是可以发送不可以删除，当收到确认后对应的数据包才可以从缓存中删除，窗口向前滑动。</p><p><img src="https://i.loli.net/2020/02/14/wr1YUm8gZQMp5aJ.png" alt="流水线传输窗口.png"><br><img src="https://i.loli.net/2020/02/14/3sD9irtFSRkUXlb.png" alt="流水线传输窗口1.png"><br><img src="https://i.loli.net/2020/02/14/q8wmky2c4HNDMxG.png" alt="流水线传输窗口2.png"><br><img src="https://i.loli.net/2020/02/14/bECm2RGWO5kZ4T8.png" alt="流水线传输窗口3.png"></p><p><code>累计确认</code>：表明接收方已经正确接收序号为n的以前且包括n在内的所有分组</p><h4 id="2-TCP的可靠传输-（原理应用）"><a href="#2-TCP的可靠传输-（原理应用）" class="headerlink" title="2. TCP的可靠传输 （原理应用）"></a>2. TCP的可靠传输 （原理应用）</h4><h5 id="1-以字节位为单位的滑动窗口"><a href="#1-以字节位为单位的滑动窗口" class="headerlink" title="1. 以字节位为单位的滑动窗口"></a>1. 以字节位为单位的滑动窗口</h5><p><img src="https://i.loli.net/2020/02/15/giMn5VNmaOJcG7Q.png" alt="窗口发送1.png"></p><p><img src="https://i.loli.net/2020/02/15/MNDqfvCGTW7lXs3.png" alt="窗口发送2.png"></p><p><img src="https://i.loli.net/2020/02/15/57Ci3mGPIzxYkS4.png" alt="窗口发送3.png"></p><p><img src="https://i.loli.net/2020/02/15/rsEBCUN6kqD92JV.png" alt="窗口发送4.png"></p><p><img src="https://i.loli.net/2020/02/15/EDq73NYu5KRWkBJ.png" alt="窗口发送5.png"></p><h5 id="2-超时重传时间的设置"><a href="#2-超时重传时间的设置" class="headerlink" title="2. 超时重传时间的设置"></a>2. 超时重传时间的设置</h5><p>TCP每发送一个报文段，就对这个报文段设置一次<code>计时器</code>。只要计数器设置的重传时间到但还没有收到确认，就要重传这一段报文段</p><h3 id="TCP协议如何实现流量控制"><a href="#TCP协议如何实现流量控制" class="headerlink" title="TCP协议如何实现流量控制"></a>TCP协议如何实现流量控制</h3><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收。</p><h4 id="1-利用滑动窗口实现流量控制"><a href="#1-利用滑动窗口实现流量控制" class="headerlink" title="1. 利用滑动窗口实现流量控制"></a>1. 利用滑动窗口实现流量控制</h4><p>发送方和接收方建立连接</p><p>接收方 设置接收窗口（rwnd）大小，发送方根据接收方的接收窗口设置发送窗口大小。</p><p>在发送过程中，接收方根据自己缓存大小能力给发送方发送 接收窗口大小，发送方根据这个进行动态调整</p><h3 id="TCP协议如何避免网络拥塞"><a href="#TCP协议如何避免网络拥塞" class="headerlink" title="TCP协议如何避免网络拥塞"></a>TCP协议如何避免网络拥塞</h3><h4 id="拥塞控制介绍"><a href="#拥塞控制介绍" class="headerlink" title="拥塞控制介绍"></a>拥塞控制介绍</h4><p>出现资源拥塞的条件： 对资源需求的总和 &gt; 可用资源</p><p><code>拥塞控制</code>：是一个全局性的过程，涉及到所有的主机、所以的路由器，以及与降低网络传输性能有关的所有因素。</p><p><code>流量控制</code>：指在给定的发送端 和 接收端 之间的点对点通信量的控制，它所要做的是抑制发送端发送数据的速率，以便使接收端来得及接收。</p><p><img src="https://i.loli.net/2020/02/17/jkCFIdHlucXnxKe.png" alt="拥塞控制起的作用‘.png"></p><h4 id="拥塞控制处理方法"><a href="#拥塞控制处理方法" class="headerlink" title="拥塞控制处理方法"></a>拥塞控制处理方法</h4><p>TCP 进行拥塞控制的算法有四种：</p><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><code>发送方维持拥塞窗口 cwnd （congestion window）</code></p><p>发送窗口的实际上限值 = Min[rwnd，cwnd]x</p><h5 id="1-慢开始算法的原理"><a href="#1-慢开始算法的原理" class="headerlink" title="1. 慢开始算法的原理"></a>1. 慢开始算法的原理</h5><p><img src="https://i.loli.net/2020/02/17/1uJthsLwRfbmgdX.png" alt="慢开始算法的原理.png"></p><p>发送方控制拥塞窗口的原则是：</p><ul><li>只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。</li><li>只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</li></ul><h5 id="2-拥塞避免算法"><a href="#2-拥塞避免算法" class="headerlink" title="2. 拥塞避免算法"></a>2. 拥塞避免算法</h5><p>拥塞避免算法思路：让拥塞窗口cwnd缓慢增大，即每经过一个往返世纪那就把发送方的拥塞窗口cwnd加1，而不是加倍，使拥塞窗口cwnd按线性规律缓慢增长。</p><p><img src="https://i.loli.net/2020/02/17/j9BicZP172LaHCK.png" alt="慢开始和拥塞避免算法的实现举例.png"></p><p>拥塞避免不是说完全避免了拥塞，而是在拥塞避免阶段把拥塞窗口控制位按现行规律增长，使网络比较不容易出现拥塞。</p><h5 id="3-快重传算法"><a href="#3-快重传算法" class="headerlink" title="3. 快重传算法"></a>3. 快重传算法</h5><h5 id="4-快恢复"><a href="#4-快恢复" class="headerlink" title="4. 快恢复"></a>4. 快恢复</h5><h4 id="TCP-的传输连接管理-（三次握手）"><a href="#TCP-的传输连接管理-（三次握手）" class="headerlink" title="TCP 的传输连接管理 （三次握手）"></a>TCP 的传输连接管理 （三次握手）</h4><h5 id="传输连接有三个阶段："><a href="#传输连接有三个阶段：" class="headerlink" title="传输连接有三个阶段："></a>传输连接有三个阶段：</h5><ul><li>建立连接</li><li>数据传送</li><li>连接释放</li></ul><p>TCP 连接的建立都是才用<code>客户服务器方式</code></p><p>主动发起连接的应用进程叫做<code>客户（client）</code></p><p>被动等待连接建立的应用进程叫做<code>服务器（server）</code></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="TCP连接建立三次握手"></p><h6 id="1-建立连接"><a href="#1-建立连接" class="headerlink" title="1. 建立连接"></a>1. 建立连接</h6><p>​    刚开始两端TCP进程都是 <code>closed（关闭）状态</code>。主机A作为客户端主动打开连接，主机B作为服务器被动打开连接。</p><p>​    一开始，主机B的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。然后服务器进程就处于 <code>LISTEN（收听）状态</code>,等待客户的连接请求，如果有客户请求，作出响应。</p><p>​    主机A的TCP客户进程也是首先创建<code>传输控制模块 TCB</code>，然后在打算建立 TCP连接时，向B发出连接请求报文段，这时首部中的同步位 SYN=1，同时选择一个初始号 seq=x。<code>TCP规定，SYN报文段（即SYN=1的报文段）不能携带数据，但要消耗一个序号</code>，同时TCP客户进程进入SYN-SENT（同步已发送）状态。</p><p>​    主机B收到连接请求报文后，如果同意建立连接，则向A发送确认。在确认报文段中应把<code>SYN位</code> 和 <code>ACK位</code> 都 置1，确认号 是 ACK=x + 1,同时也为自己选择一个初始序号 seq = y。此时，TCP服务器进程进入 <code>SYN-RCVD（同步收到）</code>状态。</p><p>​    TCP客户进程收到 B确认后，还要向B给出确认。确认报文段的ACK置1，确认号ACK=y + 1,而自己的序号 seq=x+1。<code>TCP规定，ACK报文段可以携带数据，但如果不携带数据不消耗序号</code>。这种情况下，一个数据报文段的序号依然是seq=x+1。这时，TCP连接已经建立，客户端A已经进入<code>ESTABLESHED（已建立连接）状态</code>。</p><p>​    当服务器 B TCP进程收到确认后，也进入<code>ESTABLESHED（已建立连接）状态</code></p><p>​    </p><p>思考：当客户端A收到服务器B的响应后为什么还要确认？</p><p>​    为了防止已失效的连接请求报文段又传给服务器B</p><h6 id="2-数据传送"><a href="#2-数据传送" class="headerlink" title="2. 数据传送"></a>2. 数据传送</h6><h6 id="3-连接释放"><a href="#3-连接释放" class="headerlink" title="3. 连接释放"></a>3. 连接释放</h6><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E7%8A%B6%E6%80%81.png" alt="握手建立各个状态"></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP%E6%8F%A1%E6%89%8B%E9%87%8A%E6%94%BE%E8%BF%87%E7%A8%8B.png" alt=""></p><p>数据传输结束后，，通信的双方都可释放连接。</p><ol><li>A进程先向TCP发出连接释放报文段，并停止发数据，主动关闭TCP连接。A把连接释放报文段首部的终止控制位（FIN）置1，其序号seq=u（等于前面以传送的数据的最后一个字节序号加一）。这时A进入<code>FIN-WAIT（终止等待）状态</code>等待 B 的确认。<code>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</code></li><li>B收到连接释放报文段后发出确认，确认号 ack=u+1，而这个报文段自己的序号是v（等于 B 前面已传送的数据最后一个字节序号加1）。然后 B 进入 CLOSE-WAIT（关闭等待）状态。TCP服务器进程 这时通知高层应用进程，因而从 A 到 B 这个方向的连接就释放了。此时，TCP连接处于半关闭（half-close）状态（<code>即A已经没有数据要发送了，但B如果发送数据，A依然要接收，也就是说从B到A这个方向的连接并没有关闭，并且这种状态维持一段时间</code>）</li><li>A 在收到 B的连接释放报文后，必须对此发出确认。把标记字段中的ACK置1，确认号ack=w+1,而自己的序号是 seq=u+1（<code>TCP 规定 前面发送过的 FIN报文段要消耗一个序号</code>）。然后进入到TIME-WAIT（时间等待）状态。<code>此时TCP连接还没释放掉，必须经过时间等待计时器 （TIME-WAIT timer）设置的时间2MSL后，A才进入CLOSED状态。时间 MSL叫做最长报文段寿命（Maximum Segment Lifetime）</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 计算机网络-传输层小结&lt;br&gt;date: 2020-02-13 13:35:15&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;TCP/UDP协议&lt;br&gt;categories:&lt;/li&gt;
&lt;li&gt;计算机网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络-应用层小结</title>
    <link href="http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%BA%94%E7%94%A8%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%BA%94%E7%94%A8%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-02-18T18:27:31.000Z</published>
    <updated>2020-02-23T00:52:37.108Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机网络-应用层小结"><a href="#计算机网络-应用层小结" class="headerlink" title="计算机网络 应用层小结"></a>计算机网络 应用层小结</h1><table><thead><tr><th>OSI</th><th>DOD</th><th>TCP/IP协议集</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>Telent，FTP，SMTP，DNS，HTTP，RDP，POP3，SMTP等</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP，UCP</td></tr><tr><td>网络层</td><td>网络层</td><td>ARP，IP，RARP，ICMP，IGMP</td></tr><tr><td>数据链路层</td><td>网络接口</td><td>各种通信网络接口（以太网等）物理网络</td></tr><tr><td>物理层</td><td>网络接口</td><td></td></tr></tbody></table><h2 id="域名系统DNS（Domain-Name-System）"><a href="#域名系统DNS（Domain-Name-System）" class="headerlink" title="域名系统DNS（Domain Name System）"></a>域名系统DNS（Domain Name System）</h2><blockquote><p>​    在用户与互联网的主机通信时，必须要知道对方IP地址。然而用户很难记住二进制的地址。在应用层为了便于用户记住各种网络应用。在互联网中不仅有IP地址，还有域名。域名服务器DNS可以把互联网上的主机名字解析（转换）为 IP地址。域名系统：域名系统其实是名字系统，只不过互联网的命名系统种使用了许多<code>域</code>，所以叫做域名。</p></blockquote><p>DNS域名服务器作用：负责解析域名  将域名解析成IP地址。</p><p>域名：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>根域名</td><td></td></tr><tr><td>顶级域名</td><td>com，edu，net，cn代表服务器性质</td></tr><tr><td>二级域名</td><td>自己定义申请的域名</td></tr></tbody></table><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><h3 id="DHCP-动态主机配置"><a href="#DHCP-动态主机配置" class="headerlink" title="DHCP 动态主机配置"></a>DHCP 动态主机配置</h3><ul><li>静态IP地址</li><li>动态IP地址</li></ul><h3 id="DHCP-客户端请求IP地址的过程"><a href="#DHCP-客户端请求IP地址的过程" class="headerlink" title="DHCP 客户端请求IP地址的过程"></a>DHCP 客户端请求IP地址的过程</h3><p>DHCP必须是静态地址</p><h2 id="文件传输协议-FTP（File-Transfer-Protocol）"><a href="#文件传输协议-FTP（File-Transfer-Protocol）" class="headerlink" title="文件传输协议　FTP（File　Transfer Protocol）"></a>文件传输协议　FTP（File　Transfer Protocol）</h2><h3 id="FTP连接方式："><a href="#FTP连接方式：" class="headerlink" title="FTP连接方式："></a>FTP连接方式：</h3><ul><li><p>控制连接：标准端口 21 ，用于发送 FTP 命令信息</p></li><li><p>数据连接：标准端口 20 ，用于上传、下载数据</p></li><li><p>数据连接的建立类型：</p><ul><li><p>主动模式：服务端从 20端口主动向客户端发起连接</p><p>主动模式防火墙需要打开21 和 20 端口</p></li><li><p>被动模式：服务端在指定范围内的<code>某个端口被动</code>等待客户端发起连接</p><p>防火墙只打开20和21端口，被动模式FTP不能下载数据，因为<code>某个端口</code>在防火墙上没有打开</p></li></ul></li></ul><h3 id="FTP传输模式："><a href="#FTP传输模式：" class="headerlink" title="FTP传输模式："></a>FTP传输模式：</h3><ul><li>文本模式：ASCII模式，以文本序列传输数据</li><li>二进制模式：Binary模式，以二进制序列传输数据</li></ul><h2 id="远程终端协议-Telnet"><a href="#远程终端协议-Telnet" class="headerlink" title="远程终端协议 Telnet"></a>远程终端协议 Telnet</h2><p>默认23端口</p><h2 id="远程桌面-RDP（Remote-Desktop-Protocol）"><a href="#远程桌面-RDP（Remote-Desktop-Protocol）" class="headerlink" title="远程桌面 RDP（Remote Desktop Protocol）"></a>远程桌面 RDP（Remote Desktop Protocol）</h2><p>默认监听 TCP:3389</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更改用户密码</span></span><br><span class="line">net user administrator al!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">net user jun al! /add</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将用户添加到远程桌面组 Remote Desktop Users组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Server多用户操作系统 启用远程桌面可以多用户同时使用服务器</span></span><br></pre></td></tr></table></figure><h2 id="超文本传输协议HTTP-（Hyper-Text-Transfer-Protocol）"><a href="#超文本传输协议HTTP-（Hyper-Text-Transfer-Protocol）" class="headerlink" title="超文本传输协议HTTP （Hyper Text Transfer Protocol）"></a>超文本传输协议HTTP （Hyper Text Transfer Protocol）</h2><h3 id="万维网（World-Wide-Web）"><a href="#万维网（World-Wide-Web）" class="headerlink" title="万维网（World Wide Web）"></a>万维网（World Wide Web）</h3><ul><li><p>客户服务器方式</p></li><li><p>客户程序</p></li><li><p>浏览器</p></li><li><p>服务器程序</p></li><li><p>万维网服务器</p></li><li><p>页面</p></li><li><p>统一资源定位符</p><p>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p></li><li><p>HTTP 使用TCP连接</p></li><li><p>超文本标记语言HTML</p></li><li><p>搜索引擎</p></li></ul><h2 id="电子邮件（SMTP，POP3，IMAP）"><a href="#电子邮件（SMTP，POP3，IMAP）" class="headerlink" title="电子邮件（SMTP，POP3，IMAP）"></a>电子邮件（SMTP，POP3，IMAP）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;计算机网络-应用层小结&quot;&gt;&lt;a href=&quot;#计算机网络-应用层小结&quot; class=&quot;headerlink&quot; title=&quot;计算机网络 应用层小结&quot;&gt;&lt;/a&gt;计算机网络 应用层小结&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="应用层" scheme="http://www.wangjunjun.club/tags/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我对递归的一些经验</title>
    <link href="http://www.wangjunjun.club/2020/02/01/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
    <id>http://www.wangjunjun.club/2020/02/01/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</id>
    <published>2020-02-01T13:39:31.000Z</published>
    <updated>2020-02-01T13:39:31.037Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>运输层-概述和运输层服务</title>
    <link href="http://www.wangjunjun.club/2020/01/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82-%E6%A6%82%E8%BF%B0%E5%92%8C%E8%BF%90%E8%BE%93%E5%B1%82%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.wangjunjun.club/2020/01/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82-%E6%A6%82%E8%BF%B0%E5%92%8C%E8%BF%90%E8%BE%93%E5%B1%82%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-01-29T12:29:48.000Z</published>
    <updated>2020-02-01T13:35:54.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运输层-概述和运输层服务"><a href="#运输层-概述和运输层服务" class="headerlink" title="运输层 概述和运输层服务"></a>运输层 概述和运输层服务</h1><p><img src="https://i.loli.net/2020/01/29/KhQzJYsxeNpEUGw.png" alt="计算机网络分层"></p><p>运输层是介于应用层和网络层之间，为运行在不同主机上的应用进程提供直接的通信服务起至关重要作用。</p><p>这里主要讨论 <code>TCP</code> 和<code>UDP</code> 运输层协议。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运输层-概述和运输层服务&quot;&gt;&lt;a href=&quot;#运输层-概述和运输层服务&quot; class=&quot;headerlink&quot; title=&quot;运输层 概述和运输层服务&quot;&gt;&lt;/a&gt;运输层 概述和运输层服务&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP协议" scheme="http://www.wangjunjun.club/tags/TCP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="运输层" scheme="http://www.wangjunjun.club/tags/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-网络层小结</title>
    <link href="http://www.wangjunjun.club/2020/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.wangjunjun.club/2020/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%8F%E7%BB%93/</id>
    <published>2020-01-26T13:12:53.000Z</published>
    <updated>2020-02-13T05:36:43.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层小结"><a href="#网络层小结" class="headerlink" title="网络层小结"></a>网络层小结</h1><h2 id="一、网络层提供的服务"><a href="#一、网络层提供的服务" class="headerlink" title="一、网络层提供的服务"></a>一、网络层提供的服务</h2><p><img src="https://i.loli.net/2020/02/06/MV3FgBenCRmpsar.png" alt="数据包在互联网中的传递.png"></p><p>网络层 负责<code>在不同网络之间尽力转发数据包</code> 基于数据包的IP地址转发 不负责丢失重传 不负责顺序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Would you like to enter the initial configuration dialog? [yes/no]: no</span><br><span class="line">Press RETURN to get started!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入路由器</span></span><br><span class="line"><span class="meta">Router&gt;</span><span class="bash"><span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终端配置</span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">configure terminal</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 具体的哪个端口</span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface FastEthernet0/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 10.0.0.1 255.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">Router&gt;</span><span class="bash"><span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">configure terminal </span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface serial 2/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown </span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">clock rate 64000</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 11.0.0.1 255.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出当前接口</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入一个接口</span></span><br><span class="line"><span class="meta">Router(config)#</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置IP地址子网掩码</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 12.0.0.1 255.255.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接口打开</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看路由表</span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">show ip route</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加静态路由表</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去哪里网段 -&gt; 12.0.0.0 255.255.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去网段中具体的哪个IP -&gt; 11.0.0.2</span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">ip route 12.0.0.0 255.255.0.0 11.0.0.2</span></span><br></pre></td></tr></table></figure><p>路由器到路由器之间需要路由表才知道，之间路由器的下一跳如何走</p><p>网络设备与iOS之间的关系</p><h2 id="二、网络层协议"><a href="#二、网络层协议" class="headerlink" title="二、网络层协议"></a>二、网络层协议</h2><h2 id="三、网络层如何转发数据包-网络设备"><a href="#三、网络层如何转发数据包-网络设备" class="headerlink" title="三、网络层如何转发数据包 网络设备"></a>三、网络层如何转发数据包 网络设备</h2><p>网络设备和OSI参考模型关系     计算机通信的过程　本网段通信跨网段</p><ol><li><p>应用层程序准备要传输的文件</p></li><li><p>传输层 将文件分段 并 编号</p></li><li><p>网络层 添加<code>目标IP地址（IP4）</code>和<code>源IP地址（IP3）</code></p></li><li><p>数据链路层 使用自己的子网掩码 判断自己在哪个网段，使用自己的子网掩码 判断目标地址在哪个网段两种情况</p><ol><li>如果是同一个网段     arp 协议广播解析 目标IP地址的MAC</li><li>如果不是同一个网段 发送端</li></ol><p>添加MAC地址，确定下一跳把数据给谁</p></li><li><p>物理层 把数据变成比特流进行传输</p><p>集线器只是负责将比特流的传递，和网线功能相同</p></li><li><p>数据链路层 交换机将比特流 存储 根据 MAC转发</p></li></ol><p><img src="https://i.loli.net/2020/02/09/vnK1iRLkAadI2OW.png" alt="数据过程.png"></p><h2 id="四、网络层协议"><a href="#四、网络层协议" class="headerlink" title="四、网络层协议"></a>四、网络层协议</h2><p><img src="https://i.loli.net/2020/02/09/RYutJ5xls4DVjMq.png" alt="TCPIP协议层次.png"></p><p>在网络层中 <code>ARP 协议</code> 为 <code>IP协议</code>提供服务,<code>IP协议</code>为<code>ICMP</code>或<code>IGMP</code>提供服务</p><h3 id="1-IP协议-（RIP、OSPF）"><a href="#1-IP协议-（RIP、OSPF）" class="headerlink" title="1. IP协议 （RIP、OSPF）"></a>1. IP协议 （RIP、OSPF）</h3><p>IP协议是个统称，所有能够让路由器学习路由表的协议都是IP协议。分两种<code>静态路由</code>和<code>动态路由</code></p><ul><li><p>静态路由 是 管理员告诉路由器没有直连（不在同一个网段）的网络下一跳给谁（给路由器配置路由表）</p><ul><li><p>优点：配置路由表可以实现负载均衡</p></li><li><p>缺点：适合小规模网络，不能自动调整路由</p></li></ul></li><li><p>动态路由 是 路由器使用IP协议自己学习网络怎么走</p><p>有以下几种协议</p><table><thead><tr><th>协议名称</th><th>描述</th></tr></thead><tbody><tr><td>RIP协议</td><td>周期性广播路由表 选择路径的标准（跳数），30秒更新一次，目的是告诉其相邻自己正在运行，最大条数是 15跳</td></tr><tr><td>OSPF协议</td><td>根据带宽选择路径</td></tr></tbody></table></li></ul><p>网络畅通的条件 <code>数据包有去有回</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Router&gt;</span><span class="bash"><span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">Router#</span><span class="bash">config terminal </span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface fastEthernet 0/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 192.168.0.1 255.255.255.0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置串口</span></span><br><span class="line"><span class="meta">Router(config)#</span><span class="bash">interface serial 2/0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">clock rate ?</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">clock rate 64000</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">ip address 172.16.0.1 255.255.255.0</span></span><br><span class="line"><span class="meta">Router(config-if)#</span><span class="bash">no shutdown</span></span><br></pre></td></tr></table></figure><h3 id="2-ARP协议"><a href="#2-ARP协议" class="headerlink" title="2. ARP协议"></a>2. ARP协议</h3><p><code>ARP</code>将IP地址通过广播 目标MAC地址是 形如<code>FF-FF-FF-FF-FF-FF</code> 解析目标IP地址的MAC地址，分两种情况</p><p>前提是ARP协议只能作用在本网段中</p><ol><li>如果目标IP地址在本网段中 获得MAC地址</li><li>如果目标IP地址不在本网段中，将获得网关的MAC地址</li></ol><p>查看本地缓存物理地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><h3 id="3-网际控制报文协议-ICMP"><a href="#3-网际控制报文协议-ICMP" class="headerlink" title="3. 网际控制报文协议 ICMP"></a>3. 网际控制报文协议 ICMP</h3><h4 id="1-ping-基于网络层ICMP协议-来排除网络故障"><a href="#1-ping-基于网络层ICMP协议-来排除网络故障" class="headerlink" title="1. ping 基于网络层ICMP协议 来排除网络故障"></a>1. ping 基于网络层ICMP协议 来排除网络故障</h4><ol><li>ping 命令诊断网络故障</li></ol><p>​    ping（Packet Internet Grope）,因特网包探索器，用于测试网络连接量的程序。ping发送一个ICMP回声请求消息给目的地并报告是否收到希望的ICMP回声应答。</p><p>​    ping 指的是端对端联通，通常用来作为可用性的检查，但是某个病毒强行大量远程执行ping命令抢占网络资源，导致系统变慢，网络变慢。严禁ping入侵作为大多数防火墙的一个基本功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 ping 参数</span></span><br><span class="line">ping /?</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一直ping</span></span><br><span class="line">ping IP -t# ping 10.0.0.1 -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定ping 发包大小</span></span><br><span class="line">ping -l 200 IP# ping -l 200 10.0.0.1 ping 10.0.0.1  -l 200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 TTL 值，能够跟踪数据包途径的路由器</span></span><br><span class="line">ping IP -i TTL# ping 8.8.8.8 -i 1</span><br></pre></td></tr></table></figure><p>DOS 下面可以ping 网站可以解析出域名说明 网络层是通的</p><ol start="2"><li>pathping (windows 专有 跟踪数据包路径 计算丢包情况)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jun&gt;pathping www.baidu.com</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪</span><br><span class="line">到 www.a.shifen.com [180.101.49.12] 的路由:</span><br><span class="line">  0  DESKTOP-PNGGK3V [192.168.1.4]</span><br><span class="line">  1  CHINATELECOM [192.168.1.1]</span><br><span class="line">  2  100.82.128.1</span><br><span class="line">  3  218.2.122.197</span><br><span class="line">  4  58.213.94.54</span><br><span class="line">  5     *        *        *</span><br><span class="line">正在计算统计信息，已耗时 100 秒...</span><br><span class="line">            指向此处的源   此节点/链接</span><br><span class="line">跃点  RTT    已丢失/已发送 = Pct  已丢失/已发送 = Pct  地址</span><br><span class="line">  0                                           DESKTOP-PNGGK3V [192.168.1.4]</span><br><span class="line">                                7/ 100 =  7%   |</span><br><span class="line">  1  153ms     7/ 100 =  7%     0/ 100 =  0%  CHINATELECOM [192.168.1.1]</span><br><span class="line">                                6/ 100 =  6%   |</span><br><span class="line">  2  143ms    16/ 100 = 16%     3/ 100 =  3%  100.82.128.1</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  3  178ms    13/ 100 = 13%     0/ 100 =  0%  218.2.122.197</span><br><span class="line">                                3/ 100 =  3%   |</span><br><span class="line">  4  169ms    16/ 100 = 16%     0/ 100 =  0%  58.213.94.54</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br></pre></td></tr></table></figure><ol start="3"><li>tracert (windows 专有)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jun&gt;tracert www.baidu.com</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪</span><br><span class="line">到 www.a.shifen.com [180.101.49.12] 的路由:</span><br><span class="line"></span><br><span class="line">  1    99 ms   118 ms   119 ms  CHINATELECOM [192.168.1.1]</span><br><span class="line">  2     *        *       77 ms  100.82.128.1</span><br><span class="line">  3   232 ms   110 ms   133 ms  218.2.122.197</span><br><span class="line">  4    55 ms   110 ms   133 ms  58.213.94.54</span><br><span class="line">  5     *        *      254 ms  58.213.94.90</span><br><span class="line">  6    58 ms   106 ms   120 ms  58.213.96.130</span><br><span class="line">  7     *        *        *     请求超时。</span><br><span class="line">  8     *        *        *     请求超时。</span><br><span class="line">  9     *        *        *     请求超时。</span><br><span class="line"> 10    75 ms   105 ms   119 ms  180.101.49.12</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br></pre></td></tr></table></figure><ol start="4"><li><p>traceroute IP    路由器上跟踪数据包路径的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute 10.0.0.1</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-TTL-Time-to-live-生存周期"><a href="#2-TTL-Time-to-live-生存周期" class="headerlink" title="2. TTL  (Time to live) 生存周期"></a>2. TTL  (Time to live) 生存周期</h4><p>TTL 从 一个数（初始值跟操作系统有关，这个值是可以设置的）开始倒数 没经过一个路由器就减一，当 TTL=0时，数据包被丢弃，防止数据包在网络中循环，占用网路资源</p><p>初始值：</p><ul><li>Linux 64</li><li>Windows 128</li><li>Unix 255</li></ul><h3 id="4-Internet组播管理协议-IGMP"><a href="#4-Internet组播管理协议-IGMP" class="headerlink" title="4. Internet组播管理协议 IGMP"></a>4. Internet组播管理协议 IGMP</h3><p>点到点（联想TCP）</p><p>广播（联想UDP）</p><p>组播=多播（联想看电视可以换频道）</p><h2 id="五、IP数据包格式"><a href="#五、IP数据包格式" class="headerlink" title="五、IP数据包格式"></a>五、IP数据包格式</h2><h3 id="1-IP数据包"><a href="#1-IP数据包" class="headerlink" title="1.IP数据包"></a>1.IP数据包</h3><p><img src="https://i.loli.net/2020/02/11/YKT3bzwxRA8XWJ1.png" alt="IP数据包.png"></p><h4 id="A-IP数据包由首部和数据两部分组成。"><a href="#A-IP数据包由首部和数据两部分组成。" class="headerlink" title="A. IP数据包由首部和数据两部分组成。"></a>A. IP数据包由首部和数据两部分组成。</h4><ul><li>首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的。</li><li>在首部的固定部分的后面是一些可选阻断，其长度是可变的。</li><li>首部是在拿到传输层的数据后在网络层添加的</li></ul><h4 id="B-数据包结构"><a href="#B-数据包结构" class="headerlink" title="B. 数据包结构"></a>B. 数据包结构</h4><ol><li><table><thead><tr><th>名称</th><th align="left">作用</th></tr></thead><tbody><tr><td>版本</td><td align="left">用来表示TCP/IP协议版本　4/6</td></tr><tr><td>标识</td><td align="left">标识是哪个数据包的分片，比如都是 100，</td></tr><tr><td>总长度</td><td align="left">整个数据包的总长度</td></tr><tr><td>标志</td><td align="left">标志（flag）占3位，目前只有前两位有意义，<br />标志字段最低位是MF（More Fragment）。MF=1表示后面“还有分片”，MF=0表示是最后一个分片 标志字段中间一位是DF（Don’t Fragment）只有当DF= 0时才允许分片</td></tr><tr><td>片偏移</td><td align="left">ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> -t -l 65500 ,可以ping 发大包，来抓包演示一下片偏移<br />片偏移表示在整个字节中的位置<img src="https://i.loli.net/2020/02/11/wMpZ5qBIQ8zgVRv.png" alt="IP数据报分片举例.png"></td></tr><tr><td>生存时间  TTL  Time  to live</td><td align="left">TTL 从 一个数（初始值跟操作系统有关，这个值是可以设置的）开始倒数 没经过一个路由器就减一，当 TTL=0时，数据包被丢弃，防止数据包在网络中循环，占用网路资源<br />初始值：<br />          Linux     64<br />          Windows 128<br />          Unix 225</td></tr><tr><td>协议号</td><td align="left">协议字段指出将数据部分交给哪个进程处理，协议可以是<br />传输层的中（TCP - 6、UDP - 17）<br /> 网络层中 （ICMP - 1、IGMP - 2、OSPF - 89）<br />　TCP－１<img src="https://i.loli.net/2020/02/11/oJfn1eKIX74Fs8h.png" alt="IP中协议号.png"></td></tr><tr><td>首部检验和</td><td align="left"><img src="https://i.loli.net/2020/02/11/OE9BpbvS6aQinx1.png" alt="首部检验和校验过程.png"></td></tr></tbody></table></li></ol><p><img src="https://i.loli.net/2020/02/11/5YdSiePDEUMVJ6m.png" alt="IP首部演示.png"></p><p>网络层 数据包 65535字节（ 2^16 - 1）,数据链路层 数据最大 1500字节  MTU（最大传输单元）,当网络层的数据包大于 1500字节，网络层就会<code>数据包分片</code>,一般情况下不用分片。在接收方的数据链路层将分片重新组装成数据包给网络层。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li>网络设备的机械特性<ul><li>电器特性</li><li>功能特性</li><li>过程特性</li></ul></li><li>数据通信的基础知识<ul><li>数字信号</li><li>模拟信号</li></ul></li><li>频分多路复用</li><li>时分多路复用</li></ul><p>##　 数据链路层</p><ul><li><p>封装成帧</p></li><li><p>透明封装</p></li><li><p>无差错接受</p></li></ul><table><thead><tr><th>名称</th><th>使用协议</th></tr></thead><tbody><tr><td>点到点线路的数据链路层</td><td>PPP（Point-to-point protocol）</td></tr><tr><td>广播信道的数据链路层</td><td>CSMA /CD</td></tr></tbody></table><ul><li>以太网 100M 1000M 10000M</li><li>集线器</li><li>网桥</li><li>交换机</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络层小结&quot;&gt;&lt;a href=&quot;#网络层小结&quot; class=&quot;headerlink&quot; title=&quot;网络层小结&quot;&gt;&lt;/a&gt;网络层小结&lt;/h1&gt;&lt;h2 id=&quot;一、网络层提供的服务&quot;&gt;&lt;a href=&quot;#一、网络层提供的服务&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="IP协议" scheme="http://www.wangjunjun.club/tags/IP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>从 三、四数之和到n数之和的推导</title>
    <link href="http://www.wangjunjun.club/2020/01/17/%E4%BB%8E-%E4%B8%89%E3%80%81%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%E5%88%B0n%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9A%84%E6%8E%A8%E5%AF%BC/"/>
    <id>http://www.wangjunjun.club/2020/01/17/%E4%BB%8E-%E4%B8%89%E3%80%81%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%E5%88%B0n%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9A%84%E6%8E%A8%E5%AF%BC/</id>
    <published>2020-01-17T08:19:30.000Z</published>
    <updated>2020-01-17T09:03:02.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h1><blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。<br>注意：<br>答案中不可以包含重复的四元组。  </p></blockquote><p>下面把题目变一下</p><blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d …m ，使得 a + b + c + d + … + m 的值与 target 相等？找出所有满足条件且不重复的m元组。<br>注意：<br>答案中不可以包含重复的m元组。 </p></blockquote><p>通过 两数之和、三数之和、四数之和 推出 n 数之和</p><p>先说一下两数之和，最容易想的一定是 两层for循环 O(n^2)  优化方法 用 map key匹配的方法 优化成 O(n)</p><p>下面给个这类通用方法；  </p><p>这里 的 排序很重要，如果不排序发现根本没法下手<br>每多一层就加一层 for,最后简化成 三数之和 （for循环 ＋ 双指针）</p><ul><li>步骤</li></ul><ol><li>排序</li><li>for 里嵌套 for一直到 三数之和</li><li>over<br>提示：<br> for 和 递归 可以互相转换，也就是说通过递归，一直到递归出口，但是递归比for更加消耗内存，这个方法不适用n 过大，还在刷题总结中，后面看看有没有更好的方法</li></ol><ul><li>代码<br>三数之和<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 跳过重复答案</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">int</span> l = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[l] + nums[r] == target) &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[l], nums[r]));</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">                        l++;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">                        r--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[l] + nums[r] &lt; target) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">                        l++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[l] + nums[r] &gt; target) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">                        r--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>四数之和  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length - <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> l = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> r = length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[l] + nums[r] == target) &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));</span><br><span class="line">                        l = moveLeft(nums, l, r);</span><br><span class="line">                        r = moveRight(nums, l, r);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[l] + nums[r] &lt; target) &#123;</span><br><span class="line">                        l = moveLeft(nums, l, r);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    r = moveRight(nums, l, r);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; length - <span class="number">2</span> &amp;&amp; nums[j] == nums[j + <span class="number">1</span>]) j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; length - <span class="number">3</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">moveRight</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">    r--;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">moveLeft</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">    l++;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;四数之和&quot;&gt;&lt;a href=&quot;#四数之和&quot; class=&quot;headerlink&quot; title=&quot;四数之和&quot;&gt;&lt;/a&gt;四数之和&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.wangjunjun.club/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://www.wangjunjun.club/tags/leetcode/"/>
    
      <category term="算法" scheme="http://www.wangjunjun.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-TCP协议</title>
    <link href="http://www.wangjunjun.club/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://www.wangjunjun.club/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-01-07T09:30:47.000Z</published>
    <updated>2020-01-07T10:07:01.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传输控制协议-TCP"><a href="#传输控制协议-TCP" class="headerlink" title="传输控制协议 TCP"></a>传输控制协议 TCP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>TCP是面向连接的传输协议</p></li><li><p>每一条TCP连接只能有两个端点（endpoint），每一条TCP连接只能是点对点（一对一）</p><p>TCP连接的端点不是主机，不是主机IP地址，不是应用进程，也不是传输层的协议端口。TCP连接的端点是套接字（socket）（进程的入口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">套接字 socket = （IP地址：端口）</span><br><span class="line">每一条TCP连接唯一地被通信两端的两个端点（套接字）确定</span><br><span class="line">TCP连接 ::= &#123;Socket1,Socket2&#125;=&#123;(IP1:port1),(IP2:port2)&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>TCP提供可靠的交付服务</p></li><li><p>TCP提供全双工通信</p></li><li><p>面向字节流</p></li></ul><p><img src="https://i.loli.net/2020/01/07/zxAUH6cR8nYBhqi.png" alt="tcp1.png">)<img src="https://i.loli.net/2020/01/07/e3zGocvkX2lbQJR.png" alt="tcp2.png"></p><p><img src="https://i.loli.net/2020/01/07/LTxVzPCHrm453IA.png" alt="tcp3.png"></p><p><img src="https://i.loli.net/2020/01/07/LF3kS7ReVmdUI41.png" alt="tcp4.png"></p><p><img src="https://i.loli.net/2020/01/07/tKeLzubr8ABQypC.png" alt="tcp5.png"></p><p><img src="https://i.loli.net/2020/01/07/MZ8D6pt9gAWIsRq.png" alt="tcp6.png"></p><p>##　TCP协议特点</p><ol><li>TCP实现可靠传输（三次握手）</li><li>TCP实现流量控制</li><li>TCP避免网络拥塞</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;传输控制协议-TCP&quot;&gt;&lt;a href=&quot;#传输控制协议-TCP&quot; class=&quot;headerlink&quot; title=&quot;传输控制协议 TCP&quot;&gt;&lt;/a&gt;传输控制协议 TCP&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP协议" scheme="http://www.wangjunjun.club/tags/TCP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 UDP协议</title>
    <link href="http://www.wangjunjun.club/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-UDP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://www.wangjunjun.club/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-UDP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-01-07T08:59:08.000Z</published>
    <updated>2020-01-09T12:57:07.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>UDP是无连接的，也就是发送数据之前不需要建立连接</li><li>UDP尽最大努力交付，但是不保证可靠的交付，同时也不支持拥塞控制</li><li>UDP是面向报文的，没有拥塞控制，适合多媒体通信（想想视频播放）</li><li>UDP支持一对一、一对多、多对一、多对多的交互通信</li><li>UDP的首部开销小，只有 8 个字节</li></ul><p><img src="https://i.loli.net/2020/01/07/kiHqwLajTyMFIO2.png" alt="UDP.png"></p><p>UDP首部结构（数字代表字节）</p><p><img src="https://i.loli.net/2020/01/07/Ex2D1j5gCh9r3WV.png" alt="UDP首部.png"></p><p>在计算检验和时，临时把“伪首部”和UDP用户数据报文连接在一起。伪首部仅仅是为了计算检验和</p><p><img src="https://i.loli.net/2020/01/07/BSOedH1CasJoPcD.png" alt="UDP检验和.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UDP协议&quot;&gt;&lt;a href=&quot;#UDP协议&quot; class=&quot;headerlink&quot; title=&quot;UDP协议&quot;&gt;&lt;/a&gt;UDP协议&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.wangjunjun.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="UDP协议" scheme="http://www.wangjunjun.club/tags/UDP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习</title>
    <link href="http://www.wangjunjun.club/2019/12/27/JVM%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.wangjunjun.club/2019/12/27/JVM%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-27T07:03:01.000Z</published>
    <updated>2019-12-27T10:14:18.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM入门（一）"><a href="#JVM入门（一）" class="headerlink" title="JVM入门（一）"></a>JVM入门（一）</h1><h2 id="JVM-结构"><a href="#JVM-结构" class="headerlink" title="JVM 结构"></a>JVM 结构</h2><ol><li><p>类加载子系统 和 方法区<br> 类加载子系统：负责从文件系统和网络中加载 Class信息，加载的类信息存放在一块 -&gt; 称为方法区<br> 除了类的信息外，方法区还存放运行时常量池信息，包括字符串面量，数字常量（这部分常量信息是Class文件中常量池部分内存映射）</p></li><li><p>Java堆 *<br> Java堆在虚拟机启动时建立，它是Java程序最主要的内存工作区</p></li><li><p>直接内存</p></li><li><p>垃圾回收机制 *</p></li><li><p>Java栈<br> 每个Java虚拟机线程都有一个私有的Java栈，一个线程的Java栈在线程创建的时候被创建，Java栈中保存着帧信息，<br> Java栈中保存着局部变量，方法参数，同时和Java方法的调用、返回密切相关</p></li><li><p>本地方法栈<br> 本地方法栈和Java栈十分类似，不同在 </p><pre><code>Java栈用于方法调用本地方法栈用于本地方法调用</code></pre><p> 作为对Java虚拟机的重要拓展，Java虚拟机允许Java直接调用本地方法（通常是c写的）</p></li><li><p>PC（Program Counter）<br> PC寄存器也是每个线程私有的空间创建（跟Java栈相似），Java虚拟机会给每个Java线程创建PC寄存器。在任意时刻，一个Java线程总是在执行一个方法，<br> 这个正在执行方法是 <code>当前方法</code> 。</p><pre><code>如果当前方法是本地方法，那么PC寄存器的值是 undefined如果是Java方法，PC寄存器就会指向当前正在被执行的指令</code></pre></li><li><p>执行引擎<br> 执行引擎是Java虚拟机最核心组件之一，负责执行虚拟机的字节码，现在虚拟机为了提高执行效率，会使用<code>即时编译（Just In Time JIT）</code>技术将方法编译成机器码后再执行<br><img src="https://i.loli.net/2019/12/27/d9HCTrUg73VPulD.png" alt="基本结构.png"></p><h2 id="JVM堆结构图-和-分代"><a href="#JVM堆结构图-和-分代" class="headerlink" title="JVM堆结构图 和 分代"></a>JVM堆结构图 和 分代</h2><p><img src="https://i.loli.net/2019/12/27/tKQrexXydm6bLl3.png" alt="java堆结构.png"><br> Java虚拟机根据对象存活周期不同，把堆内存分成几块，一般分为<code>新生代，老年代，永久代（对于HotSpot虚拟机而言）</code>，JVM就是按照这个策略划分周期</p></li></ol><p>为什么要分代？<br>    堆内存是虚拟机管理的<code>内存中最大的一块，垃圾回收最频繁的一块</code>，程序中所有对象实例都存放在堆内存中。给<code>堆内存分代是为了提高对象内存分配和垃圾回收效率</code><br>    如果不划分，所有新创建的对象和生命周期很长的对象放在一起，随着程序执行，堆内存需要频繁进行垃圾收集，每次回收都要遍历所有的对象<br>    遍历对象会浪费巨大的时间代价，影响GC效率</p><pre><code>有了分代的情况，新创建的对象会在新生代中分配内存，经过多次回收依然存活的对象放在老年代中，静态属性、类信息方法老年代中。新生代中对象存活时间短，只需要在新生代中频繁进行GC老年代中生命周期长，GC频率低，永久代中一般不进行垃圾回收根据不同年代的特点采用适合的垃圾回收算法，分代收集很大提升了收集效率，这都是内存分代的好处</code></pre><p>内存分代划分<br>    Java虚拟机将堆内存分为<code>新生代、老年代、永久代</code>，永久代是HotSpot VM特有概念<br>    永久代主要存放<code>常量、类信息、静态变量</code>和垃圾回收关系不大</p><h3 id="新生代（Yong-Generation）"><a href="#新生代（Yong-Generation）" class="headerlink" title="新生代（Yong Generation）"></a>新生代（Yong Generation）</h3><pre><code>新生成的对象优先存在新生代中，新生代对象存活率低，在新生代中，回收效率高。一般回收70%~95%新生代划分为三块，Eden空间和两个较小Survivor空间，默认比例为 8:1:1。通过 复制算法 进行虚拟机配置阀值默认是15 进入老年代</code></pre><h3 id="老年代（Old-Generation）"><a href="#老年代（Old-Generation）" class="headerlink" title="老年代（Old Generation）"></a>老年代（Old Generation）</h3><pre><code>在新生代中经历多次（虚拟机配置阀值）GC后仍然存活的对象进入老年代，老年代中的对象生命周期长，存活率高，在老年代中进行GC频率相对低，而且回收速度慢</code></pre><h3 id="永久代（Permanent-Generation）"><a href="#永久代（Permanent-Generation）" class="headerlink" title="永久代（Permanent Generation）"></a>永久代（Permanent Generation）</h3><pre><code>永久代存储类信息、常量、静态常量</code></pre><h2 id="JVM垃圾回收算法-和-收集器"><a href="#JVM垃圾回收算法-和-收集器" class="headerlink" title="JVM垃圾回收算法 和 收集器"></a>JVM垃圾回收算法 和 收集器</h2><h3 id="1-垃圾回收常见算法"><a href="#1-垃圾回收常见算法" class="headerlink" title="1 垃圾回收常见算法"></a>1 垃圾回收常见算法</h3><ul><li><p>引用计数法</p></li><li><p>复制算法（Coping）<br>  算法把内存空间划分成两个相等区域，每次只使用一个区域，垃圾回收时，遍历当前使用区域，把当前使用中的对象复制到另外一个区域中。</p><pre><code>次算法每次只处理正在使用中的对象，因此复制成本小，同时复制过去以后还能进行`相应的内存整理`，不会出现“碎片”问题。此算法`缺点是需要两倍内存空间`</code></pre><p>  新生代中的survivor区<br><img src="https://i.loli.net/2019/12/27/YeRsurXDNHEnCyU.png" alt="复制算法图解"></p></li><li><p>标记-清除（Mark-Sweep）<br>算法执行分两个阶段，  </p><ul><li>第一个阶段：从引用根节点开始标记所有被引用的对象</li><li>第二个阶段：遍历整个堆，把未标记对象清除<br><code>此算法需要暂停整个应用</code>，同时，会<code>产生内存碎片</code><br><img src="https://i.loli.net/2019/12/27/jSO4N6x92ZluDqT.png" alt="标记清除.png"></li></ul></li><li><p>标记-整理（Mark-Compact）<br>算法结合了“标记-清除”和“复制”两个算法优点。分为两个阶段  </p><ul><li>第一个阶段：从根节点开始标记所有被引用对象</li><li>第二个阶段：遍历整的堆，把清除未标记对象并且把对象“压缩”到堆中的其中一块，按顺序排放，<br>这个算法避免了“标记-清除”的碎片问题，也避免了“复制”算法的空间问题<br><img src="https://i.loli.net/2019/12/27/1RnjXCJVL7gNIF4.png" alt="标记整理.png"></li></ul></li></ul><h3 id="2-JVM垃圾收集器"><a href="#2-JVM垃圾收集器" class="headerlink" title="2 JVM垃圾收集器"></a>2 JVM垃圾收集器</h3><p>Scavenge GC（次收集）和Full GC（前收集）</p><ul><li><p>新生代 GC（Scavenge GC）：Scavenge GC指发生在新生代的GC，因为新生代的Java对象大多都是存活时间短，所以Scavenge GC非常频繁，回收速度也比较快。当Eden空间空间不足给对象分配内存时，会触发Scavenge GC。</p><p>​        一般情况下，当新对象生成，并且在Eden 申请空间失败时，就会触发Scavenge GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区，这种GC方式是对年轻代的Eden区进行，不会影响老年代。因为大部分对象都是从Eden区开始，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而一般需要使用速度快、效率高的算法，<br>使Eden去尽快空闲出来</p></li><li><p>老年代GC（Full GC/Major GC）：Full GC指发生在老年代的GC，出现了Full GC，一般会伴随至少一次的Minor GC（老年代的对象大部分是Minor GC过程中从新生代进入老年代），比如分配担保失败。Full GC的速度一般会比Minor GC慢10倍以上。<code>当老年代内存不足或者显示调用System.gc() 方法，会触发Full GC</code></p></li></ul><p>小结：</p><ul><li>Scavenger GC：当年轻代堆内存紧张会触发，相对于全收集来说，收集间隔短</li><li>Full GC：当老年代或永久代堆满了，会触发Full GC可以使用 System.gc() 来显示启动Full GC，Full GC一般根据堆大小的不同，需要的时间不相同，但一般会比较长，超过3-5秒已经算长了</li></ul><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM入门（一）&quot;&gt;&lt;a href=&quot;#JVM入门（一）&quot; class=&quot;headerlink&quot; title=&quot;JVM入门（一）&quot;&gt;&lt;/a&gt;JVM入门（一）&lt;/h1&gt;&lt;h2 id=&quot;JVM-结构&quot;&gt;&lt;a href=&quot;#JVM-结构&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://www.wangjunjun.club/tags/java/"/>
    
      <category term="虚拟机" scheme="http://www.wangjunjun.club/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 整合 Elasticsearch</title>
    <link href="http://www.wangjunjun.club/2019/12/26/elasticsearch-%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wangjunjun.club/2019/12/26/elasticsearch-%E5%85%A5%E9%97%A8/</id>
    <published>2019-12-26T08:46:06.000Z</published>
    <updated>2019-12-27T09:11:37.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">推荐文档</a></p><h2 id="Elasticsearch-简介"><a href="#Elasticsearch-简介" class="headerlink" title="Elasticsearch 简介"></a>Elasticsearch 简介</h2><table><thead><tr><th align="left">Elasticsearch</th><th align="left">MySQL</th></tr></thead><tbody><tr><td align="left">索引</td><td align="left">数据库</td></tr><tr><td align="left">类型</td><td align="left">表</td></tr><tr><td align="left">文档</td><td align="left">记录</td></tr><tr><td align="left">属性</td><td align="left">字段</td></tr></tbody></table><h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><h2 id="Spring-Boot-与-Elasticsearch-整合"><a href="#Spring-Boot-与-Elasticsearch-整合" class="headerlink" title="Spring Boot 与 Elasticsearch 整合"></a>Spring Boot 与 Elasticsearch 整合</h2><p>两种方式</p><ul><li>方式一<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">JestClient jestClient;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void put() throws IOException &#123;</span><br><span class="line">    UserBO userBO = new UserBO();</span><br><span class="line">    userBO.setAccount(&quot;account&quot;);</span><br><span class="line">    userBO.setId(1);</span><br><span class="line">    userBO.setJumpToken(&quot;jumpToken&quot;);</span><br><span class="line">    userBO.setPassword(&quot;password&quot;);</span><br><span class="line">    userBO.setUsername(&quot;username&quot;);</span><br><span class="line">    Index index = new Index.Builder(userBO).index(&quot;blog&quot;).type(&quot;user&quot;).build();</span><br><span class="line">    jestClient.execute(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void get() throws IOException &#123;</span><br><span class="line">    String json = &quot;&#123;&quot; +</span><br><span class="line">            &quot;\&quot;query\&quot;: &#123;&quot; +</span><br><span class="line">            &quot;  \&quot;match\&quot;:&#123;&quot; +</span><br><span class="line">            &quot;          \&quot;name\&quot;: \&quot;username\&quot;&quot; +</span><br><span class="line">            &quot;       &#125; &quot; +</span><br><span class="line">            &quot;   &#125;&quot; +</span><br><span class="line">            &quot;&#125;&quot;;</span><br><span class="line">    Search search = new Search.Builder(json).addIndex(&quot;blog&quot;).addType(&quot;user&quot;).build();</span><br><span class="line">    SearchResult result = jestClient.execute(search);</span><br><span class="line">    System.out.println(&quot;#########################################&quot;);</span><br><span class="line">    System.out.println(result.getJsonString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二<br>maven 坐标  <dependency>      <groupId>org.springframework.boot</groupId>      <artifactId>spring-boot-starter-data-elasticsearch</artifactId>  </dependency> </li></ul><p>配置文件<br>    spring:<br>      data:<br>        elasticsearch:<br>          repositories:<br>            enabled: true<br>          cluster-nodes: 127.0.0.1:9300 # es的连接地址及端口号<br>          cluster-name: docker-cluster # es集群的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"blog"</span>,type = <span class="string">"user"</span>,shards = <span class="number">1</span>,replicas = <span class="number">0</span>,refreshInterval = <span class="string">"-1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        User user = userRepository.findByName(name);</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/put"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">10</span>);</span><br><span class="line">        user.setName(<span class="string">"zhaoliu"</span>);</span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        System.out.println(save);</span><br><span class="line">        <span class="keyword">return</span> save.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elasticsearch&quot;&gt;&lt;a href=&quot;#Elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch&quot;&gt;&lt;/a&gt;Elasticsearch&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.elast
      
    
    </summary>
    
    
    
      <category term="elasticsearch" scheme="http://www.wangjunjun.club/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 装饰者模式</title>
    <link href="http://www.wangjunjun.club/2019/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-12-13T03:34:07.000Z</published>
    <updated>2019-12-15T16:27:49.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-装饰者模式"><a href="#设计模式-装饰者模式" class="headerlink" title="设计模式 -  装饰者模式"></a>设计模式 -  装饰者模式</h1><blockquote><p>构造型模式：这些设计模式关注类和对象的组合。继承的观念被用来组合接口和定义组合对象获得新功能的方式</p><blockquote><p>装饰器模式：允许向一个现有的对象添加新功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的包装</p></blockquote></blockquote><p>我的理解，想用个栗子来说明<br>    一幅画（可以是油画、水墨画等）始终是幅画<br>    用画框裱起来<br>    用瓶子装起来<br>    这里的 画框 瓶子 就是充当的装饰器<br>    这里的画是独立的没有 画框、瓶子还是画<br>    画框、瓶子也可以不装饰画也还是画框、瓶子<br>    但是用装饰器装饰后在画的表现上添加了新的特点</p><p>优点：装饰类和被装饰类可以独立发展，不会相互耦合，这种模式可以替代继承<br>缺点：多层装饰 增加 整体的复杂<br>使用场景：<br>    1. 拓展一个类的功能<br>    2. 动态添加、撤销 功能</p><p>下面是一个关于装饰模式的代码demo</p><p><img src="https://images.gitee.com/uploads/images/2019/1213/113208_9e7f9b61_1673884.png" alt="装饰者模式"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">        RedShapeDecorator redShapeDecorator = <span class="keyword">new</span> RedShapeDecorator(circle);</span><br><span class="line">        circle.draw();</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        redShapeDecorator.draw();</span><br><span class="line">        System.out.println(<span class="string">"#########################################"</span>);</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        RedShapeDecorator redShapeDecorator1 = <span class="keyword">new</span> RedShapeDecorator(rectangle);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">        System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">        redShapeDecorator1.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractShapeDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratorShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(decoratorShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratorShape.draw();</span><br><span class="line">        <span class="comment">// 装饰器的精髓一步</span></span><br><span class="line">        setRedBorder(decoratorShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratorShape)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Shape decoratorShape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractShapeDecorator</span><span class="params">(Shape decoratorShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoratorShape = decoratorShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratorShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Shape - Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Shape - Rectangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-装饰者模式&quot;&gt;&lt;a href=&quot;#设计模式-装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式 -  装饰者模式&quot;&gt;&lt;/a&gt;设计模式 -  装饰者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;构造型模式：这些设计模式关注类和对象的
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰者模式" scheme="http://www.wangjunjun.club/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker 入门</title>
    <link href="http://www.wangjunjun.club/2019/12/05/docker-%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wangjunjun.club/2019/12/05/docker-%E5%85%A5%E9%97%A8/</id>
    <published>2019-12-05T09:59:14.000Z</published>
    <updated>2019-12-15T15:30:50.991Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="目录">TOC</a></p><h1 id="Docker-笔记"><a href="#Docker-笔记" class="headerlink" title="Docker 笔记"></a>Docker 笔记</h1><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><ul><li>是什么：<ul><li>一次封装，多处运行，解决运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</li></ul></li><li>能干嘛：<ul><li>之前的虚拟机技术</li><li>容器虚拟化技术</li><li>开发/运维（DevOps）：开发自运维<ul><li>更快速的应用交付和部署</li><li>更快速的升级 和 扩缩容</li><li>更快速的系统运维</li><li>更高效的计算资源利用</li></ul></li><li>企业级</li></ul></li><li>去哪下<h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2></li><li>Docker基本组成<ul><li>镜像image</li><li>容器 container：用镜像创建的运行实例</li><li>仓库 repository<h2 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it images_name</span></span><br></pre></td></tr></table></figure></li></ul></li><li>运行Ubuntu<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v /myDataVolume:/dataVolumeContainer ubuntu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker start 3af88b62bae9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker attach 3af88b62bae9</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、Docker镜像"><a href="#四、Docker镜像" class="headerlink" title="四、Docker镜像"></a>四、Docker镜像</h2><ul><li>是什么<ul><li>Docker镜像加载原理<ul><li>docker的镜像实际上由一层层的文件系统组成，这种层级的文件系统 UnionFS</li><li>bootfs（boot file system）只要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，<br>在Docker镜像的最底层是bootfs。这一层和Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，<br>此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</li><li>rootfs（root file system）在bootfs之上，包含的就是经典Linux系统中的/dev /proc /bin /etc等标准目录和文件。rootfs就是各种不同<br>的操作系统发行版本，如Ubuntu、CentOS等等<br><img src="./image/UnionFS.png" alt=""></li><li>最大的好处： 共享资源<br>  有多个镜像都是从同一个base镜像构建，那么宿主机只要在磁盘上保存一份base镜像，同时内存中也只要加载一份base镜像，就可以给所有容器服务了。<br>  而且镜像的每一层都可以共享</li></ul></li></ul></li><li>特点<br>  Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”,容器层之下的都是“镜像层”。<h2 id="五、Docker-容器数据卷（Docker容器中的数据持久化（保存下来））"><a href="#五、Docker-容器数据卷（Docker容器中的数据持久化（保存下来））" class="headerlink" title="五、Docker 容器数据卷（Docker容器中的数据持久化（保存下来））"></a>五、Docker 容器数据卷（Docker容器中的数据持久化（保存下来））</h2></li><li>背景：<ul><li>将运用与运行的环境打包成容器运行，运行可以伴随容器，但是我们对数据的要求希望是持久化的</li><li>容器之间希望有可能共享数据<br>Docker容器产生的数据，如果不通过docker commit 生成新的镜像，使得数据做成镜像的一部分保存下来，那么容器删除后数据就没了<br>为了能保存数据在docker中使用 数据卷（类似Redis中的 rdb和aof文件）</li></ul></li><li>能干嘛<pre><code>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于UnionFS，因此能绕过UnionFS提供一些用于持久储存或共享数据的特性，卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷- 特点  1. 数据卷可在容器之间共享或重用数据  2. 卷中的更改可以直接生效  3. 卷中的更改不会包含在镜像的更新中  4. 卷的生命周期一直持续到没有容器使用为止 </code></pre></li><li>数据卷<ul><li>容器添加<ul><li>直接命令添加<ol><li>命令<br> docker run -it -v /myDataVolume:/dataVolumeContainer ubuntu</li><li>查看数据卷是否挂载成功<br> docker inspect 3af88b62bae9 （CONTAINER ID） <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"HostConfig": &#123;</span><br><span class="line">    "Binds": [</span><br><span class="line">        <span class="string">"/myDataVolume:/dataVolumeContainer"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>容器和宿主机之间数据共享</li><li>容器停止退出后，主机修改后数据是否同步<pre><code>$ docker start 3af88b62bae9$ docker attach 3af88b62bae9</code></pre></li><li>命令（带权限）<br> docker run -it -v /myDataVolume:/dataVolumeContainer 镜像名<br> docker run -it -v /宿主机绝对路径目录:/容器内目录:ro      镜像名<pre><code>- ro read-only 只读</code></pre></li></ol></li><li>DockerFile添加<ul><li>根目录下新建 my_docker 文件夹 并 进入</li><li>在 Dockerfile 中使用 VOLUME命令 来给镜像添加一个或多个数据卷  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">  出于可移植和分享的考虑，用 -v 主机目录:容器目录 这种方法 不能直接在Dockerfile中实现</span><br><span class="line">  由于宿主机目录是依赖特定宿主机的，并不能保证在所有宿主机上都存在这样的特定目录</span><br></pre></td></tr></table></figure></li><li>File 构建<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /host1:/dataVolumeContainer1 -v /host2:/dataVolumeContainer2 ubuntu /bin/bash</span><br><span class="line">          </span><br><span class="line"><span class="meta">#</span><span class="bash"> volume <span class="built_in">test</span></span></span><br><span class="line">FROM ubuntu</span><br><span class="line">VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]</span><br><span class="line">CMD echo "finished,--------------success"</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure></li><li>build后生成镜像<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -f ./Dockerfile -t dockder_file/ubuntu .</span></span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  17.92kB</span><br><span class="line">Step 1/4 : FROM ubuntu</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 775349758637</span></span><br><span class="line">Step 2/4 : VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 7c7ad759b784</span></span><br><span class="line">Removing intermediate container 7c7ad759b784</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0af71e73f90a</span></span><br><span class="line">Step 3/4 : CMD echo "finished,--------------success"</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 20b46d5d6917</span></span><br><span class="line">Removing intermediate container 20b46d5d6917</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0ed798ff540c</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 99f343a2a2df</span></span><br><span class="line">Removing intermediate container 99f343a2a2df</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 6199b6ca4626</span></span><br><span class="line">Successfully built 6199b6ca4626</span><br><span class="line">Successfully tagged dockder_file/ubuntu:latest</span><br></pre></td></tr></table></figure></li><li>run 容器 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it dockder_file/ubuntu /bin/bash</span><br></pre></td></tr></table></figure></li><li>主机对应默认地址：/var/lib/docker/volumes/ 下</li></ul></li><li>备注</li></ul></li></ul></li><li>数据卷容器<ul><li>是什么<br>  命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，叫做数据卷容器<br>  说白了，活动硬盘上挂载活动硬盘，实现数据传递</li><li>总体介绍</li><li>容器间传递共享   –volumes-from<ol><li>先启动一个父容器 dc01 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   docker run -it --name dc01 dockder_file/ubuntu</span><br><span class="line">    ```         </span><br><span class="line">2. dc02/dc03 继承 dc01    </span><br><span class="line">    ```shell script</span><br><span class="line">   docker run -it --name dc02 --volumes-from dc01 dockder_file/ubuntu</span><br><span class="line">    ```   </span><br><span class="line">3. 回到dc01 可以看到02/03各自添加的都能共享了</span><br><span class="line">    ```shell script</span><br><span class="line">   docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>删除 dc01，dc02修改后是否可以访问 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>删除dc02 后dc03是否可以访问 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>新建dc04继承dc03 后在删除dc03 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>结论： 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止（即一旦容器创建后，它的信息传递的关系，不再受别的任何容器影响）</li></ol></li></ul></li></ul><h2 id="六、DockerFile解析"><a href="#六、DockerFile解析" class="headerlink" title="六、DockerFile解析"></a>六、DockerFile解析</h2><ul><li>是什么<ul><li>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本</li><li>构建三步骤<ol><li>编写Dockerfile</li><li>docker build</li><li>docker run</li></ol></li><li>文件什么样</li></ul></li><li>Dockerfile创建过程<ul><li>Dockerfile 内容基础知识<ol><li>每条保留指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ol></li><li>Docker 执行 Dockerfile 大致流程<ol><li>docker 从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似docker commit 的操作提交一个新的镜像层</li><li>docker 再基于刚提交的镜像运行一个新的容器</li><li>执行Dockerfile 中的下一条指令直到所有指令都执行完成</li></ol></li><li>小总结<ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程中需要的一切东西<br>。Dockerfile涉及的内容包括执行代码或者文件、环境变量、依赖包、运行环境、动态链接库、操作系统的发行版、服务进程和内核进程<br>（当应用进程需要和服务系统和内核进程打交道，这时要考虑如何设计namespace的权限控制）等等。</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时，会真正开始提供服务</li><li>Docker容器，容器是直接提供服务的<br>从应用软件的角度看，Dockerfile、Docker镜像、Docker容器 分别代表 三个阶段<br> Dockerfile是软件原材料<br> Docker镜像是软件交付品<br> Docker容器是软件运行状态</li></ol></li></ul></li><li>Dockerfile 体系结构（保留字指令）<ul><li>FROM：基础镜像，当前镜像是基于哪个镜像的</li><li>MAINTAINER：镜像维护者的姓名和邮箱地址</li><li>RUN：容器构建时需要运行的命令</li><li>EXPOSE：当前容器对外暴露的端口号</li><li>WORKDIR：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</li><li>ENV：用来在构建镜像过程中设置环境变量<br>  ENV MY_PATH /usr/mytest<br>  这个环境变量可以在后面的任何 RUN 指令中使用，这就是如同在命令前面指定了环境变量前缀一样；也可以在其他指令中直接使用这些环境变量</li><li>ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理 URL 和 解压tar压缩包</li><li>COPY：类似 ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;原路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</li><li>VOLUME：容器数据卷，用于数据保存和持久化工作</li><li>CMD：指定一个容器启动时要运行的命令，Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD被 docker run 之后的参数替换<br>  CMD 容器启动命令<pre><code>CMD 和 RUN 格式类似，也是两种格式    - shell 格式：CMD &lt;命令&gt;    - exec 格式：CMD [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;......]    - 参数列表格式：CMD [&quot;参数1&quot;,&quot;参数2&quot;......]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体参数</code></pre></li><li>ENTRYPOINT：指定一个容器启动时要运行的命令，ENTRYPOINT 的目的和 CMD一样，都是在指定容器启动程序及参数</li><li>ONBUILD：当构建一个被继承的 Dockerfile时运行命令，父镜像在被子继承后父镜像的 onbuild 被触发<br><img src="./image/Dockerfile.png" alt=""></li></ul></li><li>案例<ul><li>Base镜像（scratch）<br>  Docker Hub 中 99% 的镜像都是通过 在 base 镜像中安装 和 配置需要的软件构建出来的</li><li>自定义镜像 myCentOS<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER Jun&lt;wjxajh@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim </span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "success --------------------- ok"</span><br><span class="line">CMD echo /bin/bash</span><br></pre></td></tr></table></figure></li><li>CMD/ENTRYPOINT 镜像案例</li><li>自定义镜像 Tomcat9</li></ul></li><li>小总结<br><img src="./image/%E5%B0%8F%E6%80%BB%E7%BB%93.png" alt=""><h2 id="七、Docker常用安装"><a href="#七、Docker常用安装" class="headerlink" title="七、Docker常用安装"></a>七、Docker常用安装</h2></li><li>总体步骤</li><li>安装 tomcat</li><li>安装 MySQL  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name local_mysql </span><br><span class="line">-v /opt/mysql/conf:/etc/mysql/conf </span><br><span class="line">-v /opt/mysql/logs:/logs </span><br><span class="line">-v /opt/mysql/data:/var/lib/mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root </span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>和 MySQL进行交互<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2a95e24f4184 /bin/bash</span><br></pre></td></tr></table></figure>导出数据库数据到数据卷<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec mysqldump --all-databases -uroot -proot &gt; /logs/all-databases.sql</span><br></pre></td></tr></table></figure></li><li>安装 redis<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis_01</span><br><span class="line">-v /opt/redis/data:/redis/data </span><br><span class="line">-v /opt/redis/conf:/usr/local/etc/redis/redis.conf </span><br><span class="line">-d redis </span><br><span class="line">redis-server </span><br><span class="line">/usr/local/etc/redis/redis.conf </span><br><span class="line">--appendonly yes</span><br><span class="line">```          </span><br><span class="line">```shell script</span><br><span class="line">docker exec -it feed1bbcfc7d redis-cli</span><br></pre></td></tr></table></figure></li><li>安装 nginx <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx_1 </span><br><span class="line">-v /opt/nginx/conf:/etc/nginx/conf.d/ </span><br><span class="line">-v /opt/nginx/logs:/var/log/nginx/ </span><br><span class="line">-v /opt/nginx/cache:/var/cache/nginx/ </span><br><span class="line">-v /opt/nginx/project:/usr/share/nginx/ </span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h2 id="八、本地镜像发布到阿里云-阿里云开发者平台"><a href="#八、本地镜像发布到阿里云-阿里云开发者平台" class="headerlink" title="八、本地镜像发布到阿里云 阿里云开发者平台"></a>八、本地镜像发布到阿里云 <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a></h2></li><li>本地镜像发布到阿里云流程<br>  <img src="./image/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%B5%81%E7%A8%8B.png" alt="">      </li><li>镜像的生成方法<ol><li>Dockerfile</li><li>从容器创建一个新的镜像<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS]  容器ID [REPOSITORY[:TAG]]] </span><br><span class="line"> docker commit -a Jun -m "commit demo" 2a95e24f4184 mysql:1.0</span><br></pre></td></tr></table></figure></li></ol></li><li>将本地镜像推送到阿里云<ol><li>本地镜像素材原型</li><li>阿里云开发者平台<br> <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a></li><li>创建仓库镜像<ul><li>命名空间</li><li>仓库名称</li></ul></li><li>将镜像推送到registry</li><li>公有云可以查询到</li><li>查看详情</li></ol></li><li>将阿里云的镜像下载到本地</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;目录&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker-笔记&quot;&gt;&lt;a href=&quot;#Docker-笔记&quot; class=&quot;headerlink&quot; title=&quot;Docker 笔记&quot;&gt;&lt;/a&gt;Docker 笔记&lt;/h1&gt;&lt;h2 id=&quot;一、Docker
      
    
    </summary>
    
    
      <category term="docker" scheme="http://www.wangjunjun.club/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.wangjunjun.club/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 适配器模式</title>
    <link href="http://www.wangjunjun.club/2019/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-30T02:20:52.000Z</published>
    <updated>2019-11-30T02:40:35.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ol><li>适配器模式 将某个类的接口转换成客户端期望的另外一个接口表示，主要目的</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;适配器模式（Adapter-Pattern）&quot;&gt;&lt;a href=&quot;#适配器模式（Adapter-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;适配器模式（Adapter Pattern）&quot;&gt;&lt;/a&gt;适配器模式（Adapter Patter
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="http://www.wangjunjun.club/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 建造者模式</title>
    <link href="http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-29T08:22:03.000Z</published>
    <updated>2019-11-30T02:40:38.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-建造者模式（Builder-Pattern）"><a href="#设计模式-建造者模式（Builder-Pattern）" class="headerlink" title="设计模式 - 建造者模式（Builder Pattern）"></a>设计模式 - 建造者模式（Builder Pattern）</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><blockquote><p>建造者模式（生成器模式）：是一种对象构建模式。可以将复杂对象的构造过程抽象出来，使这个抽象过程的不同实现方法可以构造出不同属性的对象。</p><p>构建者模式 是一步步创建一个复杂的对象，运行用户只通过指定复杂对象的类型 和内容 就可以构建他们，用户不需要知道内部的具体细节</p></blockquote><p>建造者模式中的四个对象</p><ul><li>Product（产品角色）：一个具体的产品对象</li><li>Builder（抽象建筑者）：实现一个Production 对象的各个部件指定的接口 / 抽象类</li><li>ConcreateBuilder（具体构建者 ）：实现接口，构建和装配各个接口</li><li>Director（指挥者）:构建一个使用Builder接口对象。主要是用于构建个一个复杂对象。有两个作用：<ul><li>隔离客户和对象的成产过程</li><li>负责控制产品对象的生产过程</li></ul></li></ul><h2 id="二、简单的Demo"><a href="#二、简单的Demo" class="headerlink" title="二、简单的Demo"></a>二、简单的Demo</h2><p>下面提供一个样例可以体会一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//建造普通房子</span></span><br><span class="line">        CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">        <span class="comment">// 准备创建房子的指挥者</span></span><br><span class="line">        HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(commonHouse);</span><br><span class="line">        <span class="comment">// 返回盖房子</span></span><br><span class="line">        House house = houseDirector.createHouse();</span><br><span class="line">        System.out.println(house);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> <span class="keyword">extends</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    HouseBuilder houseBuilder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何处理建造房子的流程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">createHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        houseBuilder.buildBasic();</span><br><span class="line">        houseBuilder.buildWalls();</span><br><span class="line">        houseBuilder.roofed();</span><br><span class="line">        <span class="keyword">return</span> houseBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basic;</span><br><span class="line">    <span class="keyword">private</span> Integer wall;</span><br><span class="line">    <span class="keyword">private</span> String roofed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"high house build basic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"high house build wall"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"high house roofed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.house.setBasic(<span class="string">"common house basic"</span>);</span><br><span class="line">        System.out.println(<span class="string">"common house build basic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.house.setWall(<span class="string">"common house"</span>);</span><br><span class="line">        System.out.println(<span class="string">"common house build wall"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"common house roofed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">buildHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><ul><li><p>客户端不必知道产品内部组成的字节，将产品本身和产品的创建过程解耦，使相同的创建过程可以构建不同的产品对象，说白了就是 真正创建对象的时候只需要 告诉 <code>Director</code> 说 <code>我要什么</code> （调方法）具体的过程不用管，交给 <code>ConcreateBuilder</code> </p></li><li><p>每个具体构建者都相对独立，而与其他的具体构建者无关，因此可以很方便地替换具体构建者或者增加新的构造者，只要使用不同的具体构造者就可以得到不同的产品对象</p></li><li><p>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</p></li><li><p>增加新的具体构造者不用修改原有类库的代码，指挥者针对抽象构造者编程，系统扩展方便，符合“开闭原则”。</p></li><li><p>构建者模式 创建 的产品一般具有较多的共同点，他们 的组成部分相似，<code>如果产品之间的差异很大，不适合使用构建者模式</code></p></li><li><p>如果<code>产品的内部变化复杂，可以会导致需要定义很多具体构造者类来实现这种变化，导致系统变得很庞大</code>，因此在这种情况下考虑是否选择构建者模式</p></li><li><p>抽象工厂模式 VS 建造者模式</p><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关系构建过程，只关心什么产品由什么工厂生产。</p><p>构造者模式要求按照指定的蓝图构造产品，它的主要目的是通过组装零配件产品一个新的产品</p><p>抽象工厂类似面包房制作各种面包，构造者模式更新汽车的组装</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-建造者模式（Builder-Pattern）&quot;&gt;&lt;a href=&quot;#设计模式-建造者模式（Builder-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;设计模式 - 建造者模式（Builder Pattern）&quot;&gt;&lt;/a&gt;设计模
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://www.wangjunjun.club/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 原型模式</title>
    <link href="http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-29T07:14:00.000Z</published>
    <updated>2019-11-29T08:22:12.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-原型模式-（Prototype）"><a href="#设计模式-原型模式-（Prototype）" class="headerlink" title="设计模式 -原型模式   （Prototype）"></a>设计模式 -原型模式  <a href="https://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener"> （Prototype）</a></h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ul><li>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</li><li>原型模式是一个创建型设计模式，允许一个对象再创建另外一个可定制的对象，不需要知道创建的细节</li><li>工作原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来进行创建，<code>对象.clone()</code></li></ul><h2 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h2><ol><li><p>浅拷贝</p><p>浅拷贝 只对 基本数据类型其真正的拷贝作用，对于引用类型来说的话，只是简单的对引用类型地址进行了拷贝，即使进行了多次的浅拷贝，多个对象中地引用类型还是指的同一个</p></li><li><p>深拷贝</p><p>深拷贝用来解决浅拷贝问题</p><p>深拷贝实现方式：</p><ul><li><p>方式一：重写 clone 方法进行实现深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.clone()</span><br></pre></td></tr></table></figure></li><li><p>方式二：通过对象序列化进行深拷贝<code>推荐使用</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">            objectOutputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">            objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line"></span><br><span class="line">            SpringDemo springDemo = (SpringDemo) objectInputStream.readObject();</span><br><span class="line">            <span class="keyword">return</span> springDemo;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">                objectOutputStream.close();</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-原型模式-（Prototype）&quot;&gt;&lt;a href=&quot;#设计模式-原型模式-（Prototype）&quot; class=&quot;headerlink&quot; title=&quot;设计模式 -原型模式   （Prototype）&quot;&gt;&lt;/a&gt;设计模式 -原型模式  &lt;a href=
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="http://www.wangjunjun.club/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 工厂模式</title>
    <link href="http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-28T06:12:33.000Z</published>
    <updated>2019-11-29T07:14:26.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-工厂模式"><a href="#设计模式-工厂模式" class="headerlink" title="设计模式 - 工厂模式"></a>设计模式 - 工厂模式</h1><h2 id="一、简单（静态）工厂"><a href="#一、简单（静态）工厂" class="headerlink" title="一、简单（静态）工厂"></a>一、简单（静态）工厂</h2><h3 id="A、抛出场景"><a href="#A、抛出场景" class="headerlink" title="A、抛出场景"></a>A、抛出场景</h3><blockquote><p>一个外卖项目：要便于各种菜品的拓展，便于维护</p><p>菜品种类很多（黄焖鸡、大盘鸡等）</p><p>菜品制作有 prepare，make，package步骤</p><p>完成菜品的订购</p></blockquote><h3 id="B、基本介绍"><a href="#B、基本介绍" class="headerlink" title="B、基本介绍"></a>B、基本介绍</h3><ul><li>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式中最简单的使用模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Category.FORMAT));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone var0, Locale var1)</span> </span>&#123;</span><br><span class="line">        CalendarProvider var2 = LocaleProviderAdapter.getAdapter(CalendarProvider<span class="class">.<span class="keyword">class</span>, <span class="title">var1</span>).<span class="title">getCalendarProvider</span>()</span>;</span><br><span class="line">        <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> var2.getInstance(var0, var1);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var7) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object var3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (var1.hasExtensions()) &#123;</span><br><span class="line">            String var4 = var1.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">            <span class="keyword">if</span> (var4 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span> var6 = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">1581060683</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var4.equals(<span class="string">"buddhist"</span>)) &#123;</span><br><span class="line">                        var6 = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">752730191</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var4.equals(<span class="string">"japanese"</span>)) &#123;</span><br><span class="line">                        var6 = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">283776265</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var4.equals(<span class="string">"gregory"</span>)) &#123;</span><br><span class="line">                        var6 = <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span>(var6) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    var3 = <span class="keyword">new</span> BuddhistCalendar(var0, var1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    var3 = <span class="keyword">new</span> JapaneseImperialCalendar(var0, var1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    var3 = <span class="keyword">new</span> GregorianCalendar(var0, var1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var1.getLanguage() == <span class="string">"th"</span> &amp;&amp; var1.getCountry() == <span class="string">"TH"</span>) &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> BuddhistCalendar(var0, var1);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.getVariant() == <span class="string">"JP"</span> &amp;&amp; var1.getLanguage() == <span class="string">"ja"</span> &amp;&amp; var1.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> JapaneseImperialCalendar(var0, var1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> GregorianCalendar(var0, var1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Calendar)var3;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h2><h3 id="A、模式介绍"><a href="#A、模式介绍" class="headerlink" title="A、模式介绍"></a>A、模式介绍</h3><p>定义创建方法的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化 在子类上。<code>工厂方法模式是对简单（静态）工厂进一步的抽象提取</code></p><h2 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h2><p>###　A.基本介绍</p><p>抽象工厂模式：定义了一个 interface 用于创建相关 或有依赖关系的对象簇，不用指明具体类</p><p>抽象工厂模式可以将简单工厂模式 和 工厂方法模式进行整合</p><p>从设计层面看，抽象工厂模式是对简单工厂模式的改进（进一步抽象）</p><p>将工厂抽象成两层，AbsFactory（抽象工厂）和 具体实现的工厂子类。根据创建对象类型使用对应的工厂子类。将单个的简单工厂类变成了工厂簇，更利于代码的维护和拓展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% abstractFactory.png slug %&#125;</span><br></pre></td></tr></table></figure><h2 id="四、工厂模式总结"><a href="#四、工厂模式总结" class="headerlink" title="四、工厂模式总结"></a>四、工厂模式总结</h2><ol><li>意义<ol><li>将实例化代码提取出来，放到一个类中统一管理和维护，达到和项目的依赖关系解耦，提高项目的拓展和维护性。</li></ol></li><li>三种工厂模式</li><li>依赖抽象原则<ol><li>不要让类继承具体类，而是继承<code>抽象类</code>或者<code>实现 interface（接口）</code></li><li>不覆盖基类中已经实现的方法</li></ol></li></ol><p>简单工厂是 建个工厂 不抽象的去创建 对象</p><p>工厂方法模式对 工厂进行抽象了一层，然后实现类去 担任 简单工厂里的工厂角色</p><p>抽象工厂模式是对 工厂方法模式 ，然后采用简单工厂模式的思想，<code>对从一个总的抽象工厂中，细分每个抽象工厂</code>(简单工厂模式思想)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-工厂模式&quot;&gt;&lt;a href=&quot;#设计模式-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式 - 工厂模式&quot;&gt;&lt;/a&gt;设计模式 - 工厂模式&lt;/h1&gt;&lt;h2 id=&quot;一、简单（静态）工厂&quot;&gt;&lt;a href=&quot;#一、简单（静态）工厂&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://www.wangjunjun.club/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - UML类图</title>
    <link href="http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/"/>
    <id>http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/</id>
    <published>2019-11-28T01:43:19.000Z</published>
    <updated>2019-12-17T02:57:56.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><blockquote><p>UML–Unified modeling language（统一建模语言），是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果。</p></blockquote><p>UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛华、依赖、组合、聚合等。</p><p>用例图<br>类图<br>时序图<br>协作图<br>配置图</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UML-类图&quot;&gt;&lt;a href=&quot;#UML-类图&quot; class=&quot;headerlink&quot; title=&quot;UML 类图&quot;&gt;&lt;/a&gt;UML 类图&lt;/h1&gt;&lt;h2 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML 类图" scheme="http://www.wangjunjun.club/tags/UML-%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 闲谈设计模式</title>
    <link href="http://www.wangjunjun.club/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%B2%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://www.wangjunjun.club/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%B2%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</id>
    <published>2019-11-26T07:37:26.000Z</published>
    <updated>2019-11-27T10:05:21.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闲谈设计模式-七大原则"><a href="#闲谈设计模式-七大原则" class="headerlink" title="闲谈设计模式 - 七大原则"></a>闲谈设计模式 - 七大原则</h1><blockquote><p><strong>懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要.</strong></p></blockquote><h2 id="一、设计模式的目的"><a href="#一、设计模式的目的" class="headerlink" title="一、设计模式的目的"></a>一、设计模式的目的</h2><p>编写软件的过程，面临 == 耦合性、内聚性、维护性、可扩展性、重用性、灵活性== 等各方面的挑战。</p><p>设计模式就是为了解决这些问题</p><ul><li>代码重用性：相同功能代码，不写多次</li><li>可读性：编程规范性，利于阅读和理解</li><li>可扩展性：增加新的功能非常方便</li><li>可靠性：当增加新的功能后对原来功能没有影响</li></ul><h2 id="二、设计模式七大原则"><a href="#二、设计模式七大原则" class="headerlink" title="二、设计模式七大原则"></a>二、设计模式七大原则</h2><p>编程时遵循的原则，各种设计模式的基础</p><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h3><ul><li><p>基本介绍</p><p>对类来说，一个类只负责一项职责，如果 A 负责两个不同职责：职责1，职责2.</p><p>当职责1 需求变更的时候改变 A，可能会造成 职责2 执行错误，职责2 同理。</p><p>所以需要将 类A 的粒度分解成 A1 , A2</p></li><li><p>注意事项和细节</p><ul><li>降低类的复杂度，一个类只负责一项职责</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li></ul></li></ul><h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2.接口隔离原则"></a>2.接口隔离原则</h3><ul><li><p>基本介绍</p><p>客户端不应该依赖它不需要的接口，也就是说 一个类的依赖应该建立在最小的接口上</p></li><li><p>处理方法</p><p>将一个接口拆分成几个独立的接口，当类需要的时候多实现就可以</p></li></ul><h3 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3.依赖倒转原则（Dependence Inversion Principle）"></a>3.依赖倒转原则（Dependence Inversion Principle）</h3><ul><li>基本介绍<ul><li>高层模块不应该依赖底层模块，二者都应该是依赖抽象</li><li>==抽象不应该依赖细节，细节应该依赖抽象==</li><li>依赖倒转（倒置）的中心思想是==面向接口编程==</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多边形，抽象的东西要稳定的多。以抽象为基础搭建的架构比细节为基础的架构稳定的多。在Java中，抽象指的是接口或抽象类，细节是具体的实现类</li><li>使用接口或抽象类的目的是 指定好规范，而不涉及任何具体的操作，把展现细节的任务交给实现类</li><li>注意事项和细节</li><li>低层模块尽量都有抽象类和接口，或者两者都有程序稳定性更好。</li><li>变量的声明类型尽量是抽象类或者接口，这样在变量的引用和 实际对象间存在缓冲层，利于程序拓展和优化</li><li>继承时遵循里氏替换原则</li></ul></li></ul><h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4.里氏替换原则"></a>4.里氏替换原则</h3><ul><li><p>前言思考</p><ul><li>继承包含这层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏</li><li>继承在给程序设计带来便利的同时，也带来了弊端，比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则这个需要修改时，必须考虑到所有子类，并且父类修改后，所有涉及的子类的功能都有可能产生故障</li></ul><p>那么问题来了，如何正确使用继承？</p><p>答案：里氏替换原则</p><ul><li><p>基本介绍</p><ol><li><p>如果对每个类型 为 T1 的对象 o1，都有类型为 T2 的对象 o2,使得以 T1定义的所有程序 P 在所有的对象o1都代替成 o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。也就是，==所有引用父类的地方必须能透明地使用其子类对象==</p></li><li><p>在使用继承时 ，遵循里氏替换原则，在子类中尽量不要重写父类的方法</p></li><li><p>继承实际上让两个类耦合性增强了，在适当情况下，可以通过聚合、组合、依赖 来解决问题</p></li></ol></li></ul></li><li><p>解决方法</p><blockquote><p>类B 继承 类A  并重写父类方法，造成原有功能错误</p><p>实际编程中，常常会重写父类的方法完成新功能，这样写起来虽然简单，但是整个继承体系的复用性比较差，特别是运行多态比较频繁的时候</p></blockquote><p>解决方法</p><p>原来的父类和子类都继承一个更通俗（抽象）的基类，原有的继承关系去掉，采用依赖、聚合、组合等关系代替</p></li></ul><h3 id="5-开闭原则"><a href="#5-开闭原则" class="headerlink" title="5.开闭原则"></a>5.开闭原则</h3><ul><li><p>基本介绍</p><ol><li><p>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</p></li><li><p>一个软件实体 如 类、模块、函数 应该对外开放，对修改关闭。用抽象构建框架，用实现扩展细节</p></li><li><p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化</p></li><li><p>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则</p></li></ol></li></ul><h3 id="6-迪米特法则（降低类之间的耦合度）"><a href="#6-迪米特法则（降低类之间的耦合度）" class="headerlink" title="6.迪米特法则（降低类之间的耦合度）"></a>6.迪米特法则（降低类之间的耦合度）</h3><ul><li><p>基本介绍</p><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则（Demeter Principle - 最少知道法则）:一个类对自己依赖的类知道的越少越好。也就是，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</p></li><li><p>更简单的定义：只与直接的朋友通信</p><p>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，就说这两个对象之间是<code>朋友关系</code>。耦合的方式很多，依赖、关联、组合、聚合 等。其中，我们称出现<code>成员变量，方法参数，方法返回值</code>中的类为<code>直接的朋友</code>，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol></li><li><p>注意事项和细节</p><ol><li>迪米特法则的核心是降低类之间的耦合度</li><li>由于每个类都减少不了不必要的依赖，因此迪米特法则<code>只是要求降低</code>类之间的耦合关系，并不是要求完全没有依赖关系</li></ol></li></ul><h3 id="7-合成复用原则（Composite-Reuse-Principle）"><a href="#7-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="7.合成复用原则（Composite Reuse Principle）"></a>7.合成复用原则（Composite Reuse Principle）</h3><ul><li><p>基本介绍</p><p>原则是尽量使用合成/聚合的方式，而不是继承</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;闲谈设计模式-七大原则&quot;&gt;&lt;a href=&quot;#闲谈设计模式-七大原则&quot; class=&quot;headerlink&quot; title=&quot;闲谈设计模式 - 七大原则&quot;&gt;&lt;/a&gt;闲谈设计模式 - 七大原则&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;懂了设计模式，你就
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="七大原则" scheme="http://www.wangjunjun.club/tags/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
</feed>
