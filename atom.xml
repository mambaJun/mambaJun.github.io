<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jun Smith</title>
  
  <subtitle>Stay hungry,Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wangjunjun.club/"/>
  <updated>2019-12-13T04:07:14.797Z</updated>
  <id>http://www.wangjunjun.club/</id>
  
  <author>
    <name>Jun Smith</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式 - 装饰者模式</title>
    <link href="http://www.wangjunjun.club/2019/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-12-13T03:34:07.000Z</published>
    <updated>2019-12-13T04:07:14.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-装饰者模式"><a href="#设计模式-装饰者模式" class="headerlink" title="设计模式 -  装饰者模式"></a>设计模式 -  装饰者模式</h1><p><img src="https://images.gitee.com/uploads/images/2019/1213/113208_9e7f9b61_1673884.png" alt="装饰者模式"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">        RedShapeDecorator redShapeDecorator = <span class="keyword">new</span> RedShapeDecorator(circle);</span><br><span class="line">        circle.draw();</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        redShapeDecorator.draw();</span><br><span class="line">        System.out.println(<span class="string">"#########################################"</span>);</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        RedShapeDecorator redShapeDecorator1 = <span class="keyword">new</span> RedShapeDecorator(rectangle);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">        System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">        redShapeDecorator1.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractShapeDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratorShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(decoratorShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratorShape.draw();</span><br><span class="line">        <span class="comment">// 装饰器的精髓一步</span></span><br><span class="line">        setRedBorder(decoratorShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratorShape)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Shape decoratorShape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractShapeDecorator</span><span class="params">(Shape decoratorShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoratorShape = decoratorShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratorShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Shape - Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Shape - Rectangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-装饰者模式&quot;&gt;&lt;a href=&quot;#设计模式-装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式 -  装饰者模式&quot;&gt;&lt;/a&gt;设计模式 -  装饰者模式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://images.gitee.c
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰者模式" scheme="http://www.wangjunjun.club/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker 入门</title>
    <link href="http://www.wangjunjun.club/2019/12/05/docker-%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wangjunjun.club/2019/12/05/docker-%E5%85%A5%E9%97%A8/</id>
    <published>2019-12-05T09:59:14.000Z</published>
    <updated>2019-12-05T10:00:59.911Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="目录">TOC</a></p><h1 id="Docker-笔记"><a href="#Docker-笔记" class="headerlink" title="Docker 笔记"></a>Docker 笔记</h1><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><ul><li>是什么：<ul><li>一次封装，多处运行，解决运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</li></ul></li><li>能干嘛：<ul><li>之前的虚拟机技术</li><li>容器虚拟化技术</li><li>开发/运维（DevOps）：开发自运维<ul><li>更快速的应用交付和部署</li><li>更快速的升级 和 扩缩容</li><li>更快速的系统运维</li><li>更高效的计算资源利用</li></ul></li><li>企业级</li></ul></li><li>去哪下<h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2></li><li>Docker基本组成<ul><li>镜像image</li><li>容器 container：用镜像创建的运行实例</li><li>仓库 repository<h2 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it images_name</span></span><br></pre></td></tr></table></figure></li></ul></li><li>运行Ubuntu<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v /myDataVolume:/dataVolumeContainer ubuntu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker start 3af88b62bae9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker attach 3af88b62bae9</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、Docker镜像"><a href="#四、Docker镜像" class="headerlink" title="四、Docker镜像"></a>四、Docker镜像</h2><ul><li>是什么<ul><li>Docker镜像加载原理<ul><li>docker的镜像实际上由一层层的文件系统组成，这种层级的文件系统 UnionFS</li><li>bootfs（boot file system）只要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，<br>在Docker镜像的最底层是bootfs。这一层和Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，<br>此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</li><li>rootfs（root file system）在bootfs之上，包含的就是经典Linux系统中的/dev /proc /bin /etc等标准目录和文件。rootfs就是各种不同<br>的操作系统发行版本，如Ubuntu、CentOS等等<br><img src="./image/UnionFS.png" alt=""></li><li>最大的好处： 共享资源<br>  有多个镜像都是从同一个base镜像构建，那么宿主机只要在磁盘上保存一份base镜像，同时内存中也只要加载一份base镜像，就可以给所有容器服务了。<br>  而且镜像的每一层都可以共享</li></ul></li></ul></li><li>特点<br>  Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”,容器层之下的都是“镜像层”。<h2 id="五、Docker-容器数据卷（Docker容器中的数据持久化（保存下来））"><a href="#五、Docker-容器数据卷（Docker容器中的数据持久化（保存下来））" class="headerlink" title="五、Docker 容器数据卷（Docker容器中的数据持久化（保存下来））"></a>五、Docker 容器数据卷（Docker容器中的数据持久化（保存下来））</h2></li><li>背景：<ul><li>将运用与运行的环境打包成容器运行，运行可以伴随容器，但是我们对数据的要求希望是持久化的</li><li>容器之间希望有可能共享数据<br>Docker容器产生的数据，如果不通过docker commit 生成新的镜像，使得数据做成镜像的一部分保存下来，那么容器删除后数据就没了<br>为了能保存数据在docker中使用 数据卷（类似Redis中的 rdb和aof文件）</li></ul></li><li>能干嘛<pre><code>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于UnionFS，因此能绕过UnionFS提供一些用于持久储存或共享数据的特性，卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷- 特点  1. 数据卷可在容器之间共享或重用数据  2. 卷中的更改可以直接生效  3. 卷中的更改不会包含在镜像的更新中  4. 卷的生命周期一直持续到没有容器使用为止 </code></pre></li><li>数据卷<ul><li>容器添加<ul><li>直接命令添加<ol><li>命令<br> docker run -it -v /myDataVolume:/dataVolumeContainer ubuntu</li><li>查看数据卷是否挂载成功<br> docker inspect 3af88b62bae9 （CONTAINER ID） <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"HostConfig": &#123;</span><br><span class="line">    "Binds": [</span><br><span class="line">        <span class="string">"/myDataVolume:/dataVolumeContainer"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>容器和宿主机之间数据共享</li><li>容器停止退出后，主机修改后数据是否同步<pre><code>$ docker start 3af88b62bae9$ docker attach 3af88b62bae9</code></pre></li><li>命令（带权限）<br> docker run -it -v /myDataVolume:/dataVolumeContainer 镜像名<br> docker run -it -v /宿主机绝对路径目录:/容器内目录:ro      镜像名<pre><code>- ro read-only 只读</code></pre></li></ol></li><li>DockerFile添加<ul><li>根目录下新建 my_docker 文件夹 并 进入</li><li>在 Dockerfile 中使用 VOLUME命令 来给镜像添加一个或多个数据卷  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">  出于可移植和分享的考虑，用 -v 主机目录:容器目录 这种方法 不能直接在Dockerfile中实现</span><br><span class="line">  由于宿主机目录是依赖特定宿主机的，并不能保证在所有宿主机上都存在这样的特定目录</span><br></pre></td></tr></table></figure></li><li>File 构建<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /host1:/dataVolumeContainer1 -v /host2:/dataVolumeContainer2 ubuntu /bin/bash</span><br><span class="line">          </span><br><span class="line"><span class="meta">#</span><span class="bash"> volume <span class="built_in">test</span></span></span><br><span class="line">FROM ubuntu</span><br><span class="line">VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]</span><br><span class="line">CMD echo "finished,--------------success"</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure></li><li>build后生成镜像<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -f ./Dockerfile -t dockder_file/ubuntu .</span></span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  17.92kB</span><br><span class="line">Step 1/4 : FROM ubuntu</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 775349758637</span></span><br><span class="line">Step 2/4 : VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 7c7ad759b784</span></span><br><span class="line">Removing intermediate container 7c7ad759b784</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0af71e73f90a</span></span><br><span class="line">Step 3/4 : CMD echo "finished,--------------success"</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 20b46d5d6917</span></span><br><span class="line">Removing intermediate container 20b46d5d6917</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0ed798ff540c</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 99f343a2a2df</span></span><br><span class="line">Removing intermediate container 99f343a2a2df</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 6199b6ca4626</span></span><br><span class="line">Successfully built 6199b6ca4626</span><br><span class="line">Successfully tagged dockder_file/ubuntu:latest</span><br></pre></td></tr></table></figure></li><li>run 容器 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it dockder_file/ubuntu /bin/bash</span><br></pre></td></tr></table></figure></li><li>主机对应默认地址：/var/lib/docker/volumes/ 下</li></ul></li><li>备注</li></ul></li></ul></li><li>数据卷容器<ul><li>是什么<br>  命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，叫做数据卷容器<br>  说白了，活动硬盘上挂载活动硬盘，实现数据传递</li><li>总体介绍</li><li>容器间传递共享   –volumes-from<ol><li>先启动一个父容器 dc01 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   docker run -it --name dc01 dockder_file/ubuntu</span><br><span class="line">    ```         </span><br><span class="line">2. dc02/dc03 继承 dc01    </span><br><span class="line">    ```shell script</span><br><span class="line">   docker run -it --name dc02 --volumes-from dc01 dockder_file/ubuntu</span><br><span class="line">    ```   </span><br><span class="line">3. 回到dc01 可以看到02/03各自添加的都能共享了</span><br><span class="line">    ```shell script</span><br><span class="line">   docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>删除 dc01，dc02修改后是否可以访问 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>删除dc02 后dc03是否可以访问 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>新建dc04继承dc03 后在删除dc03 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name dc01 dockder_file/ubuntu</span><br></pre></td></tr></table></figure></li><li>结论： 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止（即一旦容器创建后，它的信息传递的关系，不再受别的任何容器影响）</li></ol></li></ul></li></ul><h2 id="六、DockerFile解析"><a href="#六、DockerFile解析" class="headerlink" title="六、DockerFile解析"></a>六、DockerFile解析</h2><ul><li>是什么<ul><li>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本</li><li>构建三步骤<ol><li>编写Dockerfile</li><li>docker build</li><li>docker run</li></ol></li><li>文件什么样</li></ul></li><li>Dockerfile创建过程<ul><li>Dockerfile 内容基础知识<ol><li>每条保留指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ol></li><li>Docker 执行 Dockerfile 大致流程<ol><li>docker 从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似docker commit 的操作提交一个新的镜像层</li><li>docker 再基于刚提交的镜像运行一个新的容器</li><li>执行Dockerfile 中的下一条指令直到所有指令都执行完成</li></ol></li><li>小总结<ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程中需要的一切东西<br>。Dockerfile涉及的内容包括执行代码或者文件、环境变量、依赖包、运行环境、动态链接库、操作系统的发行版、服务进程和内核进程<br>（当应用进程需要和服务系统和内核进程打交道，这时要考虑如何设计namespace的权限控制）等等。</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时，会真正开始提供服务</li><li>Docker容器，容器是直接提供服务的<br>从应用软件的角度看，Dockerfile、Docker镜像、Docker容器 分别代表 三个阶段<br> Dockerfile是软件原材料<br> Docker镜像是软件交付品<br> Docker容器是软件运行状态</li></ol></li></ul></li><li>Dockerfile 体系结构（保留字指令）<ul><li>FROM：基础镜像，当前镜像是基于哪个镜像的</li><li>MAINTAINER：镜像维护者的姓名和邮箱地址</li><li>RUN：容器构建时需要运行的命令</li><li>EXPOSE：当前容器对外暴露的端口号</li><li>WORKDIR：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</li><li>ENV：用来在构建镜像过程中设置环境变量<br>  ENV MY_PATH /usr/mytest<br>  这个环境变量可以在后面的任何 RUN 指令中使用，这就是如同在命令前面指定了环境变量前缀一样；也可以在其他指令中直接使用这些环境变量</li><li>ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理 URL 和 解压tar压缩包</li><li>COPY：类似 ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;原路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</li><li>VOLUME：容器数据卷，用于数据保存和持久化工作</li><li>CMD：指定一个容器启动时要运行的命令，Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD被 docker run 之后的参数替换<br>  CMD 容器启动命令<pre><code>CMD 和 RUN 格式类似，也是两种格式    - shell 格式：CMD &lt;命令&gt;    - exec 格式：CMD [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;......]    - 参数列表格式：CMD [&quot;参数1&quot;,&quot;参数2&quot;......]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体参数</code></pre></li><li>ENTRYPOINT：指定一个容器启动时要运行的命令，ENTRYPOINT 的目的和 CMD一样，都是在指定容器启动程序及参数</li><li>ONBUILD：当构建一个被继承的 Dockerfile时运行命令，父镜像在被子继承后父镜像的 onbuild 被触发<br><img src="./image/Dockerfile.png" alt=""></li></ul></li><li>案例<ul><li>Base镜像（scratch）<br>  Docker Hub 中 99% 的镜像都是通过 在 base 镜像中安装 和 配置需要的软件构建出来的</li><li>自定义镜像 myCentOS<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER Jun&lt;wjxajh@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim </span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "success --------------------- ok"</span><br><span class="line">CMD echo /bin/bash</span><br></pre></td></tr></table></figure></li><li>CMD/ENTRYPOINT 镜像案例</li><li>自定义镜像 Tomcat9</li></ul></li><li>小总结<br><img src="./image/%E5%B0%8F%E6%80%BB%E7%BB%93.png" alt=""><h2 id="七、Docker常用安装"><a href="#七、Docker常用安装" class="headerlink" title="七、Docker常用安装"></a>七、Docker常用安装</h2></li><li>总体步骤</li><li>安装 tomcat</li><li>安装 MySQL  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name local_mysql </span><br><span class="line">-v /opt/mysql/conf:/etc/mysql/conf </span><br><span class="line">-v /opt/mysql/logs:/logs </span><br><span class="line">-v /opt/mysql/data:/var/lib/mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root </span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>和 MySQL进行交互<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 2a95e24f4184 /bin/bash</span><br></pre></td></tr></table></figure>导出数据库数据到数据卷<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec mysqldump --all-databases -uroot -proot &gt; /logs/all-databases.sql</span><br></pre></td></tr></table></figure></li><li>安装 redis<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis_01</span><br><span class="line">-v /opt/redis/data:/redis/data </span><br><span class="line">-v /opt/redis/conf:/usr/local/etc/redis/redis.conf </span><br><span class="line">-d redis </span><br><span class="line">redis-server </span><br><span class="line">/usr/local/etc/redis/redis.conf </span><br><span class="line">--appendonly yes</span><br><span class="line">```          </span><br><span class="line">```shell script</span><br><span class="line">docker exec -it feed1bbcfc7d redis-cli</span><br></pre></td></tr></table></figure></li><li>安装 nginx <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx_1 </span><br><span class="line">-v /opt/nginx/conf:/etc/nginx/conf.d/ </span><br><span class="line">-v /opt/nginx/logs:/var/log/nginx/ </span><br><span class="line">-v /opt/nginx/cache:/var/cache/nginx/ </span><br><span class="line">-v /opt/nginx/project:/usr/share/nginx/ </span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h2 id="八、本地镜像发布到阿里云-阿里云开发者平台"><a href="#八、本地镜像发布到阿里云-阿里云开发者平台" class="headerlink" title="八、本地镜像发布到阿里云 阿里云开发者平台"></a>八、本地镜像发布到阿里云 <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a></h2></li><li>本地镜像发布到阿里云流程<br>  <img src="./image/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%B5%81%E7%A8%8B.png" alt="">      </li><li>镜像的生成方法<ol><li>Dockerfile</li><li>从容器创建一个新的镜像<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS]  容器ID [REPOSITORY[:TAG]]] </span><br><span class="line"> docker commit -a Jun -m "commit demo" 2a95e24f4184 mysql:1.0</span><br></pre></td></tr></table></figure></li></ol></li><li>将本地镜像推送到阿里云<ol><li>本地镜像素材原型</li><li>阿里云开发者平台<br> <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a></li><li>创建仓库镜像<ul><li>命名空间</li><li>仓库名称</li></ul></li><li>将镜像推送到registry</li><li>公有云可以查询到</li><li>查看详情</li></ol></li><li>将阿里云的镜像下载到本地</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;目录&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker-笔记&quot;&gt;&lt;a href=&quot;#Docker-笔记&quot; class=&quot;headerlink&quot; title=&quot;Docker 笔记&quot;&gt;&lt;/a&gt;Docker 笔记&lt;/h1&gt;&lt;h2 id=&quot;一、Docker
      
    
    </summary>
    
    
      <category term="docker" scheme="http://www.wangjunjun.club/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.wangjunjun.club/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 适配器模式</title>
    <link href="http://www.wangjunjun.club/2019/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-30T02:20:52.000Z</published>
    <updated>2019-11-30T02:40:35.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ol><li>适配器模式 将某个类的接口转换成客户端期望的另外一个接口表示，主要目的</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;适配器模式（Adapter-Pattern）&quot;&gt;&lt;a href=&quot;#适配器模式（Adapter-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;适配器模式（Adapter Pattern）&quot;&gt;&lt;/a&gt;适配器模式（Adapter Patter
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="http://www.wangjunjun.club/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 建造者模式</title>
    <link href="http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-29T08:22:03.000Z</published>
    <updated>2019-11-30T02:40:38.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-建造者模式（Builder-Pattern）"><a href="#设计模式-建造者模式（Builder-Pattern）" class="headerlink" title="设计模式 - 建造者模式（Builder Pattern）"></a>设计模式 - 建造者模式（Builder Pattern）</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><blockquote><p>建造者模式（生成器模式）：是一种对象构建模式。可以将复杂对象的构造过程抽象出来，使这个抽象过程的不同实现方法可以构造出不同属性的对象。</p><p>构建者模式 是一步步创建一个复杂的对象，运行用户只通过指定复杂对象的类型 和内容 就可以构建他们，用户不需要知道内部的具体细节</p></blockquote><p>建造者模式中的四个对象</p><ul><li>Product（产品角色）：一个具体的产品对象</li><li>Builder（抽象建筑者）：实现一个Production 对象的各个部件指定的接口 / 抽象类</li><li>ConcreateBuilder（具体构建者 ）：实现接口，构建和装配各个接口</li><li>Director（指挥者）:构建一个使用Builder接口对象。主要是用于构建个一个复杂对象。有两个作用：<ul><li>隔离客户和对象的成产过程</li><li>负责控制产品对象的生产过程</li></ul></li></ul><h2 id="二、简单的Demo"><a href="#二、简单的Demo" class="headerlink" title="二、简单的Demo"></a>二、简单的Demo</h2><p>下面提供一个样例可以体会一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//建造普通房子</span></span><br><span class="line">        CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">        <span class="comment">// 准备创建房子的指挥者</span></span><br><span class="line">        HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(commonHouse);</span><br><span class="line">        <span class="comment">// 返回盖房子</span></span><br><span class="line">        House house = houseDirector.createHouse();</span><br><span class="line">        System.out.println(house);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> <span class="keyword">extends</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    HouseBuilder houseBuilder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何处理建造房子的流程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">createHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        houseBuilder.buildBasic();</span><br><span class="line">        houseBuilder.buildWalls();</span><br><span class="line">        houseBuilder.roofed();</span><br><span class="line">        <span class="keyword">return</span> houseBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basic;</span><br><span class="line">    <span class="keyword">private</span> Integer wall;</span><br><span class="line">    <span class="keyword">private</span> String roofed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"high house build basic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"high house build wall"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"high house roofed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.house.setBasic(<span class="string">"common house basic"</span>);</span><br><span class="line">        System.out.println(<span class="string">"common house build basic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.house.setWall(<span class="string">"common house"</span>);</span><br><span class="line">        System.out.println(<span class="string">"common house build wall"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"common house roofed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">buildHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><ul><li><p>客户端不必知道产品内部组成的字节，将产品本身和产品的创建过程解耦，使相同的创建过程可以构建不同的产品对象，说白了就是 真正创建对象的时候只需要 告诉 <code>Director</code> 说 <code>我要什么</code> （调方法）具体的过程不用管，交给 <code>ConcreateBuilder</code> </p></li><li><p>每个具体构建者都相对独立，而与其他的具体构建者无关，因此可以很方便地替换具体构建者或者增加新的构造者，只要使用不同的具体构造者就可以得到不同的产品对象</p></li><li><p>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</p></li><li><p>增加新的具体构造者不用修改原有类库的代码，指挥者针对抽象构造者编程，系统扩展方便，符合“开闭原则”。</p></li><li><p>构建者模式 创建 的产品一般具有较多的共同点，他们 的组成部分相似，<code>如果产品之间的差异很大，不适合使用构建者模式</code></p></li><li><p>如果<code>产品的内部变化复杂，可以会导致需要定义很多具体构造者类来实现这种变化，导致系统变得很庞大</code>，因此在这种情况下考虑是否选择构建者模式</p></li><li><p>抽象工厂模式 VS 建造者模式</p><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关系构建过程，只关心什么产品由什么工厂生产。</p><p>构造者模式要求按照指定的蓝图构造产品，它的主要目的是通过组装零配件产品一个新的产品</p><p>抽象工厂类似面包房制作各种面包，构造者模式更新汽车的组装</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-建造者模式（Builder-Pattern）&quot;&gt;&lt;a href=&quot;#设计模式-建造者模式（Builder-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;设计模式 - 建造者模式（Builder Pattern）&quot;&gt;&lt;/a&gt;设计模
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://www.wangjunjun.club/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 原型模式</title>
    <link href="http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-29T07:14:00.000Z</published>
    <updated>2019-11-29T08:22:12.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-原型模式-（Prototype）"><a href="#设计模式-原型模式-（Prototype）" class="headerlink" title="设计模式 -原型模式   （Prototype）"></a>设计模式 -原型模式  <a href="https://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener"> （Prototype）</a></h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ul><li>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</li><li>原型模式是一个创建型设计模式，允许一个对象再创建另外一个可定制的对象，不需要知道创建的细节</li><li>工作原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来进行创建，<code>对象.clone()</code></li></ul><h2 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h2><ol><li><p>浅拷贝</p><p>浅拷贝 只对 基本数据类型其真正的拷贝作用，对于引用类型来说的话，只是简单的对引用类型地址进行了拷贝，即使进行了多次的浅拷贝，多个对象中地引用类型还是指的同一个</p></li><li><p>深拷贝</p><p>深拷贝用来解决浅拷贝问题</p><p>深拷贝实现方式：</p><ul><li><p>方式一：重写 clone 方法进行实现深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.clone()</span><br></pre></td></tr></table></figure></li><li><p>方式二：通过对象序列化进行深拷贝<code>推荐使用</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">            objectOutputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">            objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line"></span><br><span class="line">            SpringDemo springDemo = (SpringDemo) objectInputStream.readObject();</span><br><span class="line">            <span class="keyword">return</span> springDemo;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">                objectOutputStream.close();</span><br><span class="line">                byteArrayInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-原型模式-（Prototype）&quot;&gt;&lt;a href=&quot;#设计模式-原型模式-（Prototype）&quot; class=&quot;headerlink&quot; title=&quot;设计模式 -原型模式   （Prototype）&quot;&gt;&lt;/a&gt;设计模式 -原型模式  &lt;a href=
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="http://www.wangjunjun.club/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 工厂模式</title>
    <link href="http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-28T06:12:33.000Z</published>
    <updated>2019-11-29T07:14:26.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-工厂模式"><a href="#设计模式-工厂模式" class="headerlink" title="设计模式 - 工厂模式"></a>设计模式 - 工厂模式</h1><h2 id="一、简单（静态）工厂"><a href="#一、简单（静态）工厂" class="headerlink" title="一、简单（静态）工厂"></a>一、简单（静态）工厂</h2><h3 id="A、抛出场景"><a href="#A、抛出场景" class="headerlink" title="A、抛出场景"></a>A、抛出场景</h3><blockquote><p>一个外卖项目：要便于各种菜品的拓展，便于维护</p><p>菜品种类很多（黄焖鸡、大盘鸡等）</p><p>菜品制作有 prepare，make，package步骤</p><p>完成菜品的订购</p></blockquote><h3 id="B、基本介绍"><a href="#B、基本介绍" class="headerlink" title="B、基本介绍"></a>B、基本介绍</h3><ul><li>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式中最简单的使用模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Category.FORMAT));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone var0, Locale var1)</span> </span>&#123;</span><br><span class="line">        CalendarProvider var2 = LocaleProviderAdapter.getAdapter(CalendarProvider<span class="class">.<span class="keyword">class</span>, <span class="title">var1</span>).<span class="title">getCalendarProvider</span>()</span>;</span><br><span class="line">        <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> var2.getInstance(var0, var1);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var7) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object var3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (var1.hasExtensions()) &#123;</span><br><span class="line">            String var4 = var1.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">            <span class="keyword">if</span> (var4 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span> var6 = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">1581060683</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var4.equals(<span class="string">"buddhist"</span>)) &#123;</span><br><span class="line">                        var6 = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">752730191</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var4.equals(<span class="string">"japanese"</span>)) &#123;</span><br><span class="line">                        var6 = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">283776265</span>:</span><br><span class="line">                    <span class="keyword">if</span> (var4.equals(<span class="string">"gregory"</span>)) &#123;</span><br><span class="line">                        var6 = <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span>(var6) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    var3 = <span class="keyword">new</span> BuddhistCalendar(var0, var1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    var3 = <span class="keyword">new</span> JapaneseImperialCalendar(var0, var1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    var3 = <span class="keyword">new</span> GregorianCalendar(var0, var1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var1.getLanguage() == <span class="string">"th"</span> &amp;&amp; var1.getCountry() == <span class="string">"TH"</span>) &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> BuddhistCalendar(var0, var1);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.getVariant() == <span class="string">"JP"</span> &amp;&amp; var1.getLanguage() == <span class="string">"ja"</span> &amp;&amp; var1.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> JapaneseImperialCalendar(var0, var1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> GregorianCalendar(var0, var1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Calendar)var3;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h2><h3 id="A、模式介绍"><a href="#A、模式介绍" class="headerlink" title="A、模式介绍"></a>A、模式介绍</h3><p>定义创建方法的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化 在子类上。<code>工厂方法模式是对简单（静态）工厂进一步的抽象提取</code></p><h2 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h2><p>###　A.基本介绍</p><p>抽象工厂模式：定义了一个 interface 用于创建相关 或有依赖关系的对象簇，不用指明具体类</p><p>抽象工厂模式可以将简单工厂模式 和 工厂方法模式进行整合</p><p>从设计层面看，抽象工厂模式是对简单工厂模式的改进（进一步抽象）</p><p>将工厂抽象成两层，AbsFactory（抽象工厂）和 具体实现的工厂子类。根据创建对象类型使用对应的工厂子类。将单个的简单工厂类变成了工厂簇，更利于代码的维护和拓展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% abstractFactory.png slug %&#125;</span><br></pre></td></tr></table></figure><h2 id="四、工厂模式总结"><a href="#四、工厂模式总结" class="headerlink" title="四、工厂模式总结"></a>四、工厂模式总结</h2><ol><li>意义<ol><li>将实例化代码提取出来，放到一个类中统一管理和维护，达到和项目的依赖关系解耦，提高项目的拓展和维护性。</li></ol></li><li>三种工厂模式</li><li>依赖抽象原则<ol><li>不要让类继承具体类，而是继承<code>抽象类</code>或者<code>实现 interface（接口）</code></li><li>不覆盖基类中已经实现的方法</li></ol></li></ol><p>简单工厂是 建个工厂 不抽象的去创建 对象</p><p>工厂方法模式对 工厂进行抽象了一层，然后实现类去 担任 简单工厂里的工厂角色</p><p>抽象工厂模式是对 工厂方法模式 ，然后采用简单工厂模式的思想，<code>对从一个总的抽象工厂中，细分每个抽象工厂</code>(简单工厂模式思想)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-工厂模式&quot;&gt;&lt;a href=&quot;#设计模式-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式 - 工厂模式&quot;&gt;&lt;/a&gt;设计模式 - 工厂模式&lt;/h1&gt;&lt;h2 id=&quot;一、简单（静态）工厂&quot;&gt;&lt;a href=&quot;#一、简单（静态）工厂&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://www.wangjunjun.club/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - UML类图</title>
    <link href="http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/"/>
    <id>http://www.wangjunjun.club/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/</id>
    <published>2019-11-28T01:43:19.000Z</published>
    <updated>2019-11-28T02:33:17.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><blockquote><p>UML–Unified modeling language（统一建模语言），是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果。</p></blockquote><p>UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛华、依赖、组合、聚合等。</p><ul><li><p>Common</p><ul><li>Note</li></ul></li><li><p>Entity</p><ul><li>Class</li><li>Interface</li></ul></li><li><p>Relation</p><ul><li><p>Dependency：依赖（使用）：只要在类中用到了对方，那么他们之间就存在依赖关系</p><ul><li>类中用到对方</li><li>是类的成员属性</li><li>是方法的返回类型</li><li>是方法接收的参数类型</li><li>方法中使用到</li></ul></li><li><p>Associtation：关联</p><p>类与类之间的联系，是依赖关系的特例 </p></li><li><p>Generalization：泛华（继承）：依赖的特例</p><ul><li>如果 A 继承 B ，A和B之间存在泛华关系</li></ul></li><li><p>Realization：实现</p></li><li><p>Aggregation：聚合：聚合关系是关联关系的特例</p><p>整体与部分的关系，整体与部分可以分开</p></li><li><p>Composite：组合</p><p>整体与部分的关系，整体与部分不可以分开</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UML-类图&quot;&gt;&lt;a href=&quot;#UML-类图&quot; class=&quot;headerlink&quot; title=&quot;UML 类图&quot;&gt;&lt;/a&gt;UML 类图&lt;/h1&gt;&lt;h2 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML 类图" scheme="http://www.wangjunjun.club/tags/UML-%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 闲谈设计模式</title>
    <link href="http://www.wangjunjun.club/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%B2%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://www.wangjunjun.club/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%B2%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</id>
    <published>2019-11-26T07:37:26.000Z</published>
    <updated>2019-11-27T10:05:21.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闲谈设计模式-七大原则"><a href="#闲谈设计模式-七大原则" class="headerlink" title="闲谈设计模式 - 七大原则"></a>闲谈设计模式 - 七大原则</h1><blockquote><p><strong>懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要.</strong></p></blockquote><h2 id="一、设计模式的目的"><a href="#一、设计模式的目的" class="headerlink" title="一、设计模式的目的"></a>一、设计模式的目的</h2><p>编写软件的过程，面临 == 耦合性、内聚性、维护性、可扩展性、重用性、灵活性== 等各方面的挑战。</p><p>设计模式就是为了解决这些问题</p><ul><li>代码重用性：相同功能代码，不写多次</li><li>可读性：编程规范性，利于阅读和理解</li><li>可扩展性：增加新的功能非常方便</li><li>可靠性：当增加新的功能后对原来功能没有影响</li></ul><h2 id="二、设计模式七大原则"><a href="#二、设计模式七大原则" class="headerlink" title="二、设计模式七大原则"></a>二、设计模式七大原则</h2><p>编程时遵循的原则，各种设计模式的基础</p><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h3><ul><li><p>基本介绍</p><p>对类来说，一个类只负责一项职责，如果 A 负责两个不同职责：职责1，职责2.</p><p>当职责1 需求变更的时候改变 A，可能会造成 职责2 执行错误，职责2 同理。</p><p>所以需要将 类A 的粒度分解成 A1 , A2</p></li><li><p>注意事项和细节</p><ul><li>降低类的复杂度，一个类只负责一项职责</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li></ul></li></ul><h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2.接口隔离原则"></a>2.接口隔离原则</h3><ul><li><p>基本介绍</p><p>客户端不应该依赖它不需要的接口，也就是说 一个类的依赖应该建立在最小的接口上</p></li><li><p>处理方法</p><p>将一个接口拆分成几个独立的接口，当类需要的时候多实现就可以</p></li></ul><h3 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3.依赖倒转原则（Dependence Inversion Principle）"></a>3.依赖倒转原则（Dependence Inversion Principle）</h3><ul><li>基本介绍<ul><li>高层模块不应该依赖底层模块，二者都应该是依赖抽象</li><li>==抽象不应该依赖细节，细节应该依赖抽象==</li><li>依赖倒转（倒置）的中心思想是==面向接口编程==</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多边形，抽象的东西要稳定的多。以抽象为基础搭建的架构比细节为基础的架构稳定的多。在Java中，抽象指的是接口或抽象类，细节是具体的实现类</li><li>使用接口或抽象类的目的是 指定好规范，而不涉及任何具体的操作，把展现细节的任务交给实现类</li><li>注意事项和细节</li><li>低层模块尽量都有抽象类和接口，或者两者都有程序稳定性更好。</li><li>变量的声明类型尽量是抽象类或者接口，这样在变量的引用和 实际对象间存在缓冲层，利于程序拓展和优化</li><li>继承时遵循里氏替换原则</li></ul></li></ul><h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4.里氏替换原则"></a>4.里氏替换原则</h3><ul><li><p>前言思考</p><ul><li>继承包含这层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏</li><li>继承在给程序设计带来便利的同时，也带来了弊端，比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则这个需要修改时，必须考虑到所有子类，并且父类修改后，所有涉及的子类的功能都有可能产生故障</li></ul><p>那么问题来了，如何正确使用继承？</p><p>答案：里氏替换原则</p><ul><li><p>基本介绍</p><ol><li><p>如果对每个类型 为 T1 的对象 o1，都有类型为 T2 的对象 o2,使得以 T1定义的所有程序 P 在所有的对象o1都代替成 o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。也就是，==所有引用父类的地方必须能透明地使用其子类对象==</p></li><li><p>在使用继承时 ，遵循里氏替换原则，在子类中尽量不要重写父类的方法</p></li><li><p>继承实际上让两个类耦合性增强了，在适当情况下，可以通过聚合、组合、依赖 来解决问题</p></li></ol></li></ul></li><li><p>解决方法</p><blockquote><p>类B 继承 类A  并重写父类方法，造成原有功能错误</p><p>实际编程中，常常会重写父类的方法完成新功能，这样写起来虽然简单，但是整个继承体系的复用性比较差，特别是运行多态比较频繁的时候</p></blockquote><p>解决方法</p><p>原来的父类和子类都继承一个更通俗（抽象）的基类，原有的继承关系去掉，采用依赖、聚合、组合等关系代替</p></li></ul><h3 id="5-开闭原则"><a href="#5-开闭原则" class="headerlink" title="5.开闭原则"></a>5.开闭原则</h3><ul><li><p>基本介绍</p><ol><li><p>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</p></li><li><p>一个软件实体 如 类、模块、函数 应该对外开放，对修改关闭。用抽象构建框架，用实现扩展细节</p></li><li><p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化</p></li><li><p>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则</p></li></ol></li></ul><h3 id="6-迪米特法则（降低类之间的耦合度）"><a href="#6-迪米特法则（降低类之间的耦合度）" class="headerlink" title="6.迪米特法则（降低类之间的耦合度）"></a>6.迪米特法则（降低类之间的耦合度）</h3><ul><li><p>基本介绍</p><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则（Demeter Principle - 最少知道法则）:一个类对自己依赖的类知道的越少越好。也就是，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</p></li><li><p>更简单的定义：只与直接的朋友通信</p><p>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，就说这两个对象之间是<code>朋友关系</code>。耦合的方式很多，依赖、关联、组合、聚合 等。其中，我们称出现<code>成员变量，方法参数，方法返回值</code>中的类为<code>直接的朋友</code>，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol></li><li><p>注意事项和细节</p><ol><li>迪米特法则的核心是降低类之间的耦合度</li><li>由于每个类都减少不了不必要的依赖，因此迪米特法则<code>只是要求降低</code>类之间的耦合关系，并不是要求完全没有依赖关系</li></ol></li></ul><h3 id="7-合成复用原则（Composite-Reuse-Principle）"><a href="#7-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="7.合成复用原则（Composite Reuse Principle）"></a>7.合成复用原则（Composite Reuse Principle）</h3><ul><li><p>基本介绍</p><p>原则是尽量使用合成/聚合的方式，而不是继承</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;闲谈设计模式-七大原则&quot;&gt;&lt;a href=&quot;#闲谈设计模式-七大原则&quot; class=&quot;headerlink&quot; title=&quot;闲谈设计模式 - 七大原则&quot;&gt;&lt;/a&gt;闲谈设计模式 - 七大原则&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;懂了设计模式，你就
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="七大原则" scheme="http://www.wangjunjun.club/tags/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 单例模式</title>
    <link href="http://www.wangjunjun.club/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.wangjunjun.club/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-26T06:19:22.000Z</published>
    <updated>2019-11-28T06:28:00.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式（Singleton-mode）"><a href="#单例模式（Singleton-mode）" class="headerlink" title="单例模式（Singleton mode）"></a>单例模式（Singleton mode）</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>采取一定的方法保证在整个软件系统中 ，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p><h2 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h2><ul><li>只需要一个实例<ul><li>各种 Manager</li><li>各种 Factory</li></ul></li></ul><h2 id="三、设计模式写法（八种）"><a href="#三、设计模式写法（八种）" class="headerlink" title="三、设计模式写法（八种）"></a>三、设计模式写法（八种）</h2><h3 id="1-饿汉式-（静态常量）"><a href="#1-饿汉式-（静态常量）" class="headerlink" title="1.饿汉式 （静态常量）"></a>1.饿汉式 （静态常量）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 构造器私有化 2. 类的内部创建对象 3. 向外暴露一个静态公共方法（getInstance） 4. 代码实现</code></pre><h3 id="2-饿汉式（静态代码块）"><a href="#2-饿汉式（静态代码块）" class="headerlink" title="2. 饿汉式（静态代码块）"></a>2. 饿汉式（静态代码块）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>    <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    小结：饿汉式说白了就是创建类的时候创建实例，这样可以保证线程安全，但是如果项目中没有用到就会造成资源浪费</p><h3 id="3-懒汉式（线程不安全）"><a href="#3-懒汉式（线程不安全）" class="headerlink" title="3. 懒汉式（线程不安全）"></a>3. 懒汉式（线程不安全）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-懒汉式（线程安全，同步方法）"><a href="#4-懒汉式（线程安全，同步方法）" class="headerlink" title="4. 懒汉式（线程安全，同步方法）"></a>4. 懒汉式（线程安全，同步方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>这种方式会效率太低，不推荐使用</code></p><h3 id="5-懒汉式（线程安全，同步代码块）"><a href="#5-懒汉式（线程安全，同步代码块）" class="headerlink" title="5. 懒汉式（线程安全，同步代码块）"></a>5. 懒汉式（线程安全，同步代码块）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span><span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>不能起到线程同步的作用，在实际中不能使用</code></p><h3 id="6-双重检查（Double-Check）"><a href="#6-双重检查（Double-Check）" class="headerlink" title="6.双重检查（Double Check）"></a>6.双重检查（Double Check）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次 <code>if (instance == null)</code> 解决线程安全问题，同时解决懒加载问题，<code>推荐使用</code></p><h3 id="7-静态内部类"><a href="#7-静态内部类" class="headerlink" title="7.静态内部类"></a>7.静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式 采用了类加载机制保证初始化实例时只有一个线程</p><p><code>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高，推荐使用</code></p><h3 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8. 枚举"></a>8. 枚举</h3><p>不仅能避免多线程同步问题，而且还能防止反序列话重新创建新的对象<code>提倡使用</code></p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><ul><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li><li>想实例化一个单例类的时候，使用相应的获取方法，而不是使用 new</li><li>单例模式使用的场景<ol><li>需要<code>频繁进行创建和销毁的对象</code>（各种池）</li><li>创建对象耗时过多或耗费资源过多，但是又经常用到的对象、工具类对象、频繁访问的数据库、文件的对象（数据源、session工厂等）</li></ol></li></ul><p>在实际使用中，多使用<code>饿汉式（两种方法）、双重检查、静态内部类、枚举</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式（Singleton-mode）&quot;&gt;&lt;a href=&quot;#单例模式（Singleton-mode）&quot; class=&quot;headerlink&quot; title=&quot;单例模式（Singleton mode）&quot;&gt;&lt;/a&gt;单例模式（Singleton mode）&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.wangjunjun.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="http://www.wangjunjun.club/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Django 入门</title>
    <link href="http://www.wangjunjun.club/2019/11/24/Django-%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wangjunjun.club/2019/11/24/Django-%E5%85%A5%E9%97%A8/</id>
    <published>2019-11-24T05:54:47.000Z</published>
    <updated>2019-11-24T05:58:20.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-入门"><a href="#Django-入门" class="headerlink" title="Django 入门"></a>Django 入门</h1><p>这篇文章仅仅我初步了解　Django 的入门笔记</p><h2 id="一、-Django的框架模式-MTV"><a href="#一、-Django的框架模式-MTV" class="headerlink" title="一、 Django的框架模式 - MTV"></a>一、 Django的框架模式 - MTV</h2><p>M: Models 层<br>    负责数据库的建模以及 CRUD操作<br>T: Templates 层<br>    用于处理用户显示的内容 如  HTML<br>V: Views 层<br>    处理用户交互操作，从模板中取得数据，再将数据发送给模板，并显示给用户<br><img src="./MTV.png" alt=""></p><h2 id="二、-Django-的使用"><a href="#二、-Django-的使用" class="headerlink" title="二、 Django 的使用"></a>二、 Django 的使用</h2><h3 id="1-目录结构介绍"><a href="#1-目录结构介绍" class="headerlink" title="1.目录结构介绍"></a>1.目录结构介绍</h3><ul><li>主目录（名称和项目名相同）<ul><li><strong>init</strong>.py 项目初始化文件，每当服务器启动的时候，都会自动执行</li><li>urls.py :项目的基础url 配置文件</li><li>wsgi.py：应用服务器配置文件</li><li>setting.py：项目的主设置文件<h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2.启动服务"></a>2.启动服务</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python  manage.py runserver</span><br></pre></td></tr></table></figure>manage.py   负责执行Django中的各项操作文件</li><li>启动服务<ul><li>创建管理员</li><li>创建应用</li><li>数据库的同步操作</li></ul></li></ul></li></ul><h2 id="三、URL的使用"><a href="#三、URL的使用" class="headerlink" title="三、URL的使用"></a>三、URL的使用</h2><pre><code>1. urls.py：默认是在主目录中，主路由配置文件包含最基本的地址映射，每个请求到达之后都由urls.py 中的urlpatterns 列表中的url()进行匹配url() 函数匹配上 之后，可能将请求转交给其他urls.py 或者 试图（Views）去处理</code></pre><p> <img src="./%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.png" alt=""><br>    url()函数语法：<br>        url(regex,views,kwargs=None,name=None)<br>        正则表达式：匹配请求的url<br>        视图处理函数或者其他的urls.py<br>        字典，用来给views 传参，没有参数可以省略<br>        字符串，给url()起别名，主要在模板中使用</p><p>##　四、应用的结构组成</p><pre><code>1. migrations 目录：存放数据库中间文件（日志文件）2. __init__.py：应用的初始化文件3. admin.py：应用的后台管理配置文件4. apps.py：应用的属性配置文件5. models.py：模型文件，与数据库有关6. test.py：测试模块7. views.py：定义视图的文件</code></pre><p>​    </p><h2 id="五、数据三大特征"><a href="#五、数据三大特征" class="headerlink" title="五、数据三大特征"></a>五、数据三大特征</h2><ol><li>数据表 到 类 的映射，将数据表自动生成 一个 class 类 同时也允许将一个 class类自动生成数据库中的一张表</li><li>数据类型的映射    允许将表中的字段的数据类型 自动 映射成编程语言中对应的数据类型    也允许 将编程语言的数据类型 自动 映射 成表中的字段的数据类型</li><li>关系映射    在编程语言中允许将表与表之间的关系映射出来    表与表之间的关系也可以自动映射到编程语言的Class中4. 编写 Models    - Models 中的每个class 都称为 模型类 实体类    - Models 中的每个模型类，必须继承 models.Model</li></ol><h3 id="模型-字段类型-和-字段选项"><a href="#模型-字段类型-和-字段选项" class="headerlink" title="模型 字段类型 和 字段选项"></a>模型 字段类型 和 字段选项</h3><ul><li><p>字段类型（Field Type）</p><ul><li>BooleanField() </li><li>CharField() </li><li>DateField()    </li><li>DateField()    </li><li>DateTimeField()   </li><li>DecimalField()   </li><li>EmailField() # 存电子邮件 - varchar    </li><li>FloatField()    </li><li>ImageField(upload_to=’’) # 存图片路径 - varchar    </li><li>IntergerField()    </li><li>URLField()    </li><li>TextField() # 存大量文本数据 - text</li></ul></li><li><h3 id="字段选项（Field-Option）"><a href="#字段选项（Field-Option）" class="headerlink" title="字段选项（Field Option）"></a>字段选项（Field Option）</h3><ul><li><h3 id="max-length-在-CharField-必须设置选项"><a href="#max-length-在-CharField-必须设置选项" class="headerlink" title="max_length # 在 CharField() 必须设置选项"></a>max_length # 在 CharField() 必须设置选项</h3></li><li><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3></li><li><h3 id="null-指定当前字段是否允许为空，默认值-false"><a href="#null-指定当前字段是否允许为空，默认值-false" class="headerlink" title="null # 指定当前字段是否允许为空，默认值 false"></a>null # 指定当前字段是否允许为空，默认值 false</h3></li></ul></li><li><p>数据模型的版本切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./manage.py migrate # 执行所有应用中最新的数据库中间文件</span><br><span class="line">./manage.py migrate 应用名称 版本号# 执行 应用中版本号对应的中间文件</span><br><span class="line">./manage.py inspectdb &gt; 文件名.py  # 通过数据库自动导出 Models</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、连接-MySQL"><a href="#六、连接-MySQL" class="headerlink" title="六、连接 MySQL"></a>六、连接 MySQL</h2><ul><li><p>环境按照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-dev</span><br><span class="line">sudo apt-get install python3-dev libmysqlclient-dev</span><br><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure></li><li><p>项目配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;django&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            &apos;init_command&apos;: &quot;SET sql_mode=&apos;STRICT_TRANS_TABLES&apos;&quot;,</span><br><span class="line">            &apos;charset&apos;: &apos;utf8mb4&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、模型中的-CRUD"><a href="#七、模型中的-CRUD" class="headerlink" title="七、模型中的 CRUD"></a>七、模型中的 CRUD</h2><h4 id="1-通过-ORM-向-DB-中添加数据"><a href="#1-通过-ORM-向-DB-中添加数据" class="headerlink" title="1.通过 ORM 向 DB 中添加数据"></a>1.通过 ORM 向 DB 中添加数据</h4><ol><li><p>Entry.objects.create(属性=值，……)    </p><p> Entry：具体要操作的Model类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Author.objects.create(name=<span class="string">'张三'</span>,age=<span class="string">'20'</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建一个Models对象，通过对象save() 完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = Author(name=<span class="string">'张三'</span>,age=<span class="string">'20'</span>)</span><br><span class="line">obj.save()</span><br></pre></td></tr></table></figure></li><li><p>使用 字典序 构建对象，通过save() 完成增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">'属性1'</span>: <span class="string">'值1'</span>,</span><br><span class="line">     <span class="string">'属性1'</span>: <span class="string">'值1'</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj = Entry(**dic)</span><br><span class="line">obj.save()</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-查询操作（重难点）查询"><a href="#2-查询操作（重难点）查询" class="headerlink" title="2.查询操作（重难点）查询"></a>2.查询操作（重难点）<a href="https://docs.djangoproject.com/en/2.2/ref/models/querysets/" target="_blank" rel="noopener">查询</a></h4><ol><li><p>通过Entry.objects 调用方法</p><ol><li>基本查询操作<ul><li>all()</li></ul></li></ol></li><li><p>查询指定列</p><ol><li>value()</li></ol></li><li><p>排序函数</p><ol><li>order_by()</li></ol></li><li><p>对条件取反</p><ol><li>exclude()</li></ol></li><li><p>根据条件查询部分行数据 ==重难点==</p><ol><li><p>使用Entry 中的属性作为查询参数，多个参数，用 ， 隔开 映射到SQL 语句上是用 and 进行关联的</p><ol><li>filter()</li></ol></li><li><p>通过 <a href="https://docs.djangoproject.com/en/2.2/ref/models/querysets/#id4" target="_blank" rel="noopener">Field Lookup</a>(查询表达式)完成复杂条件查询（这里有点像 QueryDSL，各种方法，但是按照SQL的思维来就可以了，只不过稍微要注意用法，直接去官网查询即可）</p><p>​    查询表达式：每个查询表达式都是一个独立的查询条件，可以用在所有查询条件的位置处</p><ol><li><p>__exact：精确查询，等值判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter(id__exact=<span class="number">1</span>)</span><br><span class="line">select * <span class="keyword">from</span> user where id = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>__contains()：筛选出属性中包含指定关键字的记录（模糊查询）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter(name__contains=<span class="string">'jun'</span>)</span><br><span class="line">select * <span class="keyword">from</span> user where name like <span class="string">'%jun%'</span></span><br></pre></td></tr></table></figure></li><li><p>__lt：筛选出属性值小于指定值的记录</p></li><li><p>__lte：筛选出属性值小于等于指定值的记录</p></li><li><p>__gt：筛选出属性值大于指定值的记录</p></li><li><p>__gte：筛选出属性值大于等于指定值记录</p></li><li><p>__startswith:</p></li><li><p>__endswith:</p></li></ol></li></ol></li><li><p>查询只返回一条数据</p><p>Entry.objects.get(查询条件/表达式)</p></li></ol><h4 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3. 修改数据"></a>3. 修改数据</h4><ol><li><p>修改单个数据（这里可以类比 JAP里的对单个实体进行操作，先拿再改最后存）</p><pre><code>1. 通过　get() 得到要修改的实体对象     2. 通过实体对象的属性修改属性值          3. 再通过 实体对象的save() 保存回数据库</code></pre></li><li><p>批量修改数据（这个意义不是太大）</p><p>Entry.objects.all().update(属性=值，属性=值)</p><p>update  user set 属性=值, 属性=值 </p></li></ol><h4 id="4-删除数据"><a href="#4-删除数据" class="headerlink" title="4. 删除数据"></a>4. 删除数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.objects.get(id=<span class="number">1</span>).delete()</span><br></pre></td></tr></table></figure><h2 id="八、安全"><a href="#八、安全" class="headerlink" title="八、安全"></a>八、安全</h2><h3 id="1-CSRF-跨站处理"><a href="#1-CSRF-跨站处理" class="headerlink" title="1. CSRF 跨站处理"></a>1. CSRF 跨站处理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-入门&quot;&gt;&lt;a href=&quot;#Django-入门&quot; class=&quot;headerlink&quot; title=&quot;Django 入门&quot;&gt;&lt;/a&gt;Django 入门&lt;/h1&gt;&lt;p&gt;这篇文章仅仅我初步了解　Django 的入门笔记&lt;/p&gt;
&lt;h2 id=&quot;一、-Dj
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.wangjunjun.club/categories/python/"/>
    
      <category term="Django" scheme="http://www.wangjunjun.club/categories/python/Django/"/>
    
    
      <category term="Django" scheme="http://www.wangjunjun.club/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.wangjunjun.club/2019/11/23/hello-world/"/>
    <id>http://www.wangjunjun.club/2019/11/23/hello-world/</id>
    <published>2019-11-23T03:38:32.937Z</published>
    <updated>2019-11-23T05:13:02.541Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.wangjunjun.club/categories/hexo/"/>
    
    
  </entry>
  
</feed>
