<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode 763划分字母区间</title>
    <link href="/2020/10/22/Leetcode-763%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4/"/>
    <url>/2020/10/22/Leetcode-763%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/" target="_blank" rel="noopener">763. 划分字母区间</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。</p><p>示例 1：</p><pre><code>输入：S = &quot;ababcbacadefegdehijhklij&quot;输出：[9,7,8]解释：划分结果为 &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;。每个字母最多出现在一个片段中。像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 的划分是错误的，因为划分的片段数较少。</code></pre><p>提示：</p><pre><code>S的长度在[1, 500]之间。S只包含小写字母 &#39;a&#39; 到 &#39;z&#39; 。</code></pre></blockquote><p>拿到这个题目，看到 <strong>把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段 </strong>，就想到差不多是 贪心了，和 <a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏 II</a> 类似 用一个 <code>end指针</code> 当前 解的最远 位置，并且将 把从前位置到最远位置 的所有字符 遍历，用来更新  <code>end指针</code>,来得到 <strong>字符串划分为尽可能多的片段</strong>。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h3><p>先来介绍一下我写的第一版，说真的，虽然通过了，但是我自己都觉得巨丑无比，不忍直视。</p><p>思路：每次先把当前字符的最远位置找出来，把当前字符 到 最远位置 的字符 遍历，更新最远位置，中间用了一个 <code>set</code>来优化，防止重复查找</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(String S)</span> </span>&#123;    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">int</span> n = S.length();    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        <span class="hljs-comment">// 已经 试探过的字符 集合，避免后面重复试探</span>        Set&lt;Character&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();        <span class="hljs-keyword">int</span> end = i;        <span class="hljs-keyword">char</span> ch = S.charAt(i);        set.add(ch);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;            <span class="hljs-comment">// 向后更新 边界指针</span>            <span class="hljs-keyword">if</span> (S.charAt(j) == ch) end = j;        &#125;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; end; j++) &#123;            <span class="hljs-keyword">char</span> c = S.charAt(j);            <span class="hljs-keyword">if</span> (!set.contains(c)) &#123;                set.add(c);                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j + <span class="hljs-number">1</span>; k &lt; n; k++) &#123;                    <span class="hljs-keyword">if</span> (S.charAt(k) == c) end = Math.max(end, k);                &#125;            &#125;        &#125;                res.add(end - i + <span class="hljs-number">1</span>);        i = end;    &#125;        <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h3><p>在上个版本的基础上做了点 微改动，把 <code>set</code> 换成了 <code>数组</code>，空间上确实优化了一点，时间上基本没动</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(String S)</span> </span>&#123;    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">int</span> n = S.length();    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        <span class="hljs-comment">// 已经 试探过的字符 集合，避免后面重复试探</span>        <span class="hljs-keyword">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-string">'z'</span> - <span class="hljs-string">'a'</span> + <span class="hljs-number">1</span>];        <span class="hljs-keyword">int</span> end = i;        <span class="hljs-keyword">char</span> ch = S.charAt(i);        count[ch - <span class="hljs-string">'a'</span>]++;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;            <span class="hljs-comment">// 向后更新 边界指针</span>            <span class="hljs-keyword">if</span> (S.charAt(j) == ch) end = j;        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; end; j++) &#123;            <span class="hljs-keyword">char</span> c = S.charAt(j);            <span class="hljs-keyword">if</span> (count[c - <span class="hljs-string">'a'</span>] == <span class="hljs-number">0</span>) &#123;                count[c - <span class="hljs-string">'a'</span>]++;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j + <span class="hljs-number">1</span>; k &lt; n; k++) &#123;                    <span class="hljs-keyword">if</span> (S.charAt(k) == c) &#123;                        end = Math.max(end, k);                    &#125;                &#125;            &#125;        &#125;        res.add(end - i + <span class="hljs-number">1</span>);        i = end;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="版本三"><a href="#版本三" class="headerlink" title="版本三"></a>版本三</h3><p>在 自己思考后，感觉已经到达能力的上限时候，不由的点开了 官方题解。官方的代码给我感觉是 怎么这么 短小精悍，读完才知道，先用了一次遍历记录每个字符最后出现的位置，省的像我一样，每次再找最后位置，浪费时间。</p><p>不得不说，能力还是不行，不过，经历了也就学到了这个，在后面的刷题中 或许就想到这种优化了。下面是我参考官方思路写出来的代码</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(String S)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-string">'z'</span> - <span class="hljs-string">'a'</span> + <span class="hljs-number">1</span>];        <span class="hljs-keyword">int</span> n = S.length();        <span class="hljs-comment">// 存储 每个字母最后一次出现的 下标</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) count[S.charAt(i) - <span class="hljs-string">'a'</span>] = i;        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> end = <span class="hljs-number">0</span>;        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;            end = Math.max(end, count[S.charAt(i) - <span class="hljs-string">'a'</span>]);            <span class="hljs-keyword">if</span> (i == end) &#123;                res.add(end - start + <span class="hljs-number">1</span>);                start = end + <span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> res;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[LeetCode]1221.分割平衡字符串</title>
    <link href="/2020/08/21/LeetCode-1221-%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2020/08/21/LeetCode-1221-%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="1221-分割平衡字符串"><a href="#1221-分割平衡字符串" class="headerlink" title="1221.分割平衡字符串"></a><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/" target="_blank" rel="noopener">1221.分割平衡字符串</a></h1><p>难度：简单</p><p>题目描述：</p><blockquote><p>在一个「平衡字符串」中，’L’ 和 ‘R’ 字符的数量是相同的。</p><p>给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p>返回可以通过分割得到的平衡字符串的最大数量。</p><p>示例 1：</p><blockquote><p>输入：s = “RLRRLLRLRL”<br>输出：4<br>解释：s 可以分割为 “RL”, “RRLL”, “RL”, “RL”, 每个子字符串中都包含相同数量的 ‘L’ 和 ‘R’。</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “RLLLLRRRLR”<br>输出：3<br>解释：s 可以分割为 “RL”, “LLLRRR”, “LR”, 每个子字符串中都包含相同数量的 ‘L’ 和 ‘R’。</p></blockquote><p>示例 3：</p><blockquote><p>输入：s = “LLLLRRRR”<br>输出：1<br>解释：s 只能保持原样 “LLLLRRRR”.</p></blockquote><p>提示：</p><p>1 &lt;= s.length &lt;= 1000<br>s[i] = ‘L’ 或 ‘R’<br>分割得到的每个字符串都必须是平衡字符串。</p></blockquote><p>思路/心得：</p><p>此题是 贪心算法：局部最优解 就是 整体的解，每一步的 能求解就求解</p><p>这道题目很简单，只要留意这句话 <code>&#39;L&#39; 和 &#39;R&#39; 字符的数量是相同的</code>注意 R 或 L 不需要必须是连续的</p><p>代码：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">balancedStringSplit</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> count;        <span class="hljs-keyword">int</span> n = s.length();        <span class="hljs-keyword">int</span> balance = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        <span class="hljs-keyword">char</span> ch = s.charAt(i);        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'L'</span>) balance++;        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'R'</span>) balance--;        <span class="hljs-keyword">if</span> (balance == <span class="hljs-number">0</span>) count++;        &#125;        <span class="hljs-keyword">return</span> count;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 如何配置JVM虚拟机启动参数</title>
    <link href="/2020/06/27/Idea-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEJVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/"/>
    <url>/2020/06/27/Idea-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEJVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA-如何配置JVM虚拟机启动参数"><a href="#IDEA-如何配置JVM虚拟机启动参数" class="headerlink" title="IDEA 如何配置JVM虚拟机启动参数"></a>IDEA 如何配置JVM虚拟机启动参数</h1><p>在读《深入理解Java虚拟机》中有个IDE设置JVM的启动参数（VM Arg）,小编用的IDEA不知道如何设置，所以写个博客记录一下</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/idea%20jvm%20第一步.png" srcset="/img/loading.gif" alt=""></p><p>下面的两个箭头代表两个方法，二选一即可</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/idea%20jvm%20第二步.png" srcset="/img/loading.gif" alt=""><br><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/idea%20jvm%20第三步.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 编辑器</title>
    <link href="/2020/06/17/vim-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2020/06/17/vim-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vi: Visual Interface，文本编辑器</p><p>文本：ASCII, Unicode</p><p>文本编辑种类：</p><pre><code>- 行编辑器: sed- 全屏编辑器：nano, vi</code></pre><p>Vim - Vi improved</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>打开文件：</p><p>vim [OPTION]… FILE…</p><p>​        +#: 打开文件后，直接让光标处于第#行的行首；<br>​        +/PATTERN：打开文件后，直接让光标处于第一个被PATTERN匹配到的行的行首；</p></li><li><p>vim：模式化的编辑</p><p>基本模式：</p><ul><li><p>编辑模式，命令模式</p></li><li><p>输入模式</p></li><li><p>末行模式</p><p>内置的命令行接口</p></li></ul><p>模式转换：</p><pre><code>编辑模式 --&gt; 输入模式    i: insert, 在光标所在处输入；    a: append, 在光标所在处后面输入；    o: 在当前光标所在行的下方打开一个新行；    I：在当前光标所在行的行首输入；    A：在当前光标所在行的行尾输入；    O：在当前光标所在行的上方打开一个新行；    c    C</code></pre><p>​    输入模式 —&gt; 编辑模式<br>​        ESC</p><p>​    编辑模式 —&gt; 末行模式<br>​        :</p><p>​    末行模式 —&gt; 编辑模式<br>​        ESC</p></li><li><p>关闭文件：</p><ul><li>:q 退出</li><li>:q! 强制退出，丢弃做出的修改\</li><li>:wq 保存退出</li><li>:x 保存退出</li><li>:w /PATH/TO/SOMEWHERE</li><li>ZZ: 保存退出</li></ul></li><li><p>光标跳转：</p><ul><li><p>字符间跳转：<br>h, j, k, l</p><pre><code>      h: 左      l: 右      j: 下      k: 上</code></pre><p>​         #COMMAND：跳转由#指定的个数的字符；</p></li></ul></li></ol><ul><li><p>行首行尾跳转：</p><pre><code>^: 跳转至行首的第一个非空白字符；  0: 跳转至行首；  $: 跳转至行尾；</code></pre></li><li><p>行间移动：</p><pre><code>#G：跳转至由#指定行；  G：最后一行；  1G, gg: 第一行；</code></pre></li><li><p>句间移动：</p><pre><code>)  (</code></pre></li><li><p>段落间移动：</p><pre><code>}  {</code></pre></li></ul><ol><li><p>vim的编辑命令：</p><ul><li><p>字符编辑：</p><pre><code>x: 删除光标处的字符；  #x: 删除光标处起始的#个字符；</code></pre><p>xp: 交换光标所在处的字符及其后面字符的位置；</p></li><li><p>替换命令(r, replace)</p><pre><code>r: 替换光标所在处的字符</code></pre></li><li><p>删除命令：</p><pre><code>d: 删除命令，可结合光标跳转字符，实现范围删除；      d$:      d^:      d0:</code></pre><p>​        dw<br>​        de<br>​        db</p><p>​        #COMMAND</p><p>​        dd: 删除光标所在的行；<br>​        #dd：多行删除；</p></li></ul></li></ol><ul><li>粘贴命令(p, put, paste)：<pre><code>p：缓冲区存的如果为整行，则粘贴当前光标所在行的下方；否则，则粘贴至当前光标所在处的后面；  P：缓冲区存的如果为整行，则粘贴当前光标所在行的上方；否则，则粘贴至当前光标所在处的前面；</code></pre></li></ul><ul><li><p>复制命令(y, yank)：</p><pre><code>y: 复制，工作行为相似于d命令；      y$      y0      y^</code></pre><p>​        ye<br>​        yw<br>​        yb</p><p>​        #COMMAND</p><p>​        yy：复制行<br>​        #yy: 复制多行；</p></li></ul><ol><li><p>改变命令(c, change)</p><pre><code>c: 修改       编辑模式 --&gt; 输入模式</code></pre><p>​    c$<br>​    c^<br>​    c0</p><p>​    cb<br>​    ce<br>​    cw</p><p>​    #COMMAND    </p><p>​    cc：删除并输入新内容<br>​    #cc:</p></li></ol><ol><li><p>其它编辑操作</p><ul><li><p>可视化模式：</p><pre><code>v: 按字符选定  V：按行行定</code></pre></li><li><p>Note：经常结合编辑命令；</p><pre><code>    d, c, y</code></pre></li><li><p>撤消此前的编辑：</p><pre><code>u(undo)：撤消此前的操作；      #u: 撤消指定次数的操作；</code></pre></li><li><p>撤消此前的撤消：</p><pre><code>Ctrl+r</code></pre></li><li><p>重复前一个编辑操作：</p><pre><code>.</code></pre></li><li><p>翻屏操作：</p><pre><code>Ctrl+f: 向文件尾部翻一屏；  Ctrl+b: 向文件首部翻一屏；</code></pre><p>​    Ctrl+d: 向文件尾部翻半屏；<br>​    Ctrl+u：向文件首部翻半屏；</p></li></ul></li></ol><ol><li><p>vim自带的练习教程：</p><pre><code class="hljs shell">vimtutor</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 权限管理</title>
    <link href="/2020/06/11/Linux-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/2020/06/11/Linux-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux权限管理"><a href="#Linux权限管理" class="headerlink" title="Linux权限管理"></a>Linux权限管理</h1><h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><p>   文件的权限主要针对三类对象进行定义：<br>                owner: 属主, u<br>                group: 属组, g<br>                other: 其他, o</p><p>每个文件针对每类访问者都定义了三种权限：<br>        r: readable<br>        w: writable<br>        x: excute</p><pre><code class="hljs shell">-rwxrw-r--  1 user  user   665 6月  11 23:33 f1 |u    | g  | o</code></pre><pre><code class="hljs txt">文件：        r: 可使用文件查看类工具获取其内容；        w: 可修改其内容；        x: 可以把此文件提请内核启动为一个进程；目录：        r: 可以使用ls查看此目录中文件列表；        w: 可在此目录中创建文件，也可删除此目录中的文件；        x: 可以使用ls -l查看此目录中文件列表，可以cd进入此目录；</code></pre><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>修改文件权限：chmod<br>                chmod [OPTION]… OCTAL-MODE FILE…</p><pre><code class="hljs txt">chmod [OPTION]... MODE[,MODE]... FILE...       MODE:       修改一类用户的所有权限：       u&#x3D;       g&#x3D;       o&#x3D;       ug&#x3D;       a&#x3D;       u&#x3D;,g&#x3D;修改一类用户某位或某些位权限u+u-    -R: 递归修改权限chmod [OPTION]... --reference&#x3D;RFILE FILE...参考RFILE文件的权限，将FILE的修改为同RFILE；</code></pre><ul><li><p>模式法</p><p>chmod who opt per file</p><p>who:    u    g    o    a</p><p>opt:     + - =</p><p>per: r w x </p></li><li><p>数字法 </p><p>chmod 数字 file</p></li></ul><div class="table-container"><table><thead><tr><th>权限</th><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>—-</td><td>000</td><td>0</td></tr><tr><td>—x</td><td>001</td><td>1</td></tr><tr><td>-w-</td><td>010</td><td>2</td></tr><tr><td>-wx</td><td>011</td><td>3</td></tr><tr><td>r—</td><td>100</td><td>4</td></tr><tr><td>r-x</td><td>101</td><td>5</td></tr><tr><td>rw-</td><td>110</td><td>6</td></tr><tr><td>rwx</td><td>111</td><td>7</td></tr></tbody></table></div><h2 id="修改文件所属者和组"><a href="#修改文件所属者和组" class="headerlink" title="修改文件所属者和组"></a>修改文件所属者和组</h2><pre><code class="hljs txt">修改文件的属主和属组：        仅root可用；        修改文件的属主：chown                chown [OPTION]... [OWNER][:[GROUP]] FILE...                        用法：                                OWNER                                OWNER:GROUP                                :GROUP                                Note: 命令中的冒号可用.替换；                        -R: 递归                chown [OPTION]... --reference&#x3D;RFILE FILE...        修改文件的属组：chgrp                chgrp [OPTION]... GROUP FILE...        chgrp [OPTION]... --reference&#x3D;RFILE FILE...</code></pre><h1 id="权限掩码"><a href="#权限掩码" class="headerlink" title="权限掩码"></a>权限掩码</h1><p>文件或目录创建时的遮罩码：umask<br>        FILE: 666-umask<br>                Note: 如果某类的用户的权限减得的结果中存在x权限，则将其权限+1<br>        DIR: 777-umask</p><p><strong>新建的权限=666 - umask</strong></p><pre><code class="hljs shell">umask: 查看umask #: 设定umask -S  # 查看创建后权限</code></pre><p>命令总结：chmod, chown, chgrp, umask</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre><code class="hljs txt">文件管理、用户管理、权限管理、bash的基础特性        文件管理：cp, mv, rm        用户管理：                useradd, usermod, chsh, chfn, chage, userdel                groupad, groupmod, groupdel                passwd, gpasswd, pwck                id, finger, who, whoami, w                su                配置文件：&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group, &#x2F;etc&#x2F;gshadow        权限管理：                perm: mode(rwxrwxrwx), ownership                        chmod                        chown                        chgrp                                -R, --reference&#x3D;RFILE                        FILE: 666-umask                        DIR: 777-umask                        umask [UMASK]</code></pre>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>权限管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 部署Jenkins自动化部署</title>
    <link href="/2020/06/10/Docker-%E9%83%A8%E7%BD%B2Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/06/10/Docker-%E9%83%A8%E7%BD%B2Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-部署Jenkins自动化部署"><a href="#Docker-部署Jenkins自动化部署" class="headerlink" title="Docker 部署Jenkins自动化部署"></a>Docker 部署Jenkins自动化部署</h1><p>一直都在因为打包，重新部署烦恼，今天我试着利用docker搭建Jenkins实现自动化部署。</p><ol><li><p>获取并启动 Jenkins镜像</p><pre><code class="hljs shell">docker run -d -p 8081:8080 -v /opt/jenkins:/var/jenkins_home --name jenkins --restart=always jenkins:2.46.1<span class="hljs-meta">#</span><span class="bash"> 这个权限别忘了，不是在自己的目录下的话，就要给权限，不然权限错误</span>sudo chown -R 1000 /opt/jenkins</code></pre></li><li><p>通过Jenkins日志 查看初始化密码</p><pre><code class="hljs shell">docker logs -f jenkins</code></pre><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%A5%E5%BF%97.png" srcset="/img/loading.gif" alt=""></p></li><li><p>浏览器登录 Jenkins</p><p>localhost:8081</p><p>输入 上面的初始化密码，登录</p></li></ol><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ul><li>Jenkins的版本太高导致插件安装失败，降到 2.150.1 可以了</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软链接和硬链接</title>
    <link href="/2020/06/07/%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/"/>
    <url>/2020/06/07/%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux中的软链接和硬链接"><a href="#Linux中的软链接和硬链接" class="headerlink" title="Linux中的软链接和硬链接"></a>Linux中的软链接和硬链接</h1><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E7%A1%AC%E9%93%BE%E6%8E%A5.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软/硬链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-数据链路层小结</title>
    <link href="/2020/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <url>/2020/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>title: 计算机网络-数据链路层小结<br>date: 2020-02-22 13:35:15<br>tags:</p><ul><li>数据链路层<br>categories:</li><li>计算机网络</li></ul><p>[TOC]</p><h1 id="计算机网络-数据链路层"><a href="#计算机网络-数据链路层" class="headerlink" title="计算机网络 数据链路层"></a>计算机网络 数据链路层</h1><h2 id="数据链路层基本概念及基本问题"><a href="#数据链路层基本概念及基本问题" class="headerlink" title="数据链路层基本概念及基本问题"></a>数据链路层基本概念及基本问题</h2><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/数据发送模型.png" srcset="/img/loading.gif" alt="数据发送模型"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="链路（link）"><a href="#链路（link）" class="headerlink" title="链路（link）"></a>链路（link）</h4><p>链路是一条点到点的物理线路段，中间没有其他点，一条链路只是一条通路的一个组成部分。</p><h4 id="数据链路（data-link）"><a href="#数据链路（data-link）" class="headerlink" title="数据链路（data link）"></a>数据链路（data link）</h4><p>除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了<code>数据链路</code>。</p><ol><li>目前最常用的方法是使用适配器（网卡）来实现这些协议的硬件和软件。</li><li>一般的适配器都包括了数据链路层和物理层这两层的功能。</li></ol><h4 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h4><p>数据链路层传送的是<code>帧</code></p><p>在两个对等的数据链路层之间画出一个数字管道，而在这条数字管道上<code>传输的数据单位是帧</code>。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/数据链路层 帧.png" srcset="/img/loading.gif" alt="数据链路层 帧"></p><h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p>封装成帧就是在一段<code>数据</code>的<code>前后分别添加首部和尾部</code>，然后就构成了一个帧。确定帧的界限。</p><p>首部和尾部的一个重要作用就是进行<code>帧定界</code></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/封装成帧.png" srcset="/img/loading.gif" alt="封装成帧"></p><p>MTU 最大传输单元  帧的数据部分最大为 1500字节</p><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>如果传输的数据是ASCII码中“可打印字符（共95个）”集时，是一个正常的帧，但是当数据中出现帧尾的时候，就会错误的认为一个帧的范围，数据<code>不是仅由“可打印字符”组成时，就会出问题</code>，如图：</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/透明传输.png" srcset="/img/loading.gif" alt="透明传输"></p><p><code>解决方案</code>： 使用<code>转义字符</code>的字节填充方法</p><p><strong><em>个人认为这种解决方案C语言中的转义字符思想一样，所以类比理解就好了</em></strong></p><ul><li><p>发送端</p><p>​    发送端的数据链路层在数据中出现控制字符”SOH“ 或 ”EOT“ 的前面插入一个转义字符”ESC“（十六进制编码 1B）</p></li><li><p>接收端</p><p>​    <code>字节填充</code>（byte stuffing）或<code>字符填充</code>（character stuffing）接收端的数据链路层在<code>将数据送往网络层之前</code>删除插入的转义字符。</p></li></ul><p>如果转义字符也出现在数据中，就在转义字符前再插入一个转义字符</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/透明传输 转义字符法.png" srcset="/img/loading.gif" alt="透明传输 转义字符 字节填充方法"></p><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><p>传输过程中可能会出现产生 比特差错：<code>1 可能变成0 ，0可能变成1</code></p><p>在一段时间中，传输错误的比特占所有传输比特总数的比率称为 <code>误码率（BER Bit Error Rate）</code></p><p><code>为了保证数据传输的可靠性</code>，在计算机网络传输数据时，必须才用各种差错检查措施。</p><h5 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h5><ol><li><p>循环冗余检验 CRC</p><p>在数据链路层 传送的帧中，广泛使用了循环冗余检验 CRC的方法。</p><p>在发送端，先把数据划分为组，假定每组 k 个比特。</p><blockquote><p>假设带待传送的一组数据 M=101001（现在k=6）。我们在M的后面再添加供差错检测用的 n 位 冗余码一起发送。</p></blockquote><p>冗余码的计算</p><p>用二进制的模 2 运算进行2^n ,这相当于在M后面添加n个0。</p><p>得到的（k + n）位的数除以是先选定好的长度为（n + 1）位的除数 P，得出商是Q而余数是R，余数R比除数P少一位，即 R是 n 位。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/循环冗余检验的计算过程.png" srcset="/img/loading.gif" alt="循环冗余检验的计算过程"></p></li><li><p>帧检验序列 FCS</p><p>在数据后面添加上的冗余码称为 <code>帧检验序列</code> FCS （frame check sequence）</p><p>循环冗余检验 CRC 和 帧检验序列 FCS 不等同。</p><ul><li>CRS是一种常用的检错方法，而FCS是添加在数据后面的冗余码</li><li>FCS 可以用CRC这种方法得出，但 CRC 并非用来获得FCS的唯一方法</li></ul></li></ol><p>小结：CRC差错检测技术</p><p>仅用循环冗余检验 CRC差错检测技术只能做到<code>无差错接收</code>（accept）</p><ul><li>无差错接收是指 <code>凡是接受的帧（即不包括丢弃的帧），我们都能非常接近于1的概率认为这些帧在传输过程中没有产生差错</code>。换句话就是 <code>凡是接收端数据链路层接受的帧都没有传输差错（有差错的帧就丢弃不接受）</code></li></ul><p>CRC是一种 <code>没有比特差错</code>，而不是<code>没有传输差错</code>的检测机制</p><p>要做到 <code>可靠传输</code> 就必须再加上 <code>确认</code>和<code>重传</code>机制</p><h2 id="两种情况下的数据链路层"><a href="#两种情况下的数据链路层" class="headerlink" title="两种情况下的数据链路层"></a>两种情况下的数据链路层</h2><h3 id="使用点对点（PPP）信道的数据链路层"><a href="#使用点对点（PPP）信道的数据链路层" class="headerlink" title="使用点对点（PPP）信道的数据链路层"></a>使用点对点（PPP）信道的数据链路层</h3><h3 id="使用广播信道（CSMA-CD）的数据链路层"><a href="#使用广播信道（CSMA-CD）的数据链路层" class="headerlink" title="使用广播信道（CSMA/CD）的数据链路层"></a>使用广播信道（CSMA/CD）的数据链路层</h3><p>CSMA/CD （Carrier Sense Multiple Access with Collision Detection）</p><ul><li><p>多点接入 表示许多计算机以<code>多点接入</code>的方式连接在<code>一根总线</code>上。</p></li><li><p>载波监听 是指<code>每一个站在发送数据之前</code>先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不发送数据，以免发送碰撞</p><p>载波监听 就是用电子技术检测总线上有没有其他计算机发送数据信号</p></li></ul><h2 id="以太局域网"><a href="#以太局域网" class="headerlink" title="以太局域网"></a>以太局域网</h2><h3 id="MAC的硬件地址（MAC地址）"><a href="#MAC的硬件地址（MAC地址）" class="headerlink" title="MAC的硬件地址（MAC地址）"></a>MAC的硬件地址（MAC地址）</h3><p>在局域网中，硬件地址又称物理地址（或MAC地址）</p><blockquote><p>​    802标准中 地址严格地将 每个站的名字（或标识符）,<code>IEEE 的注册管理机构</code> RA负责向 厂家 分配<code>地址段的前三个字节（高位24位）</code>，地址字段中的<code>后三个字节（低位24位）</code>由厂家自行指派，称为<code>拓展标识</code>，必须保证生产出的适配器没有重复地址。</p><p>​    一个地址块可以生成2^24个不同的地址，这种48位地址称为<code>MAC-48</code>，通用名称<code>EUI-48</code>。</p><p>​    <code>MAC地址</code>，实际上就是适配器地址或适配器标识符EUI-48。</p></blockquote><h2 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h2><h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux 文件管理</title>
    <link href="/2020/06/05/linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2020/06/05/linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-文件管理"><a href="#Linux-文件管理" class="headerlink" title="Linux 文件管理"></a>Linux 文件管理</h1><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/Linux%E7%9B%AE%E5%BD%95.png" srcset="/img/loading.gif" alt="Linux文件目录结构"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code远程开发工具</title>
    <link href="/2020/06/02/VS-Code%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/06/02/VS-Code%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-远程开发工具"><a href="#VS-Code-远程开发工具" class="headerlink" title="VS Code 远程开发工具"></a>VS Code 远程开发工具</h1><p>最看了一篇<a href="https://mp.weixin.qq.com/s/xwfWJolHsiSBGaJDlgD8Kw" target="_blank" rel="noopener">微信文章</a>，讲的是如何用VS Code进行远程开发，刚巧我租了一台云服务器。今天就介绍给大家，废话不说，淦！</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p><strong>Visual Studio Code</strong>（简称<strong>VS Code</strong>）是一个由微软开发，同时支持Windows 、 Linux和macOS等操作系统且开放源代码的代码编辑器，它支持测试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全（类似于 IntelliSense）、代码片段和代码重构等。该编辑器支持用户个性化配置，例如改变主题颜色、键盘快捷方式等各种属性和参数，同时还在编辑器中内置了扩展程序管理的功能 - 引用维基百科</p></blockquote><p>VS Code 最迷人的地方在于强大的插件支持，基本上啥功能的插件都可以找到。</p><p>VS Code远程开发的工作原理，大概是这样的：</p><p><img src="/media/jun/programming/VS Code远程原理.png" srcset="/img/loading.gif" alt=""></p><p>下面讲一下如何进行配置，我的local OS是Ubuntu，Remote OS是CentOS 7 云主机。</p><h2 id="远程开发配置"><a href="#远程开发配置" class="headerlink" title="远程开发配置"></a>远程开发配置</h2><h3 id="配置SSH环境变量"><a href="#配置SSH环境变量" class="headerlink" title="配置SSH环境变量"></a>配置SSH环境变量</h3><p>远程开发本地的VS Code用的SSH协议和远程服务器通信，所以先配置SSH环境，因为GIt自带SSH客户端，所以先把 Git安装一下。</p><p><a href="https://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">可以参考这里 Git 安装配置</a></p><h3 id="VS-Code安装远程开发插件"><a href="#VS-Code安装远程开发插件" class="headerlink" title="VS Code安装远程开发插件"></a>VS Code安装远程开发插件</h3><p>连接远程主机，需要在VS Code安装远程开发插件：</p><p><img src="/media/jun/programming/VS Code远程插件.png" srcset="/img/loading.gif" alt=""></p><ul><li>Remote - SSH：通过SSH连接虚拟或者 Linux主机</li><li>Remote - Containers：连接Docker开发容器</li><li>Remote - WSL：裂解Windows Subsystem for Linux（Linux子系统）</li></ul><p>因为我连接的是Linux主机，只需要安装Remote - SSH插件即可。</p><h3 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><ol><li><p>首先点侧边栏的「远程资源管理器」之后点击「设置按钮」，进入远程机器配置界面。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20%E7%AC%AC%E4%B8%80%E6%AD%A5.png" srcset="/img/loading.gif" alt=""></p></li></ol><ol><li><p>修改 ssh配置文件，用来登录远程主机，</p><ol><li>Linux版本</li></ol><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" srcset="/img/loading.gif" alt=""></p><p>​    2. Windows版本</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20%E7%AC%AC%E4%B8%89%E6%AD%A5.png" srcset="/img/loading.gif" alt=""></p></li><li><p>点击连接，登录远程服务器，需要数据远程主机密码，输入确认即可。第一次连接会做初始化工作，可能会慢一点，耐心等等。</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%AC%AC%E5%9B%9B%E6%AD%A5.png" srcset="/img/loading.gif" alt=""></p></li><li><p>登录成功，即可像操作本地环境一样，在VS Code客户端操作远程云主机上的文件。注意，<strong>下图中的「打开文件夹」已经是远端机器上的目录结构了。</strong></p></li><li><p>远程VS Code 安装插件。安装的插件是在云服务器的VS Code上，对本机的VS Code没有影响，插件在远端提供功能，比如代码审查、自动补齐等等，而这所有的一切就像在本地操作一样，对文件的更改也是直接操作的云主机上的文件，丝滑连接。</p></li><li><p>代码编辑与远程终端调试。打开文件编辑的是云服务器的文件，同时可以打开云服务终端，直接在终端操作编译或者查看云服务器信息。</p></li></ol><h2 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h2><p>   按照上面的配置步骤，每次连接到远程服务器，都需要输入服务器登录密码很麻烦，可以配置SSH免密登录，免去每次输入密码的烦恼，具体操作步骤如下：</p><ol><li><p>打开终端生成密钥对</p><pre><code class="hljs shell">ssh-keygen -t rsa</code></pre></li><li><p>打开生成的秘钥保存路径，拷贝 <code>id_rsa.pub</code> 内容，添加到到云服务器的 <code>~/.ssh/authorized_keys</code> 文件后面。</p><p>OK了！！！</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>好东西</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux命令笔记</title>
    <link href="/2020/06/02/linux%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/02/linux%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="在Linux上-常用命令笔记"><a href="#在Linux上-常用命令笔记" class="headerlink" title="在Linux上 常用命令笔记"></a>在Linux上 常用命令笔记</h1><p>这里的命令都是在centos 7的环境上测试的</p><p>命令的优先级</p><p>alias  &gt; 内部命令 &gt; hash表（记录外部命令的路径） &gt; $PATH  &gt; 找不到命令</p><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置历史格式 加时间</span>HISTTIMEFORMAT="%F %T "</code></pre><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/history.png" srcset="/img/loading.gif" alt=""></p><h3 id="求帮助"><a href="#求帮助" class="headerlink" title="求帮助"></a>求帮助</h3><ul><li><p>简单查看</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看命令的用法</span>whatis lsls (1)               - list directory contentsman -f ls<span class="hljs-meta">#</span><span class="bash"> 如果新装的没有，新建数据库</span>mandb</code></pre></li><li><p>详细查看</p><pre><code class="hljs shell">help helpman help</code></pre></li></ul><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 给常用长命令起别名格式: <span class="hljs-built_in">alias</span> aplianame=cmd</span>alias cdnet='cd /etc/sysconfig/network-scripts/'<span class="hljs-meta">#</span><span class="bash"> 起别名 不会保存，一旦退出就失效了，写入 文件中，使开机后命令从文件中读到内存中</span><span class="hljs-meta">#</span><span class="bash"> 写入的文件目录：/root/.bashrc</span><span class="hljs-meta">#</span><span class="bash"> 比如添加 ,添加后不会立即生效 </span>alias ll='ls -a'<span class="hljs-meta">#</span><span class="bash"> 添加后不会立即生效 ,二选一将文件写入内存中，就生效了</span>source .bashrc. .bashrc<span class="hljs-meta">#</span><span class="bash"> 上面该的文件，仅仅对当前用户有效，想要对所有用户有效，设置 /etc/bashrc，生效同理</span></code></pre><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 系统时间</span>date<span class="hljs-meta">#</span><span class="bash"> 时区</span> /etc/localtime<span class="hljs-meta"> #</span><span class="bash"> 日历</span> cal</code></pre><h3 id="远程桌面共享"><a href="#远程桌面共享" class="headerlink" title="远程桌面共享"></a>远程桌面共享</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1. 终端断网</span>screen screen -ls# 显示所有会话screen -r [session] # 恢复会话<span class="hljs-meta">#</span><span class="bash"> 2.请求协助</span>screen -S help  # -S 起名screen -x help  # -x 加入<span class="hljs-meta">#</span><span class="bash"> 退出</span>exit</code></pre><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/screen.png" srcset="/img/loading.gif" alt=""></p><h3 id="查看所有用户执行命令"><a href="#查看所有用户执行命令" class="headerlink" title="查看所有用户执行命令"></a>查看所有用户执行命令</h3><pre><code class="hljs shell">w</code></pre><h3 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h3><pre><code class="hljs shell">init 3 # 纯命令init 5 # 切换到桌面</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看登录者</span>whoami<span class="hljs-meta">#</span><span class="bash"> 用户是不是管理员 0-是 非0-不是</span>id -u<span class="hljs-meta">#</span><span class="bash"> 查看系统版本</span>cat /etc/centos-release<span class="hljs-meta">#</span><span class="bash"> 查看Linux 内核版本</span>uname -r<span class="hljs-meta">#</span><span class="bash"> 查看 cpu信息</span>lscpu <span class="hljs-meta">#</span><span class="bash"> 查看内存大小</span>free -h<span class="hljs-meta">#</span><span class="bash"> 查看硬盘大小</span>lsblk<span class="hljs-meta">#</span><span class="bash"> 查看可用的shell类型</span>cat /etc/shells <span class="hljs-meta">#</span><span class="bash"> 查看使用的哪种shell 打印用的shell类型</span>echo $SHELL<span class="hljs-meta">#</span><span class="bash"> 查看主机名字</span>hostname<span class="hljs-meta">#</span><span class="bash"> 修改提示符 样式</span>touch env.shvim /etc/profile.d/env.shPS1="\[\e[1;33m\][\u@\h \w]\\$\[\e[0m\]"echo $PS1 # 查看<span class="hljs-meta">#</span><span class="bash"> 登录后提示信息修改 可以进行修改提示信息</span>/etc/motd</code></pre>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 部署ngxin镜像启动失败 外加一些常用操作</title>
    <link href="/2020/05/26/docker-%E9%83%A8%E7%BD%B2ngxin%E9%95%9C%E5%83%8F%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5-%E5%A4%96%E5%8A%A0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/26/docker-%E9%83%A8%E7%BD%B2ngxin%E9%95%9C%E5%83%8F%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5-%E5%A4%96%E5%8A%A0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-部署ngxin镜像启动失败-外加一些常用操作"><a href="#docker-部署ngxin镜像启动失败-外加一些常用操作" class="headerlink" title="docker 部署ngxin镜像启动失败 外加一些常用操作"></a>docker 部署ngxin镜像启动失败 外加一些常用操作</h1><p>今天在docker里部署nginx遇到一个坑,如下:<br> [emerg] “user” directive is not allowed here in /etc/nginx/conf.d/nginx.conf:2</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 直接运行nginx 镜像</span>docker run -d -p 80:80 --name nginx_1 \-v /opt/nginx/project:/usr/share/nginx/html \-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \-v /opt/nginx/logs:/var/log/nginx \-v /opt/nginx/cache:/var/cache/nginx/ \--privileged=true nginx<span class="hljs-meta">#</span><span class="bash"> 查看镜像,结果镜像没有起来</span>docker ps<span class="hljs-meta">#</span><span class="bash"> 查看日志</span>docker logs 126d58471a08<span class="hljs-meta">#</span><span class="bash"> 错误结果说是 nginx.conf 的错误</span>[emerg] "user" directive is not allowed here in /etc/nginx/conf.d/nginx.conf:2</code></pre><p>解决方法:<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 先跑一个</span>docker run --name nginx_2 -d nginx<span class="hljs-meta">#</span><span class="bash"> 将它里的配置文件复制到想要映射的位置</span>docker cp 126d58471a08:/etc/nginx/nginx.conf /opt/nginx/conf/<span class="hljs-meta">#</span><span class="bash"> 删掉之前的nginx 镜像,重新创建</span>docker run -d -p 80:80 --name nginx_1 \-v /opt/nginx/project:/usr/share/nginx/html \-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \-v /opt/nginx/logs:/var/log/nginx \-v /opt/nginx/cache:/var/cache/nginx/ \--privileged=true nginx</code></pre><br>我这里有个想法,就不实验了,复制好了配置文件,直接启动之前的没有起来的镜像,看看是不是也可以,这样就省的重新 删除创建了,感兴趣的小伙伴可以试试.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到此为止镜像已经成功起来,下面记录一些常用操作<br><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入系统</span>docker exec -it 126d58471a08 /bin/bash<span class="hljs-meta">#</span><span class="bash"> 检查配置⽂件</span>nginx -t<span class="hljs-meta">#</span><span class="bash"> 重新载⼊配置⽂件</span>nginx -s reload<span class="hljs-meta">#</span><span class="bash"> 重启 Nginx</span>nginx -s reopen <span class="hljs-meta">#</span><span class="bash"> 停⽌ Nginx</span>nginx -s stop</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex 布局</title>
    <link href="/2020/05/25/flex-%E5%B8%83%E5%B1%80/"/>
    <url>/2020/05/25/flex-%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>Flex 布局</p><p>最近接触了 Flex布局，话不多说，干！</p><p>先说说Flex香在哪里，之前都用 float、position、display的各种迫害，Flex布局一个就可以搞定了</p><p><strong>注意： flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p><h2 id="简单介绍-Flex概念"><a href="#简单介绍-Flex概念" class="headerlink" title="简单介绍 Flex概念"></a>简单介绍 Flex概念</h2><p><img src="https://i.loli.net/2020/05/26/nAqjuwo1byP3XdY.png" srcset="/img/loading.gif" alt="下载.png"></p><ul><li>轴：Flex 容器默认有两条轴，水平主轴（main axis）和垂直的交叉轴（cross axis）,当然这个并不是绝对的，好比直角坐标系的 x ,y 轴一样 地位相同可以互换。</li><li>flex item：容器中的每个单元块被称为 flex item，每个 item占用的主轴空间叫做（main size）,占据交叉轴的空间叫做（cross size）</li></ul><p>注意：还是说明一下，水平和垂直 只是相对的，可以互换，主要是看怎么调整的结果</p><h3 id="Flex-容器"><a href="#Flex-容器" class="headerlink" title="Flex 容器"></a>Flex 容器</h3><p>Flex布局的前提是先确定一个容器，可以类比一个房子，房子里的 item 都可以使用 flex 进行布局了。</p><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">display</span>: flex | inline-flex;&#125;</code></pre><ul><li>flex 是好比 div 的块元素</li><li>inline-flex 好比 span 的行内元素</li></ul><p>选好了 flex 容器，下面介绍一下容器可以设置的属性</p><ol><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ol><h4 id="1-flex-direction：决定主轴的方向-即项目的排列方向"><a href="#1-flex-direction：决定主轴的方向-即项目的排列方向" class="headerlink" title="1.flex-direction：决定主轴的方向(即项目的排列方向)"></a>1.flex-direction：决定主轴的方向(即项目的排列方向)</h4><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">flex-direction</span>: row | row-reverse | column | column-reverse;&#125;</code></pre><ul><li>默认值：row  主轴为水平方向，起点在左端</li><li>row-reverse：主轴为水平方向，起点在右端</li><li>column：主轴为垂直方向，起点在上沿</li><li>column-reverse：主轴为垂直方向，起点在下沿</li></ul><h4 id="2-flex-wrap-决定容器内项目是否可换行"><a href="#2-flex-wrap-决定容器内项目是否可换行" class="headerlink" title="2. flex-wrap: 决定容器内项目是否可换行"></a>2. flex-wrap: 决定容器内项目是否可换行</h4><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;&#125;</code></pre><ul><li>默认值：nowrap 不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整而并不会挤到下一行。</li><li>wrap：项目主轴总尺寸超出容器时换行，第一行在上方</li><li>wrap-reverse：换行，第一行在下方</li></ul><h4 id="3-flex-flow-flex-direction-和-flex-wrap-的简写形式"><a href="#3-flex-flow-flex-direction-和-flex-wrap-的简写形式" class="headerlink" title="3. flex-flow: flex-direction 和 flex-wrap 的简写形式"></a>3. flex-flow: flex-direction 和 flex-wrap 的简写形式</h4><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125;</code></pre><h4 id="4-justify-content：定义了项目在-主轴-的对齐方式"><a href="#4-justify-content：定义了项目在-主轴-的对齐方式" class="headerlink" title="4. justify-content：定义了项目在 主轴 的对齐方式"></a>4. justify-content：定义了项目在 <strong><em>主轴</em></strong> 的对齐方式</h4><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;&#125;</code></pre><ul><li>默认值: flex-start 左对齐</li><li>flex-end：右对齐</li><li>center：居中 </li><li>space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙</li><li>space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍</li></ul><h4 id="5-align-items-定义了项目在交叉轴上的对齐方式"><a href="#5-align-items-定义了项目在交叉轴上的对齐方式" class="headerlink" title="5. align-items: 定义了项目在交叉轴上的对齐方式"></a>5. align-items: 定义了项目在交叉轴上的对齐方式</h4><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;&#125;</code></pre><ul><li>默认值为 stretch 即如果项目未设置高度或者设为 auto，将占满整个容器的高度。</li><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center：交叉轴的中点对齐</li><li>baseline: 项目的第一行文字的基线对齐</li></ul><h4 id="6-align-content-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用"><a href="#6-align-content-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用" class="headerlink" title="6. align-content: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用"></a><strong>6. align-content: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</strong></h4><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;&#125;</code></pre><h3 id="Flex-Item-属性"><a href="#Flex-Item-属性" class="headerlink" title="Flex Item 属性"></a>Flex Item 属性</h3><p>flex item 有六种属性</p><ol><li>order</li><li>flex-basis</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ol><h4 id="1-order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0"><a href="#1-order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0" class="headerlink" title="1. order: 定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0"></a><strong>1. order: 定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0</strong></h4><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">order</span>: &lt;integer&gt;;&#125;</code></pre><h4 id="2-flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间"><a href="#2-flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间" class="headerlink" title="2. flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间"></a><strong>2. flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</strong></h4><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-basis</span>: &lt;length&gt; | auto;&#125;</code></pre><ul><li>默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值。</li><li><strong>当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</strong><ul><li>当 flex-basis 值为 0 % 时，是把该项目视为零尺寸的，故即使声明该尺寸为 140px，也并没有什么用。</li><li>当 flex-basis 值为 auto 时，则跟根据尺寸的设定值(假如为 100px)，则这 100px 不会纳入剩余空间。</li></ul></li></ul><h4 id="3-flex-grow-定义项目的放大比例"><a href="#3-flex-grow-定义项目的放大比例" class="headerlink" title="3. flex-grow: 定义项目的放大比例"></a>3<strong>. flex-grow: 定义项目的放大比例</strong></h4><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-grow</span>: &lt;number&gt;;&#125;</code></pre><h4 id="4-flex-shrink-定义了项目的缩小比例"><a href="#4-flex-shrink-定义了项目的缩小比例" class="headerlink" title="4. flex-shrink: 定义了项目的缩小比例"></a><strong>4. flex-shrink: 定义了项目的缩小比例</strong></h4><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-shrink</span>: &lt;number&gt;;&#125;</code></pre><h4 id="5-flex-flex-grow-flex-shrink-和-flex-basis的简写"><a href="#5-flex-flex-grow-flex-shrink-和-flex-basis的简写" class="headerlink" title="5. flex: flex-grow, flex-shrink 和 flex-basis的简写"></a><strong>5. flex: flex-grow, flex-shrink 和 flex-basis的简写</strong></h4><pre><code class="hljs css"><span class="hljs-selector-class">.item</span>&#123;    <span class="hljs-attribute">flex</span>: none | [ &lt;<span class="hljs-string">'flex-grow'</span>&gt; &lt;<span class="hljs-string">'flex-shrink'</span>&gt;? || &lt;<span class="hljs-string">'flex-basis'</span>&gt; ]&#125;</code></pre><p>flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。</p><p>有关快捷值：auto (1 1 auto) 和 none (0 0 auto)</p><p>关于 flex 取值，还有许多特殊的情况，可以按以下来进行划分：</p><ul><li>当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的：</li></ul><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;&#125;<span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">0%</span>;&#125;</code></pre><ul><li>当 flex 取值为 0 时，对应的三个值分别为 0 1 0%</li></ul><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span>;&#125;<span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">0%</span>;&#125;</code></pre><ul><li>当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）</li></ul><pre><code class="hljs css"><span class="hljs-selector-class">.item-1</span> &#123;<span class="hljs-attribute">flex</span>: <span class="hljs-number">0%</span>;&#125;<span class="hljs-selector-class">.item-1</span> &#123;    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">0%</span>;&#125;<span class="hljs-selector-class">.item-2</span> &#123;<span class="hljs-attribute">flex</span>: <span class="hljs-number">24px</span>;&#125;<span class="hljs-selector-class">.item-2</span> &#123;    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">24px</span>;&#125;</code></pre><ul><li>当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：</li></ul><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span> <span class="hljs-number">3</span>;&#125;<span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">2</span>;    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">3</span>;    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">0%</span>;&#125;</code></pre><ul><li>当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的：</li></ul><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<span class="hljs-attribute">flex</span>: <span class="hljs-number">11</span> <span class="hljs-number">32px</span>;&#125;<span class="hljs-selector-class">.item</span> &#123;    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">11</span>;    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">32px</span>;&#125;</code></pre><p>建议优先使用这个属性，而不是单独写三个分离的属性。</p><p>grow 和 shrink 是一对双胞胎，grow 表示伸张因子，shrink 表示是收缩因子。</p><p>grow 在 flex 容器下的子元素的宽度和比容器和小的时候起作用。 grow 定义了子元素的尺寸增长因子，容器中除去子元素之和剩下的尺寸会按照各个子元素的 grow 值进行平分加大各个子元素上。</p><p><a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 虚拟机 一</title>
    <link href="/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%B8%80/"/>
    <url>/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><p><a href="https://docs.oracle.com/javase/8/docs/" target="_blank" rel="noopener">认识Java</a></p><h2 id="Java内存区域-与-内存溢出-异常"><a href="#Java内存区域-与-内存溢出-异常" class="headerlink" title="Java内存区域 与 内存溢出 异常"></a>Java内存区域 与 内存溢出 异常</h2><h3 id="一、-运行时数据区域"><a href="#一、-运行时数据区域" class="headerlink" title="一、 运行时数据区域"></a>一、 运行时数据区域</h3><h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h4><blockquote><p>程序计数器（Program Counter Register）是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</p></blockquote><p>  每个线程都有独立的程序计数器，各个线程之间计数器互不影响，<code>独立存储线程私有内存</code></p><ul><li>线程正在执<code>行一个Java方法</code>，计数器记录的是<code>正在执行的虚拟机字节码指令的地址</code></li><li>如果正在执行一个<code>native方法</code>，这个<code>计数器 为 空（undefined）</code></li></ul><h4 id="2-Java虚拟栈"><a href="#2-Java虚拟栈" class="headerlink" title="2. Java虚拟栈"></a>2. Java虚拟栈</h4><blockquote><p>Java虚拟栈（Java Virtual Machine Stacks）<code>也是线程私有的，它的生命周期和线程相同</code>。虚拟机栈描述的是Java方法执行的内存模型：<code>每个方法在执行的同时都会创建一个栈帧</code>（Stack Frame）用于存储<code>局部变量表、操作数栈、动态链接、方法出口</code> 等信息。每个方法从<code>调用</code>直到<code>执行完成</code>的过程，就对应<code>一个栈帧在虚拟机栈中入栈到出栈的过程</code>。</p></blockquote><h4 id="3-本地-方法栈"><a href="#3-本地-方法栈" class="headerlink" title="3. 本地 方法栈"></a>3. 本地 方法栈</h4><blockquote><p>本地方法栈（native method stack）与<code>Java虚拟机栈</code>所发挥的作用是非常相似的，它们之间的区别是<code>Java虚拟机栈 为虚拟机执行Java方法（字节码）服务，本地方法栈 为虚拟机使用到的native方法 服务。</code></p></blockquote><h4 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4. Java堆"></a>4. Java堆</h4><blockquote><p>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。 Java堆是被<code>所有线程共享</code>的一块<code>内存区域</code>，在<code>虚拟机启动时创建</code>。<code>目的：</code>存放对象实例，几乎所有的对象实例都在这里分配内存。</p><blockquote><p>所有的对象实例以及数组都要在堆上分配，但是随着 JIT 编辑器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换 优化技术将会导致一些微妙变化发生，所有对象都分配在堆上也渐渐变得 不是 那么 <code>绝对</code>了</p></blockquote></blockquote><p>Java堆 是<code>垃圾收集器管理</code>的<code>主要区域</code>，很多时候被成为 <code>GC堆（Garbage Collected Heap）</code></p><p>从<code>内存回收</code>的角度看，由于现在收集器基本都采用<code>分代收集算法</code></p><ol><li>新生代</li><li>老年代</li></ol><p>从<code>内存分配</code>的角度来看，线程共享的<code>Java堆</code>中可能划分出<code>多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）</code></p><p>Java堆<code>只要在逻辑上连续即可，不一定要物理上连续</code>。在实现时候，是可以扩展的（通过-Xmx  和 -Xms 控制）。如果在堆上没有内存完成实例分配，而且堆也无法拓展时 就会抛出 OutOfMemoryError异常</p><h4 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h4><blockquote><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于<code>存储已被虚拟机加载</code>的<code>类信息、常量、静态变量、即时编译器 编译后的代码</code>数据。别名（非堆 用来区分Java堆区）</p></blockquote><p>JDK1.7 的 HotSpot 字符串常量池 移出 永久代</p><p>Java虚拟机规范 对 方法区的限制非常宽松，在方法区 很少进行垃圾收集，内存回收目标 主要是针对常量池的回收和堆对类型的卸载</p><h4 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h4><blockquote><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了类的 <code>版本、字段、方法、接口</code>等描述的信息外，还有一项信息是<code>常量池（Constant Pool Table）</code>用于存放编译器生成的<code>各种字面量</code>和<code>符号引用</code>，这部分内容将<code>在类加载后</code> 进入方法区运行时常量池里<code>存放</code>。</p><p>运行时常量池 相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，运行期间也可能将新的常量放入池中，<code>例：String 类 的intern() 方法</code></p></blockquote><p>运行时常量池是方法区的一部分，自然受到方法区的限制，当常量池无法再申请到内存的时就会抛出　OutOfMemoryError 异常。</p><h4 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h4><blockquote><p>​    直接内存（Direct Memory）不是<code>虚拟机运行时候数据区的一部分</code>，也不是<code>Java虚拟机规范中定义的内存区域</code>。</p><p>​    在JDK1.4 中新加入的NIO（New Input/Output）类，引入了一种基于通道（Channel）和缓存区（Buffer）的 I/O 方式，它可以使用Native函数库直接分配堆外内存，<code>然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作</code>。这样就能在一些场景中显著提高性能，来避免在Java堆 和 Native堆中来回复制数据。</p><p>​    本机直接内存的分配不会受到Java堆大小的限制。但是，既然是内存，肯定还是会受到本机总内存（包括RAM 以及 SWAP区 或者分页文件）大小以及处理器寻址的限制。</p></blockquote><h3 id="二、HotSpot-虚拟机对象探秘"><a href="#二、HotSpot-虚拟机对象探秘" class="headerlink" title="二、HotSpot 虚拟机对象探秘"></a>二、HotSpot 虚拟机对象探秘</h3><p>这里会介绍 虚拟机内存中的数据的其他细节，比如 它们是<code>如何创建</code>、<code>如何布局</code> 以及 <code>如何访问的</code>，这里探讨<code>HotSpot 虚拟机 在Java堆中 对象分配、布局 和 访问 的全过程</code>。</p><h4 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1. 对象的创建"></a>1. 对象的创建</h4><ul><li><p>类加载检查</p><blockquote><p>​    虚拟机遇到一条 new 指令时，首先将去检查这个<code>指令的参数</code>是否能在<code>常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</code></p></blockquote><p>检查是否创建过，创建过直接使用引用，没创建 执行类加载过程</p></li></ul><ul><li><p>虚拟机为新生对象分配内存</p><p>在 <code>类加载检查后（也就是确保类已经生成了）</code>，在类加载完成后已经确定了 要创建对象所需要的内存的大小是多少。</p><p>两种情况：</p><ol><li><p>Java堆绝对规整 </p><p>指针碰撞    已用和空闲 中间放着一个指针作为分界点</p></li><li><p>Java堆不规整 </p><p>空闲列表    虚拟机维护一个列表，记录哪些内存可以使用</p></li></ol></li><li><p>考虑虚拟机创建是否频繁行为</p><p>两种解决方案：</p><ol><li><p>对分配内存空间的动作进行同步处理 实际上虚拟机采用 <code>CAS配上失败重试的方式保证更新操作的原子性</code></p></li><li><p>把内存分配的动作按照线程划分在不同的空间之中进行，即 每个线程在Java堆中预先分配一小块内存，称为<code>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</code>。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB<code>用完分配新的TLAB时</code>，才需要<code>同步锁定</code>。</p><p><code>虚拟机是否使用TLAB：通过 -XX：+/-UseTLAB</code></p></li></ol></li><li><p>内存分配完后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）</p><p>如果使用 TLAB，在TLAB分配前进行。<code>（保证对象的实例字段在Java代码中可以不赋值就可以直接使用，程序访问到这些字段的数据类型所对应的 零值）</code></p></li><li><p>虚拟机对对象进行必要的设置</p><p>对象信息头（Object Header）中：对象是哪个类实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄</p></li></ul><p>到这里位置</p><p>​    从<code>虚拟机的角度</code>看 已经产生一个新的对象产生了，</p><p>​    从<code>Java程序的视角</code>看 对象创建才刚开始<init>方法还没有执行，所有字段都为 零</p><h4 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2. 对象的内存布局"></a>2. 对象的内存布局</h4><p>HotSpot 中，对象在<code>内存中存储布局</code>分为 3 块区域：<code>对象头（Header）</code>、<code>实例数据（Instance Data）</code>、<code>对齐填充（Padding）</code></p><ul><li><p>对象头</p><p>对象头包括两部分信息，</p><p>第一部分用于存储对象自身的运行时数据，哈希码（Hash Code）、GC分代年龄、锁状态、线程持有锁、偏向线程ID、偏向时间戳，这部分长度32bit（32位虚拟机）或64bit（64位虚拟机）<code>官方称作 -&gt; Mark Word</code></p><p>​    Mark Word被设计城一个<code>非固定的数据结构以便在极小的空间内存存储尽量多的信息，它会根据对象的状态复用自己的存储空间。</code></p></li></ul><p>  <img src="https://github.com/mambaJun/picture/blob/master/blog/image.OYOZG0.png" srcset="/img/loading.gif" alt="image.OYOZG0"></p><p>  第二部分 是类型指针，即对象指向它的类 元数据的指针，虚拟机根据指针确定对象是哪个类实例。</p><p>  但是 并不是所有的虚拟机实现都必须在对象数据上保留类型指针</p><ul><li><p>实例数据</p><p>​    实例数据部分是<code>对象真正的存储的有效信息</code>,也是在程序代码中所定义的各种类型的字段内容。这部分的存储顺序会受到<code>虚拟机分配策略参数 和 字段在Java源码中定义顺序</code>影响。</p><p>​    HotSpot虚拟机默认的分配策略为 longs/doubles 、ints、shorts/chars、bytes/booleans、oop（Ordinary Object Pointers）,从<code>分配策略</code>中可以看出，<code>相同宽度字段总是分配到一起</code>。</p><p>​    在满足这个前提条件下，<code>父类中定义的变量</code>会出现在<code>子类之前</code>，如果CompactField 参数值 为 true（默认为true），<code>子类中较窄的变量</code>也可能插入<code>父类变量的空隙中</code>。</p></li></ul><ul><li><p>对齐填充</p><p>​    对齐填充并不是必然存在的,也没有特别的含义,它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍,换句话说，就是对象的大小必须是8字节的整数倍。</p><p>而对象头部分正好是8字节的倍数(1倍或者2倍)，因此,当<code>对象实例数据部分没有对齐时,就需要通过对齐填充来补全。</code></p></li></ul><h4 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a>3. 对象的访问定位</h4><p>​    创建对象是为了使用对象，Java程序通过 <code>栈上的reference 数据</code>来操作<code>堆上的具体对象</code>。<code>由于 reference类型在Java虚拟机规范中只规定了一个指向对象的引用，但是没有定义通过何种方式去定位</code></p><p>目前主流的指针访问方式 有使用 <code>句柄</code> 和 <code>直接指针</code> 两种。</p><ul><li><p>使用句柄访问</p><p>​    <img src="https://github.com/mambaJun/picture/blob/master/blog/image.B2MIH0.png" srcset="/img/loading.gif" alt=""></p><p><img src="/tmp/evince-30282/image.B2MIH0.png" srcset="/img/loading.gif" alt="image.B2MIH0"></p><p>使用句柄访问，<code>Java堆</code>中将会<code>划分出一块内存来作为句柄</code>，reference 中存储的就是对象的句柄地址，句柄中包含了<code>对象实例数据</code> 与 <code>类型数据各自的具体地址信息</code></p></li><li><p>使用直接指针访问</p><p>使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中存储的直接就是对象地址</p></li></ul><p><img src="/tmp/evince-30282/image.MGC1G0.png" srcset="/img/loading.gif" alt="image.MGC1G0"></p><p>​    <img src="https://github.com/mambaJun/picture/blob/master/blog/image.MGC1G0.png" srcset="/img/loading.gif" alt=""></p><p>小结：</p><p>​    两种访问方式各有优势</p><p>​    句柄访问最大的好处 reference中存储稳定的句柄地址，在对象被移动（垃圾收集时移动对象）时 只会改变句柄中的实例数据指针，而 reference本身不需要修改</p><p>​    直接指针访问 最大的好处是 速度更快，节省了一次指针定位的时间开销，由于对象的访问在Java中频繁， 这种开销积少成多后是非常客观的</p><p>​    <code>HotSpot 是采用直接指针方式进行对象访问，但是各种语言和框架使用句柄的情况也很常见</code></p><h3 id="三、实战：OutOfMemoryError-异常"><a href="#三、实战：OutOfMemoryError-异常" class="headerlink" title="三、实战：OutOfMemoryError 异常"></a>三、实战：OutOfMemoryError 异常</h3><p>在 Java虚拟机规范中，除了程序计数器外，虚拟机内存的其他几个运行时 区域都有发生 OutOfMemoryError（OOM）</p><p>​    第一：通过代码验证Java虚拟机规范中描述的各个运行时 区域存储的内容</p><p>​    第二：在工作中遇到实际的内存溢出异常时,能根据异常的信息快速，判断是哪个区域的内存溢出,知道什么样的代码可能会导致这些区域内存溢出,以及出现这些异常后该如何处理。</p><h4 id="1-Java堆溢出"><a href="#1-Java堆溢出" class="headerlink" title="1. Java堆溢出"></a>1. Java堆溢出</h4><p>​    <code>Java堆</code> 用于<code>存储对象实例</code>，只要不断地创建对象并且保证GC Roots 到对象之间有可达路径来避免垃圾回收机制清除这些对象，在对象数量到达最大堆容量限制后就会产生产生内存溢出异常。</p><p>​    Java堆 将<code>堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</code>   </p><p>​    <code>-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆</code><br><code>转储快照以便事后进行分析</code></p><h4 id="2-虚拟机栈-和-本地方法栈溢出"><a href="#2-虚拟机栈-和-本地方法栈溢出" class="headerlink" title="2. 虚拟机栈 和 本地方法栈溢出"></a>2. 虚拟机栈 和 本地方法栈溢出</h4><p>由于在HotSpot 虚拟机中并不区分 虚拟机栈 和 本地方法栈</p><p>​    如果<code>线程请求的栈深度大于 虚拟机所允许的最大深度</code>，抛出 StackOverflowError 异常</p><p>​    如果<code>虚拟机在扩展时无法申请到足够的内存空间</code>，抛出 StackOverflowError 异常</p><p>当栈空间无法继续分配时，本质上就是栈空间使用太大，导致的内存太小</p><p>-Xss 参数减少栈 内存容量</p><h4 id="3-方法区-和-运行时常量池-溢出"><a href="#3-方法区-和-运行时常量池-溢出" class="headerlink" title="3. 方法区 和 运行时常量池 溢出"></a>3. 方法区 和 运行时常量池 溢出</h4><p>-XX: PermSize=10m<br>-XX: MaxPermSize=10m</p><p>-XX:PermSize和-XX:MaxPermSize限制方法区大小,从而间接限制其中常量池的容量</p><h4 id="4-本机直接内存溢出"><a href="#4-本机直接内存溢出" class="headerlink" title="4. 本机直接内存溢出"></a>4. 本机直接内存溢出</h4><p>DirectMemory 容量 可以通过 -XX: MaxDirectMemorySize 指定，如果不指定默认和Java堆最大堆一样</p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 虚拟机 二</title>
    <link href="/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%BA%8C/"/>
    <url>/2020/03/05/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="垃圾收集器-与-内存分配策略"><a href="#垃圾收集器-与-内存分配策略" class="headerlink" title="垃圾收集器 与 内存分配策略"></a>垃圾收集器 与 内存分配策略</h1><blockquote><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”,墙外面的人想<br>进去,墙里面的人却想出来。</p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>了解GC和内存分配的原因：</p><p>​    当需要排查各种内存溢出、内存泄露问题时，当垃圾收集成为系统达到更高并发量的瓶颈时候，就需要对这些“自动化”的技术实施必要的监控和调节。</p><p><span id = "jump">跳转到这里：</span></p><h2 id="二、对象已死吗"><a href="#二、对象已死吗" class="headerlink" title="二、对象已死吗"></a>二、对象已死吗</h2><p>在 Java堆 放着Java中几乎所有的对象实例，垃圾收集器在进行 堆<code>回收之前</code>，首先要做的就是确定这些对象中 哪些对象还 “存活”着，哪些已经“死去”<code>（即不可能再被任何途径使用的对象）</code></p><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1. 引用计数算法"></a>1. 引用计数算法</h3><blockquote><p>给对象中添加一个引用计数器，每有一个地方引用她时候，计数器就 加 1；引用失效时，计数器就 减 1,，任何时刻计数器 为 0的对象就不可能再被使用</p></blockquote><p>Java没有选用 引用计数算法来管理内存，<code>原因是它很难解决对象之间的互相循环引用问题。</code></p><h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h3><blockquote><p>基本思路：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径为 引用链（Reference Chain）,当一个对象到GC Roots没有任何引用链 相连时，证明此对象不可用</p></blockquote><p>Java中 可以作为 GC Roots对象包括以下几种：</p><ul><li><code>虚拟机栈（栈帧中的本地变量表）中引用</code>的对象</li><li><code>方法区中类静态属性 引用</code>的对象</li><li><code>方法区中常量引用</code>的对象</li><li><code>本地方法栈 中JNI（一般说的 Native 方法）引用</code>的对象。</li></ul><h3 id="3-引用是啥玩意-都有啥"><a href="#3-引用是啥玩意-都有啥" class="headerlink" title="3. 引用是啥玩意,都有啥"></a>3. 引用是啥玩意,都有啥</h3><blockquote><p>如果<code>reference类型的数据中存储的数值</code>代表的是<code>另外一块内存的起始地址</code>，就称为这块内存代表着一个引用。</p></blockquote><p>Java中分为 <code>强引用、软引用、弱引用、虚引用</code></p><ul><li><p>强引用（Strong Reference）</p><p>在程序代码中普遍存在的，类似 <code>Object obj = new Object()</code>的引用，只要强引用还存在，垃圾收集器不会回收被引用的对象。</p></li><li><p>软引用（Soft Reference）</p><p>软引用用来描述一些还有用但并非必需的对象，软引用关联的对象，在系统将要发生内存溢出的异常之前会把这些对象列进中进行第二次回收。这次回收没有足够的内存，才会抛出内存溢出异常</p></li><li><p>弱引用（Weak Reference）</p><p>弱引用用来描述非必需对象的，强调比弱引用更弱，被<code>弱引用关联的对象</code>只能<code>生存到下一次垃圾收集前</code></p></li><li><p>虚引用（Phantom Reference）</p><p>​    最弱的引用关系。<code>一个对象是否有虚引用的存在不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例</code>，<code>为</code>一个<code>对象设置虚引用</code>关联的<code>唯一目的</code>就是能<code>在这个对象被收集器回收时收到一个系统通知</code></p></li></ul><h3 id="4-生存还是死亡（标记过程）"><a href="#4-生存还是死亡（标记过程）" class="headerlink" title="4. 生存还是死亡（标记过程）"></a>4. 生存还是死亡（标记过程）</h3><p>在<code>可达性分析算法中</code>的<code>不可达的对象，也不是非死不可的，</code>这个时候它们暂时处于缓刑阶段，真正的宣告一个对象死亡需要经历两次<span id="markup_process">标记过程</span>：</p><ol><li><p>如果对象在进行可达性分析后发现没有与 GC Roots相连接的引用链，会被第一次标记并且进行一次筛选，筛选的条件是这个对象是不是有必要执行 finalize()方法。</p><ul><li>当对象没有<code>覆盖 finalize() 方法</code></li><li>finalize() 方法<code>已经被虚拟机调用过</code></li></ul><p>以上两种情况，虚拟机都当做“没必要执行”</p></li><li><p>如果<code>对象被判定有必要执行finalize() 方法</code>，这个对象<code>就被放置在一个叫做 F-Queue的队列中</code>，并且在稍后 <code>一个由虚拟机自动建立的、低优先级的Finalizer 线程 去执行它</code>。这里所谓的“执行”是指<code>虚拟机会触发这个方法,但并不承诺会等待它运行结束</code>,这样做的原因是,如果一个对象在finalize()方法中执行缓慢,或者发生了死循环(更极端的情况),将很可能会导致F-Queue队列中其他对象永久处于等待,甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会,稍后GC将对F-Queue中的对象进行第二次小规模的标记,如<code>果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可</code>,譬如把自己(this关键字)赋值给某个类变量或者对象的成员变量,那在第二次标记时<code>它将被移除出“即将回收”的集合</code>;如果对象这时候还没有逃脱,那基本上它就真的被回收了。</p></li></ol><h3 id="5-回收方法区"><a href="#5-回收方法区" class="headerlink" title="5. 回收方法区"></a>5. 回收方法区</h3><blockquote><p>Java虚拟机规范中说过 可以不要求虚拟机在方法区实现垃圾收集，而且在方法区中进行垃圾收集的“性价比”一般比较低。在堆中国，尤其是新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，永久代的垃圾收集效率远低于这个。</p></blockquote><p>永久代的垃圾收集主要回收两个部分内容： <code>废弃常量和无用的类</code></p><p>回收废弃常量和回收Java堆中的对象类似。如果没有对象引用 常量池的某个常量，也没有其他地方引用了这个字面量。如果这个时候发生内存回收，而且必要的话，常量就会被系统清理出常量池。常量池中的其他类（接口）、方法、字段的符号引用也是类似。</p><p>判定<code>无用类</code>的条件：</p><ul><li>该类的所有实例都已经被回收，即Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li></ul><p>虚拟机可以对满足上述3个条件的无用类进行回收,这里说的仅<code>仅是“可以”</code>,而并<code>不是和对象一样,不使用了就必然会回收</code>。</p><p>HotSpot 虚拟机提供了</p><p>-Xnoclassgc参数进行控制</p><p>-verbose:class、-XX:+TraceClassLoading、-XX:+TraceClassUnLoading 查看类加载和卸载信息</p><h2 id="三-垃圾手机算法"><a href="#三-垃圾手机算法" class="headerlink" title="三. 垃圾手机算法"></a>三. 垃圾手机算法</h2><p>几种算法的思想</p><h3 id="1-清除-标记算法"><a href="#1-清除-标记算法" class="headerlink" title="1. 清除-标记算法"></a>1. 清除-标记算法</h3><p>算法分为两个阶段：<code>清除、标记</code>两个阶段</p><ol><li><p>清除</p><p>先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象</p></li><li><p>标记</p><p>见  <a href="#markup_process">标记过程</a></p></li></ol><p>清除-标记算法是个最基础算法，后续的收集算法都是基于这个思路对其不足进行改进而得到的</p><p>主要不足：<code>浪费时间和空间</code></p><ol><li><code>效率问题</code>，标记和清除<code>两个过程的效率</code>都<code>不</code>是太<code>高</code></li><li><code>空间问题</code>，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致后面程序运行过程中需要分配较大对象时，不能找到足够内存而不得不提前触发的一次垃圾收集动作</li></ol><h3 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2. 复制算法"></a>2. 复制算法</h3><p>为了</p><h3 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3. 标记-整理算法"></a>3. 标记-整理算法</h3><h3 id="4-分代收集算法"><a href="#4-分代收集算法" class="headerlink" title="4. 分代收集算法"></a>4. 分代收集算法</h3><p>​    根据对象存活周期的不同将内存划分为几块。<code>Java堆</code>分为新生代 和 老年代，可以<code>根据各个年代的特点采用最适当的收集算法</code></p><p>​    在<code>新生代中</code>，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就蒜用<code>复制算法</code>，只需要付出少量存活对象的复制成本就可以完成收集</p><p>​    在<code>老年代中</code> 因对象存活率高、没有额外空间进行分配担保，就必须使用<code>“标记-清理”或者“标记-整理”算法 进行回收。</code></p><h2 id="四、HotSpot-的算法实现"><a href="#四、HotSpot-的算法实现" class="headerlink" title="四、HotSpot 的算法实现"></a>四、HotSpot 的算法实现</h2><h3 id="1-枚举根节点"><a href="#1-枚举根节点" class="headerlink" title="1. 枚举根节点"></a>1. 枚举根节点</h3><h3 id="2-安全点"><a href="#2-安全点" class="headerlink" title="2. 安全点"></a>2. 安全点</h3><h3 id="3-安全域"><a href="#3-安全域" class="headerlink" title="3. 安全域"></a>3. 安全域</h3><h2 id="五、垃圾收集器"><a href="#五、垃圾收集器" class="headerlink" title="五、垃圾收集器"></a>五、垃圾收集器</h2><h3 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1. Serial 收集器"></a>1. Serial 收集器</h3><h3 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2. ParNew 收集器"></a>2. ParNew 收集器</h3><h3 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3. Parallel Scavenge 收集器"></a>3. Parallel Scavenge 收集器</h3><h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h3><h3 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5. Parallel Old 收集器"></a>5. Parallel Old 收集器</h3><h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h3><h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. G1收集器</h3><h3 id="8-理解-GC日志"><a href="#8-理解-GC日志" class="headerlink" title="8. 理解 GC日志"></a>8. 理解 GC日志</h3>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-网络安全</title>
    <link href="/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <url>/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机网络-网络安全"><a href="#计算机网络-网络安全" class="headerlink" title="计算机网络 网络安全"></a>计算机网络 网络安全</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1安全包括："><a href="#1-1安全包括：" class="headerlink" title="1.1安全包括："></a>1.1安全包括：</h3><ul><li>数据安全</li><li>应用安全</li><li><p>操作系统安全</p></li><li><p>网络安全</p></li><li>物理安全</li><li>用户安全教育</li></ul><h3 id="1-2网络安全问题概述"><a href="#1-2网络安全问题概述" class="headerlink" title="1.2网络安全问题概述"></a>1.2网络安全问题概述</h3><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/被动攻击与主动攻击.png" srcset="/img/loading.gif" alt="被动攻击与主动攻击"></p><p>计算机网络上通信面临一下四种威胁</p><ol><li><p>截获 — 从网络上窃听他人的通信内容。</p><p>MAC地址欺骗</p><p>IP 地址欺骗</p></li><li><p>中断 — 有意中断他人在网络上的通信<br> <code>本质上是ARP 欺骗</code></p> <pre><code class="hljs shell">arp -a</code></pre></li></ol><ol><li><p>篡改 — 故意篡改网络上传送的报文</p></li><li><p>伪造 — 伪造信息在网络上传送</p></li></ol><p>截获信息的攻击称为<code>被动攻击</code>，而更改信息和拒绝用户使用资源的攻击称为<code>主动攻击</code>。</p><h2 id="二、两类密码体制"><a href="#二、两类密码体制" class="headerlink" title="二、两类密码体制"></a>二、两类密码体制</h2><h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><ul><li><p>对称加密</p><p>优点 效率高</p><p>缺点 密钥不适合在网上传输 密钥维护麻烦</p></li><li><p>非对称密钥</p><p>加密密钥和解密密钥是不同的 密钥对 <code>公钥和私钥</code></p><p>​    公钥加密   -&gt; 私钥解密</p><p>​    私钥加密  -&gt; 公钥解密</p></li></ul><h2 id="三、数字签名"><a href="#三、数字签名" class="headerlink" title="三、数字签名"></a>三、数字签名</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>数字签名：防止抵赖 能够检查签名后内容是否被更改。</p><h3 id="3-2-证书颁发机构作用"><a href="#3-2-证书颁发机构作用" class="headerlink" title="3.2  证书颁发机构作用)"></a>3.2 <a href="[https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741?fromtitle=CA&amp;fromid=20721560](https://baike.baidu.com/item/CA证书/10028741?fromtitle=CA&amp;fromid=20721560"> 证书颁发机构作用</a>)</h3><p>证书颁发机构作用：</p><ul><li>为企’’业和用户颁发数据证书 确认这些企业和个人的身份</li><li>发布证书吊销列表</li><li>企业和个人信任证书颁发机构</li></ul><h2 id="四、因特网使用的安全协议"><a href="#四、因特网使用的安全协议" class="headerlink" title="四、因特网使用的安全协议"></a>四、因特网使用的安全协议</h2><h3 id="4-1-安全套接字-SSL"><a href="#4-1-安全套接字-SSL" class="headerlink" title="4.1 安全套接字 SSL"></a>4.1 安全套接字 SSL</h3><p>​    在发送发，SSL收到应用层的数据（如HTTP或IMAP报文），对数据进行加密，然后把加密的数据送往TCP套接字。</p><p>​    在接收方，SSL从TCP套接字读取数据，解密后把数据交给应用层。</p><pre><code class="hljs tex">在发送方发送前 和 在接收方接收前 进行数据安全验证，位于应用层和传输层之间。用来防止数据泄露。</code></pre><p>HTTPS    TCP + 443</p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/SSL位置.png" srcset="/img/loading.gif" alt="SSL位置"></p><h3 id="4-2-网络层安全-IPSec"><a href="#4-2-网络层安全-IPSec" class="headerlink" title="4.2 网络层安全 IPSec"></a>4.2 网络层安全 IPSec</h3><h4 id="安全关联-SA（Security-Association）"><a href="#安全关联-SA（Security-Association）" class="headerlink" title="安全关联 SA（Security Association）"></a>安全关联 SA（Security Association）</h4><p>​    在使用 AH 或 ESP之前，先要从源主机到目的主机建立一条网络层的逻辑连接。此逻辑连接叫做安全关联 SA。</p><p>​    IPsec 就把传统的因特网无连接的网络层转换为具有逻辑连接的层。</p><blockquote><p>SA（安全关联）是构成IPSec的基础，是两个通信实体经协商（利用IKE协议）建立起来的一种协定，它决定了用来保护数据分组安全的安全协议（AH协议或ESP协议）、转码方式，密钥及密钥的有效存在时间等。</p></blockquote><h4 id="鉴别首部-AH（Authentication-Header）"><a href="#鉴别首部-AH（Authentication-Header）" class="headerlink" title="鉴别首部 AH（Authentication Header）"></a>鉴别首部 AH（Authentication Header）</h4><blockquote><p>鉴别首部 AH（Authentication Header）：AH鉴别源点和检查数据完整性，但<code>不能保密</code>。</p></blockquote><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/鉴别首部协议AH在数据报中的位置.png" srcset="/img/loading.gif" alt="鉴别首部协议AH在数据报中的位置"></p><p>在使用鉴别首部协议 AH时，把AH 首部插在原数据报数据部分的前面，同时把<code>IP首部中的协议字段置为　51</code>。</p><h4 id="封装安全有效载荷（Encapsulation-Security）"><a href="#封装安全有效载荷（Encapsulation-Security）" class="headerlink" title="封装安全有效载荷（Encapsulation Security）"></a>封装安全有效载荷（Encapsulation Security）</h4><blockquote><p>封装安全有效载荷 ESP（Encapsulation Security）：ESP 比AH复杂得多，它鉴别源点、检查数据完整性和<code>提供保密</code>。</p></blockquote><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/封装安全有效载荷ESP在数据报中的位置.png" srcset="/img/loading.gif" alt="封装安全有效载荷ESP在数据报中的位置"></p><p>使用ESP时，IP数据报首部的协议字段置为50。当IP首部检查到协议字段是 50 时，就知道在IP首部后面紧接着的是ESP首部，同时在原IP数据报后面增加了两个字段，即ESP尾部和ESP数据。</p><h2 id="五、链路加密与端到端加密"><a href="#五、链路加密与端到端加密" class="headerlink" title="五、链路加密与端到端加密"></a>五、链路加密与端到端加密</h2><h2 id="六、防火墙"><a href="#六、防火墙" class="headerlink" title="六、防火墙"></a>六、防火墙</h2>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-传输层小结</title>
    <link href="/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <url>/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>title: 计算机网络-传输层小结<br>date: 2020-02-13 13:35:15<br>tags:</p><ul><li>传输层</li><li>TCP/UDP协议<br>categories:</li><li>计算机网络</li></ul><p>index_img: /img/default.png  </p><p>[TOC]</p><h1 id="传输层学习笔记"><a href="#传输层学习笔记" class="headerlink" title="传输层学习笔记"></a>传输层学习笔记</h1><p>主要内容包括：</p><ol><li>传输层的功能</li><li>传输层协议UDP 和 TCP</li><li>网络安全</li><li>TCP可靠传输的实现</li><li>TCP流量控制</li><li>TCP的拥塞控制</li><li>TCP的传输连接管理</li></ol><div class="table-container"><table><thead><tr><th>OSI</th><th>DOD</th><th>TCP/IP协议集</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>Telent，FTP，SMTP，DNS，HTTP等</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP，UCP</td></tr><tr><td>网络层</td><td>网络层</td><td>IP，ARP，RARP，ICMP</td></tr><tr><td>数据链路层</td><td>网络接口</td><td>各种通信网络接口（以太网等）物理网络</td></tr><tr><td>物理层</td><td>网络接口</td></tr></tbody></table></div><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="传输层有个协议-TCP-和UDP"><a href="#传输层有个协议-TCP-和UDP" class="headerlink" title="传输层有个协议 TCP 和UDP"></a>传输层有个协议 <code>TCP</code> 和<code>UDP</code></h3><ul><li><p>TCP （Transmission Control Protocol），传输控制协议</p><p>客户端与服务器之间建立会话，将需要传输的文件分段传输，可靠传输、流量控制</p></li><li><p>UDP（User Data Protocol）,用户数据报协议</p><p>用户报文协议，一个数据包就能够完成数据通信，不分段，不需要建立会话，不需要流量控制，不是可靠传输</p></li></ul><p>一个数据包最大是 65535（2^16）字节</p><p>数据链路层 46-1500 字节</p><h3 id="应用层和传输层协议之间的关系"><a href="#应用层和传输层协议之间的关系" class="headerlink" title="应用层和传输层协议之间的关系"></a>应用层和传输层协议之间的关系</h3><p><img src="https://i.loli.net/2020/02/13/P4bXVAFnZhkouiU.png" srcset="/img/loading.gif" alt="应用层和传输层关系.png"></p><p>常见的应用层协议使用的端口</p><div class="table-container"><table><thead><tr><th>协议名称</th><th>端口</th></tr></thead><tbody><tr><td>Http</td><td>TCP + 80</td></tr><tr><td>Https</td><td>TCP + 443</td></tr><tr><td>RDP</td><td>TCP + 3389</td></tr><tr><td>FTP</td><td>TCP + 21</td></tr><tr><td>共享文件夹</td><td>TCP + 445</td></tr><tr><td>SMTP</td><td>TCP + 25</td></tr><tr><td>POP3</td><td>TCP + 110</td></tr><tr><td>Telnet</td><td>TCP + 23</td></tr><tr><td>DNS</td><td>UDP + 53</td></tr></tbody></table></div><h3 id="服务与应用层之间的关系"><a href="#服务与应用层之间的关系" class="headerlink" title="服务与应用层之间的关系"></a>服务与应用层之间的关系</h3><ul><li>服务使用TCP或UDP端口侦听客户端请求</li><li>客户端使用IP地址定位服务器 （使用目标端口 定位服务）</li><li>可以在服务器网卡上设置只开放必要端口，实现服务器的网络安全</li></ul><p>如何查看服务侦听</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看会话</span>netstat -n<span class="hljs-meta">#</span><span class="bash"> 查看建立会话的进程</span>netstat -nb<span class="hljs-meta">#</span><span class="bash"> 查看计算机侦听端口</span>netstat -an<span class="hljs-meta">#</span><span class="bash"> 根据状态筛选</span>netstat -n : find "ESTABLISHED"<span class="hljs-meta">#</span><span class="bash"> 测试到远程计算机某个端口是否打开 telnet 192.168.1.1 3389</span>telnet 192.168.1.1 3389</code></pre><h3 id="传输层功能-和-端口范围"><a href="#传输层功能-和-端口范围" class="headerlink" title="传输层功能 和 端口范围"></a>传输层功能 和 端口范围</h3><p><img src="https://i.loli.net/2020/02/14/zpdTxJjk5Vu174t.png" srcset="/img/loading.gif" alt="传输层功能.png"></p><h4 id="传输层功能"><a href="#传输层功能" class="headerlink" title="传输层功能"></a>传输层功能</h4><p>传输层功能：为<code>应用进程之间</code>提供端到端的逻辑通信</p><ul><li>传输层还要对收到的报文进行差错检测</li><li>传输层提供面向连接（TCP）和面向无连接（UDP）的服务</li></ul><h4 id="传输层和应用层之间的主要区别"><a href="#传输层和应用层之间的主要区别" class="headerlink" title="传输层和应用层之间的主要区别"></a>传输层和应用层之间的主要区别</h4><ul><li>网络层 提供主机之间的逻辑通信</li><li>传输层提供进程之间的逻辑通信</li></ul><p><img src="https://i.loli.net/2020/02/14/nrfCAaeLzmVqZW1.png" srcset="/img/loading.gif" alt="传输层和网络层的主要区别.png"></p><h4 id="端口-0-65535"><a href="#端口-0-65535" class="headerlink" title="端口 0 ~ 65535"></a>端口 0 ~ 65535</h4><p>端口用一个 16 位端口号进行标志</p><p>端口号只具有本地意义，即端口号只是为了标志本计算机应用层中各个进程。在因特网中不同计算机的相同端口号咯是没有联系的。</p><p>端口分类（三类端口）</p><ol><li>熟知端口 0 ~ 1023</li><li>登记端口 1024 ~ 49151</li><li>客户端口 49152 ~ 65535</li></ol><h2 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h2><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><ol><li>UDP是无连接的，发送数据之前不需要建立连接</li><li>UDP使用尽量最大努力交付，不保证可靠交付，同时也不适用拥塞控制</li><li>UDP是面向报文的。UDP没有拥塞控制，适合多媒体通信的要求</li><li>UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>UDP的首部开销小，只有八个字节</li></ol><h3 id="UDP首部：首部开销小，只有八个字节"><a href="#UDP首部：首部开销小，只有八个字节" class="headerlink" title="UDP首部：首部开销小，只有八个字节"></a>UDP首部：首部开销小，只有八个字节</h3><p><img src="https://i.loli.net/2020/02/14/c9oGH51gdEab8MV.png" srcset="/img/loading.gif" alt="UDP协议首部.png"></p><p><img src="https://i.loli.net/2020/02/14/dn1VuitPBqDr63N.png" srcset="/img/loading.gif" alt="UDP首部格式.png"></p><div class="table-container"><table><thead><tr><th>首部字段名称</th><th>描述</th></tr></thead><tbody><tr><td>检验和</td><td><img src="https://i.loli.net/2020/02/14/e2Tlziw8da1mgvF.png" srcset="/img/loading.gif" alt="UDP检验和计算.png"></td></tr><tr><td>长度</td><td>UDP首部 + 数据总 长度</td></tr><tr><td>源端口</td><td></td></tr><tr><td>目标端口</td><td></td></tr><tr><td>伪首部（网络层首部的）</td><td>这个是网络层首部信息，不是真的传输层信息，用来计算 <code>检验和</code></td></tr></tbody></table></div><h2 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a>三、TCP</h2><h3 id="TCP-特点和概述"><a href="#TCP-特点和概述" class="headerlink" title="TCP 特点和概述"></a>TCP 特点和概述</h3><ol><li><p>TCP是面向连接的传输层协议</p><p>传输之前，需要进行三次握手，确认通畅</p></li><li><p>每一条TCP连接只能有两个端点（endpoint）,每一条TCP连接只能是点对点（一对一）</p></li><li><p>TCP提供可靠交付服务</p></li><li><p>TCP提供全双工通信</p></li><li><p>面向字节流 </p></li></ol><h3 id="TCP面向字节流-传输"><a href="#TCP面向字节流-传输" class="headerlink" title="TCP面向字节流 传输"></a>TCP面向字节流 传输</h3><ol><li><p>发送方  和 接收方 建立连接，准备文件</p><p><img src="https://i.loli.net/2020/01/07/zxAUH6cR8nYBhqi.png" srcset="/img/loading.gif" alt="tcp1.png"></p></li><li><p>发送方 将数据分块 缓存到 TCP 缓存，每次缓存大小没有规律</p></li></ol><p>   <img src="https://i.loli.net/2020/01/07/e3zGocvkX2lbQJR.png" srcset="/img/loading.gif" alt="tcp2.png"></p><ol><li><p>从缓存中取出数据（这里的取出也是没有规律），添加TCP 头封装成数据包</p><p><img src="https://i.loli.net/2020/01/07/LTxVzPCHrm453IA.png" srcset="/img/loading.gif" alt="tcp3.png"></p></li><li><p>接收端 将收到的数据放入 TCP缓存中，同时去掉 TCP 头，<code>按照顺序</code>将发送端分割的数据包组装起来</p><p><img src="https://i.loli.net/2020/01/07/LF3kS7ReVmdUI41.png" srcset="/img/loading.gif" alt="tcp4.png"></p></li><li><p>接收端 从 TCP缓存中读取数据（这里的读取大小也是没有规律，每次读几个不定）</p><p><img src="https://i.loli.net/2020/01/07/tKeLzubr8ABQypC.png" srcset="/img/loading.gif" alt="tcp5.png"></p><p><img src="https://i.loli.net/2020/01/07/MZ8D6pt9gAWIsRq.png" srcset="/img/loading.gif" alt="tcp6.png"></p></li></ol><h3 id="TCP的连接"><a href="#TCP的连接" class="headerlink" title="TCP的连接"></a>TCP的连接</h3><p>TCP把连接作为最基本的抽象，每一条TCP连接有两个端点</p><p>TCP连接的端口不是主机，不是IP地址，不是应用程序，不是传输层的协议端口。</p><p>TCP连接的端点叫做　<code>套接字（socket）</code></p><p>​    套接字：端口号 + IP地址</p><p><img src="https://i.loli.net/2020/02/14/6Q4ZkxWdFGzNDCh.png" srcset="/img/loading.gif" alt="套接字.png"></p><h3 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h3><p><img src="https://i.loli.net/2020/02/14/Ii36hva4fMpOj2e.png" srcset="/img/loading.gif" alt="TCP首部样例.png"></p><p><img src="https://i.loli.net/2020/02/14/Q2Wji7YFmqXaJhn.png" srcset="/img/loading.gif" alt="TCP首部格式.png"></p><div class="table-container"><table><thead><tr><th>字段名称</th><th>描述</th></tr></thead><tbody><tr><td>源端口 Source Port</td><td></td></tr><tr><td>目的端口 Destination Port</td><td></td></tr><tr><td>序号 Sequence number</td><td>如果是第一个 序号为 1，不是第一个序列号为上个数据包的确认号 + 1</td></tr><tr><td>确认号 Acknowledgment number</td><td>告诉发送者 下一个 该发哪一个数据包</td></tr><tr><td>数据偏移Header Length</td><td>标记TCP段的首位长度，在TCP报文段中第几号开始是TCP数据部分，占四个字节，每个字节是0-15，所以数据偏最大是15 * 4 = 60</td></tr><tr><td>保留</td><td>占6位，保留为今后使用，目前应置为０</td></tr><tr><td>CWR（Congestion　Window　Reduced）</td><td></td></tr><tr><td>ECN-Echo</td><td></td></tr><tr><td>URG</td><td>当URG=1，表明紧急指针有效。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据），而不是按原来的排队顺序来传送。发送应用进程告诉发送方的TCP有紧急数据要传送，于是发送方TCP就把紧急数据插入到<code>本报文段数据的最前面</code>，而在紧急数据后面的数据仍是普通数据<br /> 从发送方TCP缓存中 紧急数据包  相当于插队到第一个位置被发送</td></tr><tr><td>ACK</td><td>仅当ACK= 1时确认号字段才有效。当 ACK=0时，确认号无效，<code>TCP规定，在连接建立后所有传送的报文段都必须把ACK置1</code></td></tr><tr><td>PSH Push</td><td>PSH=1时，接收方 TCP收到 pSH =1的报文段，就尽快 将数据包从TCP缓存中给应用程序，而不是继续在TCP缓存中排队给应用程序</td></tr><tr><td>RST　Reset</td><td>当 RST=1，表明 TCP连接出现严重差错（如主机崩溃，浏览器意外关闭），必须释放连接，然后再重新建立运输连接。<br /> RST置1还可以用来拒绝一个非法的报文段或拒绝打开一个连接<br /> RST 也称为 <code>重建位</code> 或 <code>重置位</code></td></tr><tr><td>SYN Synchronization</td><td>在连接建立时用来同步序号<br /><code>当 SYN=1而ACK=0时，表明这是一个连接请求报文段，对方如果同意建立连接则应在响应的报文段中使用SYN＝１和ACK＝１。</code>因此SYN＝１表示这是一个<code>连接请求</code>或<code>连接接收报文</code>，</td></tr><tr><td>FIN</td><td>用来释放一个连接。当 FIN=1时，表明此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</td></tr><tr><td>窗口 Window size value00</td><td>占两个字节，窗口值是[0,2 ^16 -1 ]之间的整数，窗口是接收方 TCP缓存的窗口大小。窗口值是　接收方　告诉发送方：从报文段首部中的确认号算起，接收方目前允许对方发送的数据量（以字节为单位），<code>窗口值作为是接收方 让 发送方 设置 其 发送窗口大小的依据，窗口值经常动态变化</code><br /><code>发送要给报文段，其确认号是 701，窗口字段是1000，这就是告诉发送方，接收方的我接收缓存空间还可以接收1000个字节数据（字节号是701~1700）</code></td></tr><tr><td>检验和 Checksum</td><td>占两个字节，检验和字段检验范围 包括 TCP首部 和 数据两部分。 和 UDP一样，在计算检验和时，要在TCP报文段前面加上 12 字节的伪首部。伪首部结构跟 UDP伪首部一样，把 第四个字段（协议号）中的（UDP协议号）17 改成（TCP协议号）6</td></tr><tr><td>紧急指针Urgent Pointer</td><td>前提是　URG＝１，紧急指针才有意义。紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据被处理完时，TCP就告诉应用程序恢复到正常操作。<code>即使窗口为0也可以发送紧急数据</code><br /> 比如 紧急指针是50， 从数据部分开始计算 数据大小为50字节<img src="https://i.loli.net/2020/02/15/DvlgwFrG2IUYEdz.png" srcset="/img/loading.gif" alt="TCP紧急指针.png"></td></tr><tr><td>选项（可变长度）</td><td>1. <code>最大报文段长度</code> （MSS Maximum Segment Size）：每个TCP报文段（数据部分，不包含首部）的最大长度。发送方和接收方协商最大报文段长度<br /> 2. 窗口扩大选项：为了扩大窗口<br /> 3. 时间戳<br /> 4. 选择确认（SACK）</td></tr><tr><td>填充</td><td>选项不够四个字节，填充0，凑够32位</td></tr></tbody></table></div><h3 id="TCP协议如何实现可靠传输"><a href="#TCP协议如何实现可靠传输" class="headerlink" title="TCP协议如何实现可靠传输"></a>TCP协议如何实现可靠传输</h3><h4 id="1-可靠传输的工作原理（原理）"><a href="#1-可靠传输的工作原理（原理）" class="headerlink" title="1. 可靠传输的工作原理（原理）"></a>1. 可靠传输的工作原理（原理）</h4><p>​    只要发送端接收不到确认包，就重发数据包</p><h5 id="1-停止等待协议"><a href="#1-停止等待协议" class="headerlink" title="1. 停止等待协议"></a>1. 停止等待协议</h5><p><img src="https://i.loli.net/2020/02/14/bmgN2ZtsEUJKwIk.png" srcset="/img/loading.gif" alt="停止等待协议.png"></p><ol><li><p>无差错情况</p></li><li><p>超时重传</p><p><img src="https://i.loli.net/2020/02/14/kZqdDmcU62IGnJM.png" srcset="/img/loading.gif" alt="停止等待协议等待时间过程.png"></p><p><code>等待时间</code>=分组时间（TD） + 往返时间（RTT） + 接收确认包时间（TA）</p></li></ol><p>   当经过 <code>等待时间</code>，没有确认响应，A默认重发数据包</p><p>   在发送完一个分组后，必须暂时保留已发送的分组副本，分组和确认分组都必须进行编号，超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一点</p><ol><li><p>确认丢失：接收端收到数据后发送的确认包丢失</p><p>发送方经过等待时间，重传数据包，接收方丢弃之前的数据包，接收重传数据包</p></li><li><p>确认迟到：接收端收到数据后发送的确认包迟到（超出等待时间）</p><p>发送方经过等待时间，重传数据包，接收方丢弃之间收到的数据包，重传确认包，发送方收到第一次迟到的确认包，不做任何反应</p></li></ol><p><img src="https://i.loli.net/2020/02/14/fkoFGyE6T5Qdci4.png" srcset="/img/loading.gif" alt="确认丢失和确认迟到.png">小结</p><p>使用上述的确认和重传机制，就可以在不可靠的传输网络上实现可靠的通信，这种可靠传输协议叫做<code>自动重传请求ARQ(Automatic Repeat Request)</code></p><p>ARQ 重传请求是自动进行的，接收方不需要请求 发送方 重传 某个出错的分组</p><p>停止等待协议</p><ul><li>优点 简单</li><li>缺点 信道利用率低</li></ul><p>信道利用率公式：</p><p><img src="https://i.loli.net/2020/02/14/GELK4Ve7iCokprX.png" srcset="/img/loading.gif" alt="信道利用率公式.png"></p><h5 id="2-流水线传输"><a href="#2-流水线传输" class="headerlink" title="2. 流水线传输"></a>2. 流水线传输</h5><p>发送方 <code>连续发送多个分组，不必每次发完一个分组就停下来等待对方确认</code>，由于信道上一直有数据不间断的传送，这种方式获得很高的信道利用率</p><p><img src="https://i.loli.net/2020/02/14/g82L3zXaN6fsFuP.png" srcset="/img/loading.gif" alt="流水线传输过程.png"></p><p>连续 ARQ协议</p><p>发送方维持一个发送窗口，从头开始发送窗口里的数据包，窗口里的数据是可以发送不可以删除，当收到确认后对应的数据包才可以从缓存中删除，窗口向前滑动。</p><p><img src="https://i.loli.net/2020/02/14/wr1YUm8gZQMp5aJ.png" srcset="/img/loading.gif" alt="流水线传输窗口.png"><br><img src="https://i.loli.net/2020/02/14/3sD9irtFSRkUXlb.png" srcset="/img/loading.gif" alt="流水线传输窗口1.png"><br><img src="https://i.loli.net/2020/02/14/q8wmky2c4HNDMxG.png" srcset="/img/loading.gif" alt="流水线传输窗口2.png"><br><img src="https://i.loli.net/2020/02/14/bECm2RGWO5kZ4T8.png" srcset="/img/loading.gif" alt="流水线传输窗口3.png"></p><p><code>累计确认</code>：表明接收方已经正确接收序号为n的以前且包括n在内的所有分组</p><h4 id="2-TCP的可靠传输-（原理应用）"><a href="#2-TCP的可靠传输-（原理应用）" class="headerlink" title="2. TCP的可靠传输 （原理应用）"></a>2. TCP的可靠传输 （原理应用）</h4><h5 id="1-以字节位为单位的滑动窗口"><a href="#1-以字节位为单位的滑动窗口" class="headerlink" title="1. 以字节位为单位的滑动窗口"></a>1. 以字节位为单位的滑动窗口</h5><p><img src="https://i.loli.net/2020/02/15/giMn5VNmaOJcG7Q.png" srcset="/img/loading.gif" alt="窗口发送1.png"></p><p><img src="https://i.loli.net/2020/02/15/MNDqfvCGTW7lXs3.png" srcset="/img/loading.gif" alt="窗口发送2.png"></p><p><img src="https://i.loli.net/2020/02/15/57Ci3mGPIzxYkS4.png" srcset="/img/loading.gif" alt="窗口发送3.png"></p><p><img src="https://i.loli.net/2020/02/15/rsEBCUN6kqD92JV.png" srcset="/img/loading.gif" alt="窗口发送4.png"></p><p><img src="https://i.loli.net/2020/02/15/EDq73NYu5KRWkBJ.png" srcset="/img/loading.gif" alt="窗口发送5.png"></p><h5 id="2-超时重传时间的设置"><a href="#2-超时重传时间的设置" class="headerlink" title="2. 超时重传时间的设置"></a>2. 超时重传时间的设置</h5><p>TCP每发送一个报文段，就对这个报文段设置一次<code>计时器</code>。只要计数器设置的重传时间到但还没有收到确认，就要重传这一段报文段</p><h3 id="TCP协议如何实现流量控制"><a href="#TCP协议如何实现流量控制" class="headerlink" title="TCP协议如何实现流量控制"></a>TCP协议如何实现流量控制</h3><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收。</p><h4 id="1-利用滑动窗口实现流量控制"><a href="#1-利用滑动窗口实现流量控制" class="headerlink" title="1. 利用滑动窗口实现流量控制"></a>1. 利用滑动窗口实现流量控制</h4><p>发送方和接收方建立连接</p><p>接收方 设置接收窗口（rwnd）大小，发送方根据接收方的接收窗口设置发送窗口大小。</p><p>在发送过程中，接收方根据自己缓存大小能力给发送方发送 接收窗口大小，发送方根据这个进行动态调整</p><h3 id="TCP协议如何避免网络拥塞"><a href="#TCP协议如何避免网络拥塞" class="headerlink" title="TCP协议如何避免网络拥塞"></a>TCP协议如何避免网络拥塞</h3><h4 id="拥塞控制介绍"><a href="#拥塞控制介绍" class="headerlink" title="拥塞控制介绍"></a>拥塞控制介绍</h4><p>出现资源拥塞的条件： 对资源需求的总和 &gt; 可用资源</p><p><code>拥塞控制</code>：是一个全局性的过程，涉及到所有的主机、所以的路由器，以及与降低网络传输性能有关的所有因素。</p><p><code>流量控制</code>：指在给定的发送端 和 接收端 之间的点对点通信量的控制，它所要做的是抑制发送端发送数据的速率，以便使接收端来得及接收。</p><p><img src="https://i.loli.net/2020/02/17/jkCFIdHlucXnxKe.png" srcset="/img/loading.gif" alt="拥塞控制起的作用‘.png"></p><h4 id="拥塞控制处理方法"><a href="#拥塞控制处理方法" class="headerlink" title="拥塞控制处理方法"></a>拥塞控制处理方法</h4><p>TCP 进行拥塞控制的算法有四种：</p><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><code>发送方维持拥塞窗口 cwnd （congestion window）</code></p><p>发送窗口的实际上限值 = Min[rwnd，cwnd]x</p><h5 id="1-慢开始算法的原理"><a href="#1-慢开始算法的原理" class="headerlink" title="1. 慢开始算法的原理"></a>1. 慢开始算法的原理</h5><p><img src="https://i.loli.net/2020/02/17/1uJthsLwRfbmgdX.png" srcset="/img/loading.gif" alt="慢开始算法的原理.png"></p><p>发送方控制拥塞窗口的原则是：</p><ul><li>只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。</li><li>只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</li></ul><h5 id="2-拥塞避免算法"><a href="#2-拥塞避免算法" class="headerlink" title="2. 拥塞避免算法"></a>2. 拥塞避免算法</h5><p>拥塞避免算法思路：让拥塞窗口cwnd缓慢增大，即每经过一个往返世纪那就把发送方的拥塞窗口cwnd加1，而不是加倍，使拥塞窗口cwnd按线性规律缓慢增长。</p><p><img src="https://i.loli.net/2020/02/17/j9BicZP172LaHCK.png" srcset="/img/loading.gif" alt="慢开始和拥塞避免算法的实现举例.png"></p><p>拥塞避免不是说完全避免了拥塞，而是在拥塞避免阶段把拥塞窗口控制位按现行规律增长，使网络比较不容易出现拥塞。</p><h5 id="3-快重传算法"><a href="#3-快重传算法" class="headerlink" title="3. 快重传算法"></a>3. 快重传算法</h5><h5 id="4-快恢复"><a href="#4-快恢复" class="headerlink" title="4. 快恢复"></a>4. 快恢复</h5><h4 id="TCP-的传输连接管理-（三次握手）"><a href="#TCP-的传输连接管理-（三次握手）" class="headerlink" title="TCP 的传输连接管理 （三次握手）"></a>TCP 的传输连接管理 （三次握手）</h4><h5 id="传输连接有三个阶段："><a href="#传输连接有三个阶段：" class="headerlink" title="传输连接有三个阶段："></a>传输连接有三个阶段：</h5><ul><li>建立连接</li><li>数据传送</li><li>连接释放</li></ul><p>TCP 连接的建立都是才用<code>客户服务器方式</code></p><p>主动发起连接的应用进程叫做<code>客户（client）</code></p><p>被动等待连接建立的应用进程叫做<code>服务器（server）</code></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP连接建立三次握手.png" srcset="/img/loading.gif" alt="TCP连接建立三次握手"></p><h6 id="1-建立连接"><a href="#1-建立连接" class="headerlink" title="1. 建立连接"></a>1. 建立连接</h6><p>​    刚开始两端TCP进程都是 <code>closed（关闭）状态</code>。主机A作为客户端主动打开连接，主机B作为服务器被动打开连接。</p><p>​    一开始，主机B的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。然后服务器进程就处于 <code>LISTEN（收听）状态</code>,等待客户的连接请求，如果有客户请求，作出响应。</p><p>​    主机A的TCP客户进程也是首先创建<code>传输控制模块 TCB</code>，然后在打算建立 TCP连接时，向B发出连接请求报文段，这时首部中的同步位 SYN=1，同时选择一个初始号 seq=x。<code>TCP规定，SYN报文段（即SYN=1的报文段）不能携带数据，但要消耗一个序号</code>，同时TCP客户进程进入SYN-SENT（同步已发送）状态。</p><p>​    主机B收到连接请求报文后，如果同意建立连接，则向A发送确认。在确认报文段中应把<code>SYN位</code> 和 <code>ACK位</code> 都 置1，确认号 是 ACK=x + 1,同时也为自己选择一个初始序号 seq = y。此时，TCP服务器进程进入 <code>SYN-RCVD（同步收到）</code>状态。</p><p>​    TCP客户进程收到 B确认后，还要向B给出确认。确认报文段的ACK置1，确认号ACK=y + 1,而自己的序号 seq=x+1。<code>TCP规定，ACK报文段可以携带数据，但如果不携带数据不消耗序号</code>。这种情况下，一个数据报文段的序号依然是seq=x+1。这时，TCP连接已经建立，客户端A已经进入<code>ESTABLESHED（已建立连接）状态</code>。</p><p>​    当服务器 B TCP进程收到确认后，也进入<code>ESTABLESHED（已建立连接）状态</code></p><p>​    </p><p>思考：当客户端A收到服务器B的响应后为什么还要确认？</p><p>​    为了防止已失效的连接请求报文段又传给服务器B</p><h6 id="2-数据传送"><a href="#2-数据传送" class="headerlink" title="2. 数据传送"></a>2. 数据传送</h6><h6 id="3-连接释放"><a href="#3-连接释放" class="headerlink" title="3. 连接释放"></a>3. 连接释放</h6><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP握手建立状态.png" srcset="/img/loading.gif" alt="握手建立各个状态"></p><p><img src="https://raw.githubusercontent.com/mambaJun/picture/master/blog/TCP握手释放过程.png" srcset="/img/loading.gif" alt=""></p><p>数据传输结束后，，通信的双方都可释放连接。</p><ol><li>A进程先向TCP发出连接释放报文段，并停止发数据，主动关闭TCP连接。A把连接释放报文段首部的终止控制位（FIN）置1，其序号seq=u（等于前面以传送的数据的最后一个字节序号加一）。这时A进入<code>FIN-WAIT（终止等待）状态</code>等待 B 的确认。<code>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</code></li><li>B收到连接释放报文段后发出确认，确认号 ack=u+1，而这个报文段自己的序号是v（等于 B 前面已传送的数据最后一个字节序号加1）。然后 B 进入 CLOSE-WAIT（关闭等待）状态。TCP服务器进程 这时通知高层应用进程，因而从 A 到 B 这个方向的连接就释放了。此时，TCP连接处于半关闭（half-close）状态（<code>即A已经没有数据要发送了，但B如果发送数据，A依然要接收，也就是说从B到A这个方向的连接并没有关闭，并且这种状态维持一段时间</code>）</li><li>A 在收到 B的连接释放报文后，必须对此发出确认。把标记字段中的ACK置1，确认号ack=w+1,而自己的序号是 seq=u+1（<code>TCP 规定 前面发送过的 FIN报文段要消耗一个序号</code>）。然后进入到TIME-WAIT（时间等待）状态。<code>此时TCP连接还没释放掉，必须经过时间等待计时器 （TIME-WAIT timer）设置的时间2MSL后，A才进入CLOSED状态。时间 MSL叫做最长报文段寿命（Maximum Segment Lifetime）</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-应用层小结</title>
    <link href="/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%BA%94%E7%94%A8%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <url>/2020/02/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%BA%94%E7%94%A8%E5%B1%82%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机网络-应用层小结"><a href="#计算机网络-应用层小结" class="headerlink" title="计算机网络 应用层小结"></a>计算机网络 应用层小结</h1><div class="table-container"><table><thead><tr><th>OSI</th><th>DOD</th><th>TCP/IP协议集</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>Telent，FTP，SMTP，DNS，HTTP，RDP，POP3，SMTP等</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP，UCP</td></tr><tr><td>网络层</td><td>网络层</td><td>ARP，IP，RARP，ICMP，IGMP</td></tr><tr><td>数据链路层</td><td>网络接口</td><td>各种通信网络接口（以太网等）物理网络</td></tr><tr><td>物理层</td><td>网络接口</td></tr></tbody></table></div><h2 id="域名系统DNS（Domain-Name-System）"><a href="#域名系统DNS（Domain-Name-System）" class="headerlink" title="域名系统DNS（Domain Name System）"></a>域名系统DNS（Domain Name System）</h2><blockquote><p>​    在用户与互联网的主机通信时，必须要知道对方IP地址。然而用户很难记住二进制的地址。在应用层为了便于用户记住各种网络应用。在互联网中不仅有IP地址，还有域名。域名服务器DNS可以把互联网上的主机名字解析（转换）为 IP地址。域名系统：域名系统其实是名字系统，只不过互联网的命名系统种使用了许多<code>域</code>，所以叫做域名。</p></blockquote><p>DNS域名服务器作用：负责解析域名  将域名解析成IP地址。</p><p>域名：</p><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>根域名</td><td></td></tr><tr><td>顶级域名</td><td>com，edu，net，cn代表服务器性质</td></tr><tr><td>二级域名</td><td>自己定义申请的域名</td></tr></tbody></table></div><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><h3 id="DHCP-动态主机配置"><a href="#DHCP-动态主机配置" class="headerlink" title="DHCP 动态主机配置"></a>DHCP 动态主机配置</h3><ul><li>静态IP地址</li><li>动态IP地址</li></ul><h3 id="DHCP-客户端请求IP地址的过程"><a href="#DHCP-客户端请求IP地址的过程" class="headerlink" title="DHCP 客户端请求IP地址的过程"></a>DHCP 客户端请求IP地址的过程</h3><p>DHCP必须是静态地址</p><h2 id="文件传输协议-FTP（File-Transfer-Protocol）"><a href="#文件传输协议-FTP（File-Transfer-Protocol）" class="headerlink" title="文件传输协议　FTP（File　Transfer Protocol）"></a>文件传输协议　FTP（File　Transfer Protocol）</h2><h3 id="FTP连接方式："><a href="#FTP连接方式：" class="headerlink" title="FTP连接方式："></a>FTP连接方式：</h3><ul><li><p>控制连接：标准端口 21 ，用于发送 FTP 命令信息</p></li><li><p>数据连接：标准端口 20 ，用于上传、下载数据</p></li><li><p>数据连接的建立类型：</p><ul><li><p>主动模式：服务端从 20端口主动向客户端发起连接</p><p>主动模式防火墙需要打开21 和 20 端口</p></li><li><p>被动模式：服务端在指定范围内的<code>某个端口被动</code>等待客户端发起连接</p><p>防火墙只打开20和21端口，被动模式FTP不能下载数据，因为<code>某个端口</code>在防火墙上没有打开</p></li></ul></li></ul><h3 id="FTP传输模式："><a href="#FTP传输模式：" class="headerlink" title="FTP传输模式："></a>FTP传输模式：</h3><ul><li>文本模式：ASCII模式，以文本序列传输数据</li><li>二进制模式：Binary模式，以二进制序列传输数据</li></ul><h2 id="远程终端协议-Telnet"><a href="#远程终端协议-Telnet" class="headerlink" title="远程终端协议 Telnet"></a>远程终端协议 Telnet</h2><p>默认23端口</p><h2 id="远程桌面-RDP（Remote-Desktop-Protocol）"><a href="#远程桌面-RDP（Remote-Desktop-Protocol）" class="headerlink" title="远程桌面 RDP（Remote Desktop Protocol）"></a>远程桌面 RDP（Remote Desktop Protocol）</h2><p>默认监听 TCP:3389</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 更改用户密码</span>net user administrator al!<span class="hljs-meta">#</span><span class="bash"> 添加用户</span>net user jun al! /add<span class="hljs-meta">#</span><span class="bash"> 将用户添加到远程桌面组 Remote Desktop Users组</span><span class="hljs-meta">#</span><span class="bash"> Server多用户操作系统 启用远程桌面可以多用户同时使用服务器</span></code></pre><h2 id="超文本传输协议HTTP-（Hyper-Text-Transfer-Protocol）"><a href="#超文本传输协议HTTP-（Hyper-Text-Transfer-Protocol）" class="headerlink" title="超文本传输协议HTTP （Hyper Text Transfer Protocol）"></a>超文本传输协议HTTP （Hyper Text Transfer Protocol）</h2><h3 id="万维网（World-Wide-Web）"><a href="#万维网（World-Wide-Web）" class="headerlink" title="万维网（World Wide Web）"></a>万维网（World Wide Web）</h3><ul><li><p>客户服务器方式</p></li><li><p>客户程序</p></li><li><p>浏览器</p></li><li><p>服务器程序</p></li><li><p>万维网服务器</p></li><li><p>页面</p></li><li><p>统一资源定位符</p><p>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p></li><li><p>HTTP 使用TCP连接</p></li><li><p>超文本标记语言HTML</p></li><li><p>搜索引擎</p></li></ul><h2 id="电子邮件（SMTP，POP3，IMAP）"><a href="#电子邮件（SMTP，POP3，IMAP）" class="headerlink" title="电子邮件（SMTP，POP3，IMAP）"></a>电子邮件（SMTP，POP3，IMAP）</h2>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>应用层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈我对递归的一些经验</title>
    <link href="/2020/02/01/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
    <url>/2020/02/01/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运输层-概述和运输层服务</title>
    <link href="/2020/01/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82-%E6%A6%82%E8%BF%B0%E5%92%8C%E8%BF%90%E8%BE%93%E5%B1%82%E6%9C%8D%E5%8A%A1/"/>
    <url>/2020/01/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82-%E6%A6%82%E8%BF%B0%E5%92%8C%E8%BF%90%E8%BE%93%E5%B1%82%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="运输层-概述和运输层服务"><a href="#运输层-概述和运输层服务" class="headerlink" title="运输层 概述和运输层服务"></a>运输层 概述和运输层服务</h1><p><img src="https://i.loli.net/2020/01/29/KhQzJYsxeNpEUGw.png" srcset="/img/loading.gif" alt="计算机网络分层"></p><p>运输层是介于应用层和网络层之间，为运行在不同主机上的应用进程提供直接的通信服务起至关重要作用。</p><p>这里主要讨论 <code>TCP</code> 和<code>UDP</code> 运输层协议。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>TCP协议</tag>
      
      <tag>运输层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-网络层小结</title>
    <link href="/2020/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%8F%E7%BB%93/"/>
    <url>/2020/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="网络层小结"><a href="#网络层小结" class="headerlink" title="网络层小结"></a>网络层小结</h1><h2 id="一、网络层提供的服务"><a href="#一、网络层提供的服务" class="headerlink" title="一、网络层提供的服务"></a>一、网络层提供的服务</h2><p><img src="https://i.loli.net/2020/02/06/MV3FgBenCRmpsar.png" srcset="/img/loading.gif" alt="数据包在互联网中的传递.png"></p><p>网络层 负责<code>在不同网络之间尽力转发数据包</code> 基于数据包的IP地址转发 不负责丢失重传 不负责顺序</p><pre><code class="hljs shell">Would you like to enter the initial configuration dialog? [yes/no]: noPress RETURN to get started!<span class="hljs-meta">#</span><span class="bash"> 进入路由器</span><span class="hljs-meta">Router&gt;</span><span class="bash"><span class="hljs-built_in">enable</span></span><span class="hljs-meta">#</span><span class="bash"> 终端配置</span><span class="hljs-meta">Router#</span><span class="bash">configure terminal</span><span class="hljs-meta">#</span><span class="bash"> 配置 具体的哪个端口</span><span class="hljs-meta">Router(config)#</span><span class="bash">interface FastEthernet0/0</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">no shutdown</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">ip address 10.0.0.1 255.0.0.0</span><span class="hljs-meta">Router&gt;</span><span class="bash"><span class="hljs-built_in">enable</span></span><span class="hljs-meta">Router#</span><span class="bash">configure terminal </span><span class="hljs-meta">Router(config)#</span><span class="bash">interface serial 2/0</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">no shutdown </span><span class="hljs-meta">Router(config-if)#</span><span class="bash">clock rate 64000</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">ip address 11.0.0.1 255.0.0.0</span><span class="hljs-meta">#</span><span class="bash"> 退出当前接口</span><span class="hljs-meta">Router(config-if)#</span><span class="bash"><span class="hljs-built_in">exit</span></span><span class="hljs-meta">#</span><span class="bash"> 进入一个接口</span><span class="hljs-meta">Router(config)#</span>]<span class="hljs-meta">#</span><span class="bash"> 设置IP地址子网掩码</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">ip address 12.0.0.1 255.255.0.0</span><span class="hljs-meta">#</span><span class="bash"> 接口打开</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">no shutdown </span><span class="hljs-meta">#</span><span class="bash"> 查看路由表</span><span class="hljs-meta">Router#</span><span class="bash">show ip route</span><span class="hljs-meta">#</span><span class="bash"> 添加静态路由表</span><span class="hljs-meta">#</span><span class="bash"> 去哪里网段 -&gt; 12.0.0.0 255.255.0.0</span><span class="hljs-meta">#</span><span class="bash"> 去网段中具体的哪个IP -&gt; 11.0.0.2</span><span class="hljs-meta">Router(config)#</span><span class="bash">ip route 12.0.0.0 255.255.0.0 11.0.0.2</span></code></pre><p>路由器到路由器之间需要路由表才知道，之间路由器的下一跳如何走</p><p>网络设备与iOS之间的关系</p><h2 id="二、网络层协议"><a href="#二、网络层协议" class="headerlink" title="二、网络层协议"></a>二、网络层协议</h2><h2 id="三、网络层如何转发数据包-网络设备"><a href="#三、网络层如何转发数据包-网络设备" class="headerlink" title="三、网络层如何转发数据包 网络设备"></a>三、网络层如何转发数据包 网络设备</h2><p>网络设备和OSI参考模型关系     计算机通信的过程　本网段通信跨网段</p><ol><li><p>应用层程序准备要传输的文件</p></li><li><p>传输层 将文件分段 并 编号</p></li><li><p>网络层 添加<code>目标IP地址（IP4）</code>和<code>源IP地址（IP3）</code></p></li><li><p>数据链路层 使用自己的子网掩码 判断自己在哪个网段，使用自己的子网掩码 判断目标地址在哪个网段两种情况</p><ol><li>如果是同一个网段     arp 协议广播解析 目标IP地址的MAC</li><li>如果不是同一个网段 发送端</li></ol><p>添加MAC地址，确定下一跳把数据给谁</p></li><li><p>物理层 把数据变成比特流进行传输</p><p>集线器只是负责将比特流的传递，和网线功能相同</p></li><li><p>数据链路层 交换机将比特流 存储 根据 MAC转发</p></li></ol><p><img src="https://i.loli.net/2020/02/09/vnK1iRLkAadI2OW.png" srcset="/img/loading.gif" alt="数据过程.png"></p><h2 id="四、网络层协议"><a href="#四、网络层协议" class="headerlink" title="四、网络层协议"></a>四、网络层协议</h2><p><img src="https://i.loli.net/2020/02/09/RYutJ5xls4DVjMq.png" srcset="/img/loading.gif" alt="TCPIP协议层次.png"></p><p>在网络层中 <code>ARP 协议</code> 为 <code>IP协议</code>提供服务,<code>IP协议</code>为<code>ICMP</code>或<code>IGMP</code>提供服务</p><h3 id="1-IP协议-（RIP、OSPF）"><a href="#1-IP协议-（RIP、OSPF）" class="headerlink" title="1. IP协议 （RIP、OSPF）"></a>1. IP协议 （RIP、OSPF）</h3><p>IP协议是个统称，所有能够让路由器学习路由表的协议都是IP协议。分两种<code>静态路由</code>和<code>动态路由</code></p><ul><li><p>静态路由 是 管理员告诉路由器没有直连（不在同一个网段）的网络下一跳给谁（给路由器配置路由表）</p><ul><li><p>优点：配置路由表可以实现负载均衡</p></li><li><p>缺点：适合小规模网络，不能自动调整路由</p></li></ul></li><li><p>动态路由 是 路由器使用IP协议自己学习网络怎么走</p><p>有以下几种协议</p><p>| 协议名称 | 描述                                                         |<br>| ———— | —————————————————————————————— |<br>| RIP协议  | 周期性广播路由表 选择路径的标准（跳数），30秒更新一次，目的是告诉其相邻自己正在运行，最大条数是 15跳 |<br>| OSPF协议 | 根据带宽选择路径                                             |</p></li></ul><p>网络畅通的条件 <code>数据包有去有回</code></p><pre><code class="hljs shell"><span class="hljs-meta">Router&gt;</span><span class="bash"><span class="hljs-built_in">enable</span></span><span class="hljs-meta">Router#</span><span class="bash">config terminal </span><span class="hljs-meta">Router(config)#</span><span class="bash">interface fastEthernet 0/0</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">ip address 192.168.0.1 255.255.255.0</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">no shutdown </span><span class="hljs-meta">#</span><span class="bash"> 设置串口</span><span class="hljs-meta">Router(config)#</span><span class="bash">interface serial 2/0</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">clock rate ?</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">clock rate 64000</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">ip address 172.16.0.1 255.255.255.0</span><span class="hljs-meta">Router(config-if)#</span><span class="bash">no shutdown</span></code></pre><h3 id="2-ARP协议"><a href="#2-ARP协议" class="headerlink" title="2. ARP协议"></a>2. ARP协议</h3><p><code>ARP</code>将IP地址通过广播 目标MAC地址是 形如<code>FF-FF-FF-FF-FF-FF</code> 解析目标IP地址的MAC地址，分两种情况</p><p>前提是ARP协议只能作用在本网段中</p><ol><li>如果目标IP地址在本网段中 获得MAC地址</li><li>如果目标IP地址不在本网段中，将获得网关的MAC地址</li></ol><p>查看本地缓存物理地址</p><pre><code class="hljs shell">arp -a</code></pre><h3 id="3-网际控制报文协议-ICMP"><a href="#3-网际控制报文协议-ICMP" class="headerlink" title="3. 网际控制报文协议 ICMP"></a>3. 网际控制报文协议 ICMP</h3><h4 id="1-ping-基于网络层ICMP协议-来排除网络故障"><a href="#1-ping-基于网络层ICMP协议-来排除网络故障" class="headerlink" title="1. ping 基于网络层ICMP协议 来排除网络故障"></a>1. ping 基于网络层ICMP协议 来排除网络故障</h4><ol><li>ping 命令诊断网络故障</li></ol><p>​    ping（Packet Internet Grope）,因特网包探索器，用于测试网络连接量的程序。ping发送一个ICMP回声请求消息给目的地并报告是否收到希望的ICMP回声应答。</p><p>​    ping 指的是端对端联通，通常用来作为可用性的检查，但是某个病毒强行大量远程执行ping命令抢占网络资源，导致系统变慢，网络变慢。严禁ping入侵作为大多数防火墙的一个基本功能</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看 ping 参数</span>ping /?<span class="hljs-meta">#</span><span class="bash"> 一直ping</span>ping IP -t# ping 10.0.0.1 -t<span class="hljs-meta">#</span><span class="bash"> 指定ping 发包大小</span>ping -l 200 IP# ping -l 200 10.0.0.1 ping 10.0.0.1  -l 200<span class="hljs-meta">#</span><span class="bash"> 设置 TTL 值，能够跟踪数据包途径的路由器</span>ping IP -i TTL# ping 8.8.8.8 -i 1</code></pre><p>DOS 下面可以ping 网站可以解析出域名说明 网络层是通的</p><ol><li>pathping (windows 专有 跟踪数据包路径 计算丢包情况)</li></ol><pre><code class="hljs shell">C:\Users\Jun&gt;pathping www.baidu.com通过最多 30 个跃点跟踪到 www.a.shifen.com [180.101.49.12] 的路由:  0  DESKTOP-PNGGK3V [192.168.1.4]  1  CHINATELECOM [192.168.1.1]  2  100.82.128.1  3  218.2.122.197  4  58.213.94.54  5     *        *        *正在计算统计信息，已耗时 100 秒...            指向此处的源   此节点/链接跃点  RTT    已丢失/已发送 = Pct  已丢失/已发送 = Pct  地址  0                                           DESKTOP-PNGGK3V [192.168.1.4]                                7/ 100 =  7%   |  1  153ms     7/ 100 =  7%     0/ 100 =  0%  CHINATELECOM [192.168.1.1]                                6/ 100 =  6%   |  2  143ms    16/ 100 = 16%     3/ 100 =  3%  100.82.128.1                                0/ 100 =  0%   |  3  178ms    13/ 100 = 13%     0/ 100 =  0%  218.2.122.197                                3/ 100 =  3%   |  4  169ms    16/ 100 = 16%     0/ 100 =  0%  58.213.94.54跟踪完成。</code></pre><ol><li>tracert (windows 专有)</li></ol><pre><code class="hljs shell">C:\Users\Jun&gt;tracert www.baidu.com通过最多 30 个跃点跟踪到 www.a.shifen.com [180.101.49.12] 的路由:  1    99 ms   118 ms   119 ms  CHINATELECOM [192.168.1.1]  2     *        *       77 ms  100.82.128.1  3   232 ms   110 ms   133 ms  218.2.122.197  4    55 ms   110 ms   133 ms  58.213.94.54  5     *        *      254 ms  58.213.94.90  6    58 ms   106 ms   120 ms  58.213.96.130  7     *        *        *     请求超时。  8     *        *        *     请求超时。  9     *        *        *     请求超时。 10    75 ms   105 ms   119 ms  180.101.49.12跟踪完成。</code></pre><ol><li><p>traceroute IP    路由器上跟踪数据包路径的命令</p><pre><code class="hljs shell">traceroute 10.0.0.1</code></pre></li></ol><h4 id="2-TTL-Time-to-live-生存周期"><a href="#2-TTL-Time-to-live-生存周期" class="headerlink" title="2. TTL  (Time to live) 生存周期"></a>2. TTL  (Time to live) 生存周期</h4><p>TTL 从 一个数（初始值跟操作系统有关，这个值是可以设置的）开始倒数 没经过一个路由器就减一，当 TTL=0时，数据包被丢弃，防止数据包在网络中循环，占用网路资源</p><p>初始值：</p><ul><li>Linux 64</li><li>Windows 128</li><li>Unix 255</li></ul><h3 id="4-Internet组播管理协议-IGMP"><a href="#4-Internet组播管理协议-IGMP" class="headerlink" title="4. Internet组播管理协议 IGMP"></a>4. Internet组播管理协议 IGMP</h3><p>点到点（联想TCP）</p><p>广播（联想UDP）</p><p>组播=多播（联想看电视可以换频道）</p><h2 id="五、IP数据包格式"><a href="#五、IP数据包格式" class="headerlink" title="五、IP数据包格式"></a>五、IP数据包格式</h2><h3 id="1-IP数据包"><a href="#1-IP数据包" class="headerlink" title="1.IP数据包"></a>1.IP数据包</h3><p><img src="https://i.loli.net/2020/02/11/YKT3bzwxRA8XWJ1.png" srcset="/img/loading.gif" alt="IP数据包.png"></p><h4 id="A-IP数据包由首部和数据两部分组成。"><a href="#A-IP数据包由首部和数据两部分组成。" class="headerlink" title="A. IP数据包由首部和数据两部分组成。"></a>A. IP数据包由首部和数据两部分组成。</h4><ul><li>首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的。</li><li>在首部的固定部分的后面是一些可选阻断，其长度是可变的。</li><li>首部是在拿到传输层的数据后在网络层添加的</li></ul><h4 id="B-数据包结构"><a href="#B-数据包结构" class="headerlink" title="B. 数据包结构"></a>B. 数据包结构</h4><ol><li>| 名称                         | 作用                                                         |<br>| —————————————— | :—————————————————————————————- |<br>| 版本                         | 用来表示TCP/IP协议版本　4/6                                  |<br>| 标识                         | 标识是哪个数据包的分片，比如都是 100，                       |<br>| 总长度                       | 整个数据包的总长度                                           |<br>| 标志                         | 标志（flag）占3位，目前只有前两位有意义，<br />标志字段最低位是MF（More Fragment）。MF=1表示后面“还有分片”，MF=0表示是最后一个分片 标志字段中间一位是DF（Don’t Fragment）只有当DF= 0时才允许分片 |<br>| 片偏移                       | ping www.baidu.com -t -l 65500 ,可以ping 发大包，来抓包演示一下片偏移<br />片偏移表示在整个字节中的位置<img src="https://i.loli.net/2020/02/11/wMpZ5qBIQ8zgVRv.png" srcset="/img/loading.gif" alt="IP数据报分片举例.png"> |<br>| 生存时间  TTL  Time  to live | TTL 从 一个数（初始值跟操作系统有关，这个值是可以设置的）开始倒数 没经过一个路由器就减一，当 TTL=0时，数据包被丢弃，防止数据包在网络中循环，占用网路资源<br />初始值：<br />          Linux     64<br />          Windows 128<br />          Unix 225 |<br>| 协议号                       | 协议字段指出将数据部分交给哪个进程处理，协议可以是<br />传输层的中（TCP - 6、UDP - 17）<br /> 网络层中 （ICMP - 1、IGMP - 2、OSPF - 89）<br />　TCP－１<img src="https://i.loli.net/2020/02/11/oJfn1eKIX74Fs8h.png" srcset="/img/loading.gif" alt="IP中协议号.png"> |<br>| 首部检验和                   | <img src="https://i.loli.net/2020/02/11/OE9BpbvS6aQinx1.png" srcset="/img/loading.gif" alt="首部检验和校验过程.png"> |</li></ol><p><img src="https://i.loli.net/2020/02/11/5YdSiePDEUMVJ6m.png" srcset="/img/loading.gif" alt="IP首部演示.png"></p><p>网络层 数据包 65535字节（ 2^16 - 1）,数据链路层 数据最大 1500字节  MTU（最大传输单元）,当网络层的数据包大于 1500字节，网络层就会<code>数据包分片</code>,一般情况下不用分片。在接收方的数据链路层将分片重新组装成数据包给网络层。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li>网络设备的机械特性<ul><li>电器特性</li><li>功能特性</li><li>过程特性</li></ul></li><li>数据通信的基础知识<ul><li>数字信号</li><li>模拟信号</li></ul></li><li>频分多路复用</li><li>时分多路复用</li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="　 数据链路层"></a>　 数据链路层</h2><ul><li><p>封装成帧</p></li><li><p>透明封装</p></li><li>无差错接受</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>使用协议</th></tr></thead><tbody><tr><td>点到点线路的数据链路层</td><td>PPP（Point-to-point protocol）</td></tr><tr><td>广播信道的数据链路层</td><td>CSMA /CD</td></tr></tbody></table></div><ul><li>以太网 100M 1000M 10000M</li><li>集线器</li><li>网桥</li><li>交换机</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>IP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从 三、四数之和到n数之和的推导</title>
    <link href="/2020/01/17/%E4%BB%8E-%E4%B8%89%E3%80%81%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%E5%88%B0n%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9A%84%E6%8E%A8%E5%AF%BC/"/>
    <url>/2020/01/17/%E4%BB%8E-%E4%B8%89%E3%80%81%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%E5%88%B0n%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9A%84%E6%8E%A8%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h1><blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。<br>注意：<br>答案中不可以包含重复的四元组。  </p></blockquote><p>下面把题目变一下</p><blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d …m ，使得 a + b + c + d + … + m 的值与 target 相等？找出所有满足条件且不重复的m元组。<br>注意：<br>答案中不可以包含重复的m元组。 </p></blockquote><p>通过 两数之和、三数之和、四数之和 推出 n 数之和</p><p>先说一下两数之和，最容易想的一定是 两层for循环 O(n^2)  优化方法 用 map key匹配的方法 优化成 O(n)</p><p>下面给个这类通用方法；  </p><p>这里 的 排序很重要，如果不排序发现根本没法下手<br>每多一层就加一层 for,最后简化成 三数之和 （for循环 ＋ 双指针）</p><ul><li>步骤</li></ul><ol><li>排序</li><li>for 里嵌套 for一直到 三数之和</li><li>over<br>提示：<br> for 和 递归 可以互相转换，也就是说通过递归，一直到递归出口，但是递归比for更加消耗内存，这个方法不适用n 过大，还在刷题总结中，后面看看有没有更好的方法</li></ol><ul><li>代码<br>三数之和<pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">2</span>; i++) &#123;            <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">break</span>;            &#125;            <span class="hljs-comment">// 跳过重复答案</span>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] != nums[i - <span class="hljs-number">1</span>])) &#123;                <span class="hljs-keyword">int</span> l = i + <span class="hljs-number">1</span>;                <span class="hljs-keyword">int</span> r = nums.length - <span class="hljs-number">1</span>;                <span class="hljs-keyword">while</span> (l &lt; r) &#123;                    <span class="hljs-keyword">if</span> (nums[i] + nums[l] + nums[r] == target) &#123;                        result.add(Arrays.asList(nums[i], nums[l], nums[r]));                        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="hljs-number">1</span>]) l++;                        l++;                        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="hljs-number">1</span>]) r--;                        r--;                        <span class="hljs-keyword">continue</span>;                    &#125;                    <span class="hljs-keyword">if</span> (nums[i] + nums[l] + nums[r] &lt; target) &#123;                        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="hljs-number">1</span>]) l++;                        l++;                        <span class="hljs-keyword">continue</span>;                    &#125;                    <span class="hljs-keyword">if</span> (nums[i] + nums[l] + nums[r] &gt; target) &#123;                        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="hljs-number">1</span>]) r--;                        r--;                        <span class="hljs-keyword">continue</span>;                    &#125;                &#125;            &#125;        &#125;</code></pre>四数之和  <pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;        List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">if</span> (nums == <span class="hljs-keyword">null</span> || nums.length &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        Arrays.sort(nums);        <span class="hljs-keyword">int</span> length = nums.length;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">3</span>; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; length - <span class="hljs-number">2</span>; ++j) &#123;                <span class="hljs-keyword">int</span> l = j + <span class="hljs-number">1</span>;                <span class="hljs-keyword">int</span> r = length - <span class="hljs-number">1</span>;                <span class="hljs-keyword">while</span> (l &lt; r) &#123;                    <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[l] + nums[r] == target) &#123;                        result.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));                        l = moveLeft(nums, l, r);                        r = moveRight(nums, l, r);                        <span class="hljs-keyword">continue</span>;                    &#125;                    <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[l] + nums[r] &lt; target) &#123;                        l = moveLeft(nums, l, r);                        <span class="hljs-keyword">continue</span>;                    &#125;                    r = moveRight(nums, l, r);                &#125;                <span class="hljs-keyword">while</span> (j &lt; length - <span class="hljs-number">2</span> &amp;&amp; nums[j] == nums[j + <span class="hljs-number">1</span>]) j++;            &#125;            <span class="hljs-keyword">while</span> (i &lt; length - <span class="hljs-number">3</span> &amp;&amp; nums[i] == nums[i + <span class="hljs-number">1</span>]) i++;        &#125;        <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">moveRight</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="hljs-number">1</span>]) r--;    r--;    <span class="hljs-keyword">return</span> r;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">moveLeft</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="hljs-number">1</span>]) l++;    l++;    <span class="hljs-keyword">return</span> l;&#125;</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-TCP协议</title>
    <link href="/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="传输控制协议-TCP"><a href="#传输控制协议-TCP" class="headerlink" title="传输控制协议 TCP"></a>传输控制协议 TCP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>TCP是面向连接的传输协议</p></li><li><p>每一条TCP连接只能有两个端点（endpoint），每一条TCP连接只能是点对点（一对一）</p><p>TCP连接的端点不是主机，不是主机IP地址，不是应用进程，也不是传输层的协议端口。TCP连接的端点是套接字（socket）（进程的入口）</p><pre><code class="hljs TXT">套接字 socket &#x3D; （IP地址：端口）每一条TCP连接唯一地被通信两端的两个端点（套接字）确定TCP连接 ::&#x3D; &#123;Socket1,Socket2&#125;&#x3D;&#123;(IP1:port1),(IP2:port2)&#125;</code></pre></li></ul><ul><li><p>TCP提供可靠的交付服务</p></li><li><p>TCP提供全双工通信</p></li><li><p>面向字节流</p></li></ul><p><img src="https://i.loli.net/2020/01/07/zxAUH6cR8nYBhqi.png" srcset="/img/loading.gif" alt="tcp1.png"><img src="https://i.loli.net/2020/01/07/e3zGocvkX2lbQJR.png" srcset="/img/loading.gif" alt="tcp2.png"></p><p><img src="https://i.loli.net/2020/01/07/LTxVzPCHrm453IA.png" srcset="/img/loading.gif" alt="tcp3.png"></p><p><img src="https://i.loli.net/2020/01/07/LF3kS7ReVmdUI41.png" srcset="/img/loading.gif" alt="tcp4.png"></p><p><img src="https://i.loli.net/2020/01/07/tKeLzubr8ABQypC.png" srcset="/img/loading.gif" alt="tcp5.png"></p><p><img src="https://i.loli.net/2020/01/07/MZ8D6pt9gAWIsRq.png" srcset="/img/loading.gif" alt="tcp6.png"></p><h2 id="TCP协议特点"><a href="#TCP协议特点" class="headerlink" title="　TCP协议特点"></a>　TCP协议特点</h2><ol><li>TCP实现可靠传输（三次握手）</li><li>TCP实现流量控制</li><li>TCP避免网络拥塞</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>TCP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络 UDP协议</title>
    <link href="/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-UDP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2020/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-UDP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>UDP是无连接的，也就是发送数据之前不需要建立连接</li><li>UDP尽最大努力交付，但是不保证可靠的交付，同时也不支持拥塞控制</li><li>UDP是面向报文的，没有拥塞控制，适合多媒体通信（想想视频播放）</li><li>UDP支持一对一、一对多、多对一、多对多的交互通信</li><li>UDP的首部开销小，只有 8 个字节</li></ul><p><img src="https://i.loli.net/2020/01/07/kiHqwLajTyMFIO2.png" srcset="/img/loading.gif" alt="UDP.png"></p><p>UDP首部结构（数字代表字节）</p><p><img src="https://i.loli.net/2020/01/07/Ex2D1j5gCh9r3WV.png" srcset="/img/loading.gif" alt="UDP首部.png"></p><p>在计算检验和时，临时把“伪首部”和UDP用户数据报文连接在一起。伪首部仅仅是为了计算检验和</p><p><img src="https://i.loli.net/2020/01/07/BSOedH1CasJoPcD.png" srcset="/img/loading.gif" alt="UDP检验和.png"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>UDP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM学习</title>
    <link href="/2019/12/27/JVM%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/12/27/JVM%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM入门（一）"><a href="#JVM入门（一）" class="headerlink" title="JVM入门（一）"></a>JVM入门（一）</h1><h2 id="JVM-结构"><a href="#JVM-结构" class="headerlink" title="JVM 结构"></a>JVM 结构</h2><ol><li><p>类加载子系统 和 方法区<br> 类加载子系统：负责从文件系统和网络中加载 Class信息，加载的类信息存放在一块 -&gt; 称为方法区<br> 除了类的信息外，方法区还存放运行时常量池信息，包括字符串面量，数字常量（这部分常量信息是Class文件中常量池部分内存映射）</p></li><li><p>Java堆 *<br> Java堆在虚拟机启动时建立，它是Java程序最主要的内存工作区</p></li><li><p>直接内存</p></li><li>垃圾回收机制 *</li><li>Java栈<br> 每个Java虚拟机线程都有一个私有的Java栈，一个线程的Java栈在线程创建的时候被创建，Java栈中保存着帧信息，<br> Java栈中保存着局部变量，方法参数，同时和Java方法的调用、返回密切相关</li><li>本地方法栈<br> 本地方法栈和Java栈十分类似，不同在 <pre><code> Java栈用于方法调用 本地方法栈用于本地方法调用</code></pre> 作为对Java虚拟机的重要拓展，Java虚拟机允许Java直接调用本地方法（通常是c写的）</li><li>PC（Program Counter）<br> PC寄存器也是每个线程私有的空间创建（跟Java栈相似），Java虚拟机会给每个Java线程创建PC寄存器。在任意时刻，一个Java线程总是在执行一个方法，<br> 这个正在执行方法是 <code>当前方法</code> 。<pre><code> 如果当前方法是本地方法，那么PC寄存器的值是 undefined 如果是Java方法，PC寄存器就会指向当前正在被执行的指令</code></pre></li><li>执行引擎<br> 执行引擎是Java虚拟机最核心组件之一，负责执行虚拟机的字节码，现在虚拟机为了提高执行效率，会使用<code>即时编译（Just In Time JIT）</code>技术将方法编译成机器码后再执行<br><img src="https://i.loli.net/2019/12/27/d9HCTrUg73VPulD.png" srcset="/img/loading.gif" alt="基本结构.png"><h2 id="JVM堆结构图-和-分代"><a href="#JVM堆结构图-和-分代" class="headerlink" title="JVM堆结构图 和 分代"></a>JVM堆结构图 和 分代</h2><img src="https://i.loli.net/2019/12/27/tKQrexXydm6bLl3.png" srcset="/img/loading.gif" alt="java堆结构.png"><br> Java虚拟机根据对象存活周期不同，把堆内存分成几块，一般分为<code>新生代，老年代，永久代（对于HotSpot虚拟机而言）</code>，JVM就是按照这个策略划分周期</li></ol><p>为什么要分代？<br>    堆内存是虚拟机管理的<code>内存中最大的一块，垃圾回收最频繁的一块</code>，程序中所有对象实例都存放在堆内存中。给<code>堆内存分代是为了提高对象内存分配和垃圾回收效率</code><br>    如果不划分，所有新创建的对象和生命周期很长的对象放在一起，随着程序执行，堆内存需要频繁进行垃圾收集，每次回收都要遍历所有的对象<br>    遍历对象会浪费巨大的时间代价，影响GC效率</p><pre><code>有了分代的情况，新创建的对象会在新生代中分配内存，经过多次回收依然存活的对象放在老年代中，静态属性、类信息方法老年代中。新生代中对象存活时间短，只需要在新生代中频繁进行GC老年代中生命周期长，GC频率低，永久代中一般不进行垃圾回收根据不同年代的特点采用适合的垃圾回收算法，分代收集很大提升了收集效率，这都是内存分代的好处</code></pre><p>内存分代划分<br>    Java虚拟机将堆内存分为<code>新生代、老年代、永久代</code>，永久代是HotSpot VM特有概念<br>    永久代主要存放<code>常量、类信息、静态变量</code>和垃圾回收关系不大</p><h3 id="新生代（Yong-Generation）"><a href="#新生代（Yong-Generation）" class="headerlink" title="新生代（Yong Generation）"></a>新生代（Yong Generation）</h3><pre><code>新生成的对象优先存在新生代中，新生代对象存活率低，在新生代中，回收效率高。一般回收70%~95%新生代划分为三块，Eden空间和两个较小Survivor空间，默认比例为 8:1:1。通过 复制算法 进行虚拟机配置阀值默认是15 进入老年代</code></pre><h3 id="老年代（Old-Generation）"><a href="#老年代（Old-Generation）" class="headerlink" title="老年代（Old Generation）"></a>老年代（Old Generation）</h3><pre><code>在新生代中经历多次（虚拟机配置阀值）GC后仍然存活的对象进入老年代，老年代中的对象生命周期长，存活率高，在老年代中进行GC频率相对低，而且回收速度慢</code></pre><h3 id="永久代（Permanent-Generation）"><a href="#永久代（Permanent-Generation）" class="headerlink" title="永久代（Permanent Generation）"></a>永久代（Permanent Generation）</h3><pre><code>永久代存储类信息、常量、静态常量</code></pre><h2 id="JVM垃圾回收算法-和-收集器"><a href="#JVM垃圾回收算法-和-收集器" class="headerlink" title="JVM垃圾回收算法 和 收集器"></a>JVM垃圾回收算法 和 收集器</h2><h3 id="1-垃圾回收常见算法"><a href="#1-垃圾回收常见算法" class="headerlink" title="1 垃圾回收常见算法"></a>1 垃圾回收常见算法</h3><ul><li>引用计数法</li><li>复制算法（Coping）<br>  算法把内存空间划分成两个相等区域，每次只使用一个区域，垃圾回收时，遍历当前使用区域，把当前使用中的对象复制到另外一个区域中。<pre><code>  次算法每次只处理正在使用中的对象，因此复制成本小，同时复制过去以后还能进行`相应的内存整理`，不会出现“碎片”问题。此算法`缺点是需要两倍内存空间`</code></pre>  新生代中的survivor区<br><img src="https://i.loli.net/2019/12/27/YeRsurXDNHEnCyU.png" srcset="/img/loading.gif" alt="复制算法图解"></li><li><p>标记-清除（Mark-Sweep）<br>算法执行分两个阶段，  </p><ul><li>第一个阶段：从引用根节点开始标记所有被引用的对象</li><li>第二个阶段：遍历整个堆，把未标记对象清除<br><code>此算法需要暂停整个应用</code>，同时，会<code>产生内存碎片</code><br><img src="https://i.loli.net/2019/12/27/jSO4N6x92ZluDqT.png" srcset="/img/loading.gif" alt="标记清除.png"></li></ul></li><li><p>标记-整理（Mark-Compact）<br>算法结合了“标记-清除”和“复制”两个算法优点。分为两个阶段  </p><ul><li>第一个阶段：从根节点开始标记所有被引用对象</li><li>第二个阶段：遍历整的堆，把清除未标记对象并且把对象“压缩”到堆中的其中一块，按顺序排放，<br>这个算法避免了“标记-清除”的碎片问题，也避免了“复制”算法的空间问题<br><img src="https://i.loli.net/2019/12/27/1RnjXCJVL7gNIF4.png" srcset="/img/loading.gif" alt="标记整理.png"></li></ul></li></ul><h3 id="2-JVM垃圾收集器"><a href="#2-JVM垃圾收集器" class="headerlink" title="2 JVM垃圾收集器"></a>2 JVM垃圾收集器</h3><p>Scavenge GC（次收集）和Full GC（前收集）</p><ul><li><p>新生代 GC（Scavenge GC）：Scavenge GC指发生在新生代的GC，因为新生代的Java对象大多都是存活时间短，所以Scavenge GC非常频繁，回收速度也比较快。当Eden空间空间不足给对象分配内存时，会触发Scavenge GC。</p><p>​        一般情况下，当新对象生成，并且在Eden 申请空间失败时，就会触发Scavenge GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区，这种GC方式是对年轻代的Eden区进行，不会影响老年代。因为大部分对象都是从Eden区开始，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而一般需要使用速度快、效率高的算法，<br>使Eden去尽快空闲出来</p></li><li><p>老年代GC（Full GC/Major GC）：Full GC指发生在老年代的GC，出现了Full GC，一般会伴随至少一次的Minor GC（老年代的对象大部分是Minor GC过程中从新生代进入老年代），比如分配担保失败。Full GC的速度一般会比Minor GC慢10倍以上。<code>当老年代内存不足或者显示调用System.gc() 方法，会触发Full GC</code></p></li></ul><p>小结：</p><ul><li>Scavenger GC：当年轻代堆内存紧张会触发，相对于全收集来说，收集间隔短</li><li>Full GC：当老年代或永久代堆满了，会触发Full GC可以使用 System.gc() 来显示启动Full GC，Full GC一般根据堆大小的不同，需要的时间不相同，但一般会比较长，超过3-5秒已经算长了</li></ul><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring boot 整合 Elasticsearch</title>
    <link href="/2019/12/26/elasticsearch-%E5%85%A5%E9%97%A8/"/>
    <url>/2019/12/26/elasticsearch-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">推荐文档</a></p><h2 id="Elasticsearch-简介"><a href="#Elasticsearch-简介" class="headerlink" title="Elasticsearch 简介"></a>Elasticsearch 简介</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Elasticsearch</th><th style="text-align:left">MySQL</th></tr></thead><tbody><tr><td style="text-align:left">索引</td><td style="text-align:left">数据库</td></tr><tr><td style="text-align:left">类型</td><td style="text-align:left">表</td></tr><tr><td style="text-align:left">文档</td><td style="text-align:left">记录</td></tr><tr><td style="text-align:left">属性</td><td style="text-align:left">字段</td></tr></tbody></table></div><h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><h2 id="Spring-Boot-与-Elasticsearch-整合"><a href="#Spring-Boot-与-Elasticsearch-整合" class="headerlink" title="Spring Boot 与 Elasticsearch 整合"></a>Spring Boot 与 Elasticsearch 整合</h2><p>两种方式</p><ul><li>方式一<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.searchbox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li></ul><pre><code class="hljs pgsql">@AutowiredJestClient jestClient;@Test<span class="hljs-type">void</span> put() throws IOException &#123;    UserBO userBO = <span class="hljs-built_in">new</span> UserBO();    userBO.setAccount("account");    userBO.setId(<span class="hljs-number">1</span>);    userBO.setJumpToken("jumpToken");    userBO.setPassword("password");    userBO.setUsername("username");    <span class="hljs-keyword">Index</span> <span class="hljs-keyword">index</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Index</span>.Builder(userBO).<span class="hljs-keyword">index</span>("blog").<span class="hljs-keyword">type</span>("user").build();    jestClient.<span class="hljs-keyword">execute</span>(<span class="hljs-keyword">index</span>);&#125;@Test<span class="hljs-type">void</span> <span class="hljs-keyword">get</span>() throws IOException &#123;    String <span class="hljs-type">json</span> = "&#123;" +            "\"query\": &#123;" +            "  \"match\":&#123;" +            "          \"<span class="hljs-type">name</span>\": \"username\"" +            "       &#125; " +            "   &#125;" +            "&#125;";    <span class="hljs-keyword">Search</span> <span class="hljs-keyword">search</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Search</span>.Builder(<span class="hljs-type">json</span>).addIndex("blog").addType("user").build();    SearchResult result = jestClient.<span class="hljs-keyword">execute</span>(<span class="hljs-keyword">search</span>);    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("#########################################");    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(result.getJsonString());&#125;</code></pre><ul><li>方式二<br>maven 坐标  <dependency>      <groupId>org.springframework.boot</groupId>      <artifactId>spring-boot-starter-data-elasticsearch</artifactId>  </dependency> </li></ul><p>配置文件<br>    spring:<br>      data:<br>        elasticsearch:<br>          repositories:<br>            enabled: true<br>          cluster-nodes: 127.0.0.1:9300 # es的连接地址及端口号<br>          cluster-name: docker-cluster # es集群的名称</p><pre><code class="hljs Java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@ToString</span><span class="hljs-meta">@Document</span>(indexName = <span class="hljs-string">"blog"</span>,type = <span class="hljs-string">"user"</span>,shards = <span class="hljs-number">1</span>,replicas = <span class="hljs-number">0</span>,refreshInterval = <span class="hljs-string">"-1"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-meta">@Field</span>(type = FieldType.Keyword)    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer id, String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">User</span>, <span class="hljs-title">Integer</span>&gt; </span>&#123;    <span class="hljs-function">User <span class="hljs-title">findByName</span><span class="hljs-params">(String name)</span></span>;&#125;<span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserRepository userRepository;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/user/&#123;name&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"name"</span>)</span> String name) </span>&#123;        User user = userRepository.findByName(name);        <span class="hljs-keyword">return</span> user.toString();    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/user/put"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">put</span><span class="hljs-params">()</span> </span>&#123;        User user = <span class="hljs-keyword">new</span> User();        user.setId(<span class="hljs-number">10</span>);        user.setName(<span class="hljs-string">"zhaoliu"</span>);        User save = userRepository.save(user);        System.out.println(save);        <span class="hljs-keyword">return</span> save.toString();    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 装饰者模式</title>
    <link href="/2019/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式-装饰者模式"><a href="#设计模式-装饰者模式" class="headerlink" title="设计模式 -  装饰者模式"></a>设计模式 -  装饰者模式</h1><blockquote><p>构造型模式：这些设计模式关注类和对象的组合。继承的观念被用来组合接口和定义组合对象获得新功能的方式</p><blockquote><p>装饰器模式：允许向一个现有的对象添加新功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的包装</p></blockquote></blockquote><p>我的理解，想用个栗子来说明<br>    一幅画（可以是油画、水墨画等）始终是幅画<br>    用画框裱起来<br>    用瓶子装起来<br>    这里的 画框 瓶子 就是充当的装饰器<br>    这里的画是独立的没有 画框、瓶子还是画<br>    画框、瓶子也可以不装饰画也还是画框、瓶子<br>    但是用装饰器装饰后在画的表现上添加了新的特点</p><p>优点：装饰类和被装饰类可以独立发展，不会相互耦合，这种模式可以替代继承<br>缺点：多层装饰 增加 整体的复杂<br>使用场景：</p><pre><code>1. 拓展一个类的功能2. 动态添加、撤销 功能</code></pre><p>下面是一个关于装饰模式的代码demo</p><p><img src="https://images.gitee.com/uploads/images/2019/1213/113208_9e7f9b61_1673884.png" srcset="/img/loading.gif" alt="装饰者模式"><br><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Shape circle = <span class="hljs-keyword">new</span> Circle();        RedShapeDecorator redShapeDecorator = <span class="hljs-keyword">new</span> RedShapeDecorator(circle);        circle.draw();        System.out.println(<span class="hljs-string">"---------------------------------"</span>);        redShapeDecorator.draw();        System.out.println(<span class="hljs-string">"#########################################"</span>);        Rectangle rectangle = <span class="hljs-keyword">new</span> Rectangle();        RedShapeDecorator redShapeDecorator1 = <span class="hljs-keyword">new</span> RedShapeDecorator(rectangle);        rectangle.draw();        System.out.println(<span class="hljs-string">"-------------------------"</span>);        redShapeDecorator1.draw();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedShapeDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractShapeDecorator</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedShapeDecorator</span><span class="hljs-params">(Shape decoratorShape)</span> </span>&#123;        <span class="hljs-keyword">super</span>(decoratorShape);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;        decoratorShape.draw();        <span class="hljs-comment">// 装饰器的精髓一步</span>        setRedBorder(decoratorShape);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRedBorder</span><span class="hljs-params">(Shape decoratorShape)</span> </span>&#123;        System.out.println(<span class="hljs-string">"Border Color: Red"</span>);    &#125;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractShapeDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;    <span class="hljs-keyword">protected</span> Shape decoratorShape;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractShapeDecorator</span><span class="hljs-params">(Shape decoratorShape)</span> </span>&#123;        <span class="hljs-keyword">this</span>.decoratorShape = decoratorShape;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;        decoratorShape.draw();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"Shape - Circle"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"Shape - Rectangle"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Shape</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;&#125;</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>装饰者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 入门</title>
    <link href="/2019/12/05/docker-%E5%85%A5%E9%97%A8/"/>
    <url>/2019/12/05/docker-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>@<a href="目录">TOC</a></p><h1 id="Docker-笔记"><a href="#Docker-笔记" class="headerlink" title="Docker 笔记"></a>Docker 笔记</h1><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><ul><li>是什么：<ul><li>一次封装，多处运行，解决运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</li></ul></li><li>能干嘛：<ul><li>之前的虚拟机技术</li><li>容器虚拟化技术</li><li>开发/运维（DevOps）：开发自运维<ul><li>更快速的应用交付和部署</li><li>更快速的升级 和 扩缩容</li><li>更快速的系统运维</li><li>更高效的计算资源利用</li></ul></li><li>企业级</li></ul></li><li>去哪下<h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2></li><li>Docker基本组成<ul><li>镜像image</li><li>容器 container：用镜像创建的运行实例</li><li>仓库 repository<h2 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run -it images_name</span></code></pre></li></ul></li><li>运行Ubuntu<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run -it -v /myDataVolume:/dataVolumeContainer ubuntu</span><span class="hljs-meta">$</span><span class="bash"> docker start 3af88b62bae9</span><span class="hljs-meta">$</span><span class="bash"> docker attach 3af88b62bae9</span></code></pre></li></ul><h2 id="四、Docker镜像"><a href="#四、Docker镜像" class="headerlink" title="四、Docker镜像"></a>四、Docker镜像</h2><ul><li>是什么<ul><li>Docker镜像加载原理<ul><li>docker的镜像实际上由一层层的文件系统组成，这种层级的文件系统 UnionFS</li><li>bootfs（boot file system）只要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，<br>在Docker镜像的最底层是bootfs。这一层和Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，<br>此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</li><li>rootfs（root file system）在bootfs之上，包含的就是经典Linux系统中的/dev /proc /bin /etc等标准目录和文件。rootfs就是各种不同<br>的操作系统发行版本，如Ubuntu、CentOS等等<br><img src="./image/UnionFS.png" srcset="/img/loading.gif" alt=""></li><li>最大的好处： 共享资源<br>  有多个镜像都是从同一个base镜像构建，那么宿主机只要在磁盘上保存一份base镜像，同时内存中也只要加载一份base镜像，就可以给所有容器服务了。<br>  而且镜像的每一层都可以共享</li></ul></li></ul></li><li>特点<br>  Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”,容器层之下的都是“镜像层”。<h2 id="五、Docker-容器数据卷（Docker容器中的数据持久化（保存下来））"><a href="#五、Docker-容器数据卷（Docker容器中的数据持久化（保存下来））" class="headerlink" title="五、Docker 容器数据卷（Docker容器中的数据持久化（保存下来））"></a>五、Docker 容器数据卷（Docker容器中的数据持久化（保存下来））</h2></li><li>背景：<ul><li>将运用与运行的环境打包成容器运行，运行可以伴随容器，但是我们对数据的要求希望是持久化的</li><li>容器之间希望有可能共享数据<br>Docker容器产生的数据，如果不通过docker commit 生成新的镜像，使得数据做成镜像的一部分保存下来，那么容器删除后数据就没了<br>为了能保存数据在docker中使用 数据卷（类似Redis中的 rdb和aof文件）</li></ul></li><li>能干嘛<pre><code>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于UnionFS，因此能绕过UnionFS提供一些用于持久储存或共享数据的特性，卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷- 特点  1. 数据卷可在容器之间共享或重用数据  2. 卷中的更改可以直接生效  3. 卷中的更改不会包含在镜像的更新中  4. 卷的生命周期一直持续到没有容器使用为止 </code></pre></li><li>数据卷<ul><li>容器添加<ul><li>直接命令添加<ol><li>命令<br> docker run -it -v /myDataVolume:/dataVolumeContainer ubuntu</li><li>查看数据卷是否挂载成功<br> docker inspect 3af88b62bae9 （CONTAINER ID） <pre><code class="hljs json">"HostConfig": &#123;    "Binds": [        <span class="hljs-string">"/myDataVolume:/dataVolumeContainer"</span>    ]&#125;</code></pre></li><li>容器和宿主机之间数据共享</li><li>容器停止退出后，主机修改后数据是否同步<pre><code> $ docker start 3af88b62bae9 $ docker attach 3af88b62bae9</code></pre></li><li>命令（带权限）<br> docker run -it -v /myDataVolume:/dataVolumeContainer 镜像名<br> docker run -it -v /宿主机绝对路径目录:/容器内目录:ro      镜像名<pre><code> - ro read-only 只读</code></pre></li></ol></li><li>DockerFile添加<ul><li>根目录下新建 my_docker 文件夹 并 进入</li><li>在 Dockerfile 中使用 VOLUME命令 来给镜像添加一个或多个数据卷  <pre><code class="hljs text">说明：  出于可移植和分享的考虑，用 -v 主机目录:容器目录 这种方法 不能直接在Dockerfile中实现  由于宿主机目录是依赖特定宿主机的，并不能保证在所有宿主机上都存在这样的特定目录</code></pre></li><li>File 构建<pre><code class="hljs shell">docker run -it -v /host1:/dataVolumeContainer1 -v /host2:/dataVolumeContainer2 ubuntu /bin/bash<span class="hljs-meta">#</span><span class="bash"> volume <span class="hljs-built_in">test</span></span>FROM ubuntuVOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]CMD echo "finished,--------------success"CMD /bin/bash</code></pre></li><li>build后生成镜像<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker build -f ./Dockerfile -t dockder_file/ubuntu .</span>Sending build context to Docker daemon  17.92kBStep 1/4 : FROM ubuntu<span class="hljs-meta"> ---&gt;</span><span class="bash"> 775349758637</span>Step 2/4 : VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]<span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 7c7ad759b784</span>Removing intermediate container 7c7ad759b784<span class="hljs-meta"> ---&gt;</span><span class="bash"> 0af71e73f90a</span>Step 3/4 : CMD echo "finished,--------------success"<span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 20b46d5d6917</span>Removing intermediate container 20b46d5d6917<span class="hljs-meta"> ---&gt;</span><span class="bash"> 0ed798ff540c</span>Step 4/4 : CMD /bin/bash<span class="hljs-meta"> ---&gt;</span><span class="bash"> Running <span class="hljs-keyword">in</span> 99f343a2a2df</span>Removing intermediate container 99f343a2a2df<span class="hljs-meta"> ---&gt;</span><span class="bash"> 6199b6ca4626</span>Successfully built 6199b6ca4626Successfully tagged dockder_file/ubuntu:latest</code></pre></li><li>run 容器 <pre><code class="hljs shell">docker run -it dockder_file/ubuntu /bin/bash</code></pre></li><li>主机对应默认地址：/var/lib/docker/volumes/ 下</li></ul></li><li>备注</li></ul></li></ul></li><li>数据卷容器<ul><li>是什么<br>  命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，叫做数据卷容器<br>  说白了，活动硬盘上挂载活动硬盘，实现数据传递</li><li>总体介绍</li><li>容器间传递共享   —volumes-from<ol><li>先启动一个父容器 dc01 <pre><code class="hljs shell">docker run -it --name dc01 dockder_file/ubuntu</code></pre></li><li>dc02/dc03 继承 dc01     <pre><code class="hljs shell">docker run -it --name dc02 --volumes-from dc01 dockder_file/ubuntu</code></pre></li><li>回到dc01 可以看到02/03各自添加的都能共享了 <pre><code class="hljs shell">docker run -it --name dc01 dockder_file/ubuntu</code></pre></li><li>删除 dc01，dc02修改后是否可以访问 <pre><code class="hljs shell">docker run -it --name dc01 dockder_file/ubuntu</code></pre></li><li>删除dc02 后dc03是否可以访问 <pre><code class="hljs shell">docker run -it --name dc01 dockder_file/ubuntu</code></pre></li><li>新建dc04继承dc03 后在删除dc03 <pre><code class="hljs shell">docker run -it --name dc01 dockder_file/ubuntu</code></pre></li><li>结论： 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止（即一旦容器创建后，它的信息传递的关系，不再受别的任何容器影响）</li></ol></li></ul></li></ul><h2 id="六、DockerFile解析"><a href="#六、DockerFile解析" class="headerlink" title="六、DockerFile解析"></a>六、DockerFile解析</h2><ul><li>是什么<ul><li>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本</li><li>构建三步骤<ol><li>编写Dockerfile</li><li>docker build</li><li>docker run</li></ol></li><li>文件什么样</li></ul></li><li>Dockerfile创建过程<ul><li>Dockerfile 内容基础知识<ol><li>每条保留指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li><h1 id="表示注释"><a href="#表示注释" class="headerlink" title="表示注释"></a>表示注释</h1></li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ol></li><li>Docker 执行 Dockerfile 大致流程<ol><li>docker 从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似docker commit 的操作提交一个新的镜像层</li><li>docker 再基于刚提交的镜像运行一个新的容器</li><li>执行Dockerfile 中的下一条指令直到所有指令都执行完成</li></ol></li><li>小总结<ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程中需要的一切东西<br>。Dockerfile涉及的内容包括执行代码或者文件、环境变量、依赖包、运行环境、动态链接库、操作系统的发行版、服务进程和内核进程<br>（当应用进程需要和服务系统和内核进程打交道，这时要考虑如何设计namespace的权限控制）等等。</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时，会真正开始提供服务</li><li>Docker容器，容器是直接提供服务的<br>从应用软件的角度看，Dockerfile、Docker镜像、Docker容器 分别代表 三个阶段<br> Dockerfile是软件原材料<br> Docker镜像是软件交付品<br> Docker容器是软件运行状态</li></ol></li></ul></li><li>Dockerfile 体系结构（保留字指令）<ul><li>FROM：基础镜像，当前镜像是基于哪个镜像的</li><li>MAINTAINER：镜像维护者的姓名和邮箱地址</li><li>RUN：容器构建时需要运行的命令</li><li>EXPOSE：当前容器对外暴露的端口号</li><li>WORKDIR：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</li><li>ENV：用来在构建镜像过程中设置环境变量<br>  ENV MY_PATH /usr/mytest<br>  这个环境变量可以在后面的任何 RUN 指令中使用，这就是如同在命令前面指定了环境变量前缀一样；也可以在其他指令中直接使用这些环境变量</li><li>ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理 URL 和 解压tar压缩包</li><li>COPY：类似 ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;原路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</li><li>VOLUME：容器数据卷，用于数据保存和持久化工作</li><li>CMD：指定一个容器启动时要运行的命令，Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD被 docker run 之后的参数替换<br>  CMD 容器启动命令<pre><code>  CMD 和 RUN 格式类似，也是两种格式      - shell 格式：CMD &lt;命令&gt;      - exec 格式：CMD [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;......]      - 参数列表格式：CMD [&quot;参数1&quot;,&quot;参数2&quot;......]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体参数</code></pre></li><li>ENTRYPOINT：指定一个容器启动时要运行的命令，ENTRYPOINT 的目的和 CMD一样，都是在指定容器启动程序及参数</li><li>ONBUILD：当构建一个被继承的 Dockerfile时运行命令，父镜像在被子继承后父镜像的 onbuild 被触发<br><img src="./image/Dockerfile.png" srcset="/img/loading.gif" alt=""></li></ul></li><li>案例<ul><li>Base镜像（scratch）<br>  Docker Hub 中 99% 的镜像都是通过 在 base 镜像中安装 和 配置需要的软件构建出来的</li><li>自定义镜像 myCentOS<pre><code class="hljs shell">FROM centosMAINTAINER Jun&lt;wjxajh@gmail.com&gt;ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vim RUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "success --------------------- ok"CMD echo /bin/bash</code></pre></li><li>CMD/ENTRYPOINT 镜像案例</li><li>自定义镜像 Tomcat9</li></ul></li><li>小总结<br><img src="./image/小总结.png" srcset="/img/loading.gif" alt=""><h2 id="七、Docker常用安装"><a href="#七、Docker常用安装" class="headerlink" title="七、Docker常用安装"></a>七、Docker常用安装</h2></li><li>总体步骤</li><li>安装 tomcat</li><li>安装 MySQL  <pre><code class="hljs shell">docker run -p 3306:3306 --name local_mysql -v /opt/mysql/conf:/etc/mysql/conf -v /opt/mysql/logs:/logs -v /opt/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</code></pre>和 MySQL进行交互<pre><code class="hljs shell">docker exec -it 2a95e24f4184 /bin/bash</code></pre>导出数据库数据到数据卷<pre><code class="hljs shell">exec mysqldump --all-databases -uroot -proot &gt; /logs/all-databases.sql</code></pre></li><li>安装 redis<pre><code class="hljs shell">docker run -p 6379:6379 --name redis_01-v /opt/redis/data:/redis/data -v /opt/redis/conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes</code></pre><pre><code class="hljs shell">docker exec -it feed1bbcfc7d redis-cli</code></pre></li><li>安装 nginx <pre><code class="hljs shell">docker run -p 80:80 --name nginx_1 -v /opt/nginx/conf:/etc/nginx/conf.d/ -v /opt/nginx/logs:/var/log/nginx/ -v /opt/nginx/cache:/var/cache/nginx/ -v /opt/nginx/project:/usr/share/nginx/ -d nginx</code></pre><h2 id="八、本地镜像发布到阿里云-阿里云开发者平台"><a href="#八、本地镜像发布到阿里云-阿里云开发者平台" class="headerlink" title="八、本地镜像发布到阿里云 阿里云开发者平台"></a>八、本地镜像发布到阿里云 <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a></h2></li><li>本地镜像发布到阿里云流程<br>  <img src="./image/本地镜像发布到阿里云流程.png" srcset="/img/loading.gif" alt="">      </li><li>镜像的生成方法<ol><li>Dockerfile</li><li>从容器创建一个新的镜像<pre><code class="hljs shell">docker commit [OPTIONS]  容器ID [REPOSITORY[:TAG]]]  docker commit -a Jun -m "commit demo" 2a95e24f4184 mysql:1.0</code></pre></li></ol></li><li>将本地镜像推送到阿里云<ol><li>本地镜像素材原型</li><li>阿里云开发者平台<br> <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a></li><li>创建仓库镜像<ul><li>命名空间</li><li>仓库名称</li></ul></li><li>将镜像推送到registry</li><li>公有云可以查询到<br>6.查看详情</li></ol></li><li>将阿里云的镜像下载到本地</li></ul>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 适配器模式</title>
    <link href="/2019/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/11/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ol><li>适配器模式 将某个类的接口转换成客户端期望的另外一个接口表示，主要目的</li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>适配器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 建造者模式</title>
    <link href="/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式-建造者模式（Builder-Pattern）"><a href="#设计模式-建造者模式（Builder-Pattern）" class="headerlink" title="设计模式 - 建造者模式（Builder Pattern）"></a>设计模式 - 建造者模式（Builder Pattern）</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><blockquote><p>建造者模式（生成器模式）：是一种对象构建模式。可以将复杂对象的构造过程抽象出来，使这个抽象过程的不同实现方法可以构造出不同属性的对象。</p><p>构建者模式 是一步步创建一个复杂的对象，运行用户只通过指定复杂对象的类型 和内容 就可以构建他们，用户不需要知道内部的具体细节</p></blockquote><p>建造者模式中的四个对象</p><ul><li>Product（产品角色）：一个具体的产品对象</li><li>Builder（抽象建筑者）：实现一个Production 对象的各个部件指定的接口 / 抽象类</li><li>ConcreateBuilder（具体构建者 ）：实现接口，构建和装配各个接口</li><li>Director（指挥者）:构建一个使用Builder接口对象。主要是用于构建个一个复杂对象。有两个作用：<ul><li>隔离客户和对象的成产过程</li><li>负责控制产品对象的生产过程</li></ul></li></ul><h2 id="二、简单的Demo"><a href="#二、简单的Demo" class="headerlink" title="二、简单的Demo"></a>二、简单的Demo</h2><p>下面提供一个样例可以体会一下</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//建造普通房子</span>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();        <span class="hljs-comment">// 准备创建房子的指挥者</span>        HouseDirector houseDirector = <span class="hljs-keyword">new</span> HouseDirector(commonHouse);        <span class="hljs-comment">// 返回盖房子</span>        House house = houseDirector.createHouse();        System.out.println(house);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Client</span> </span>&#123;    HouseBuilder houseBuilder = <span class="hljs-keyword">null</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;    &#125;    <span class="hljs-comment">// 如何处理建造房子的流程</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">createHouse</span><span class="hljs-params">()</span> </span>&#123;        houseBuilder.buildBasic();        houseBuilder.buildWalls();        houseBuilder.roofed();        <span class="hljs-keyword">return</span> houseBuilder.build();    &#125;&#125;<span class="hljs-meta">@Data</span><span class="hljs-meta">@ToString</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span> </span>&#123;    <span class="hljs-keyword">private</span> String basic;    <span class="hljs-keyword">private</span> Integer wall;    <span class="hljs-keyword">private</span> String roofed;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HighHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"high house build basic"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"high house build wall"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"high house roofed"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.house.setBasic(<span class="hljs-string">"common house basic"</span>);        System.out.println(<span class="hljs-string">"common house build basic"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.house.setWall(<span class="hljs-string">"common house"</span>);        System.out.println(<span class="hljs-string">"common house build wall"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"common house roofed"</span>);    &#125;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;    <span class="hljs-keyword">protected</span> House house = <span class="hljs-keyword">new</span> House();    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">buildHouse</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> house;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> house;    &#125;&#125;</code></pre><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><ul><li><p>客户端不必知道产品内部组成的字节，将产品本身和产品的创建过程解耦，使相同的创建过程可以构建不同的产品对象，说白了就是 真正创建对象的时候只需要 告诉 <code>Director</code> 说 <code>我要什么</code> （调方法）具体的过程不用管，交给 <code>ConcreateBuilder</code> </p></li><li><p>每个具体构建者都相对独立，而与其他的具体构建者无关，因此可以很方便地替换具体构建者或者增加新的构造者，只要使用不同的具体构造者就可以得到不同的产品对象</p></li><li><p>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</p></li><li><p>增加新的具体构造者不用修改原有类库的代码，指挥者针对抽象构造者编程，系统扩展方便，符合“开闭原则”。</p></li><li><p>构建者模式 创建 的产品一般具有较多的共同点，他们 的组成部分相似，<code>如果产品之间的差异很大，不适合使用构建者模式</code></p></li><li><p>如果<code>产品的内部变化复杂，可以会导致需要定义很多具体构造者类来实现这种变化，导致系统变得很庞大</code>，因此在这种情况下考虑是否选择构建者模式</p></li><li><p>抽象工厂模式 VS 建造者模式</p><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关系构建过程，只关心什么产品由什么工厂生产。</p><p>构造者模式要求按照指定的蓝图构造产品，它的主要目的是通过组装零配件产品一个新的产品</p><p>抽象工厂类似面包房制作各种面包，构造者模式更新汽车的组装</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 原型模式</title>
    <link href="/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式-原型模式-（Prototype）"><a href="#设计模式-原型模式-（Prototype）" class="headerlink" title="设计模式 -原型模式   （Prototype）"></a>设计模式 -原型模式  <a href="https://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener"> （Prototype）</a></h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ul><li>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</li><li>原型模式是一个创建型设计模式，允许一个对象再创建另外一个可定制的对象，不需要知道创建的细节</li><li>工作原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来进行创建，<code>对象.clone()</code></li></ul><h2 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h2><ol><li><p>浅拷贝</p><p>浅拷贝 只对 基本数据类型其真正的拷贝作用，对于引用类型来说的话，只是简单的对引用类型地址进行了拷贝，即使进行了多次的浅拷贝，多个对象中地引用类型还是指的同一个</p></li><li><p>深拷贝</p><p>深拷贝用来解决浅拷贝问题</p><p>深拷贝实现方式：</p><ul><li><p>方式一：重写 clone 方法进行实现深拷贝</p><pre><code class="hljs java"><span class="hljs-keyword">super</span>.clone()</code></pre></li><li><p>方式二：通过对象序列化进行深拷贝<code>推荐使用</code></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span> </span>&#123;        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">null</span>;        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">null</span>;        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">null</span>;        ObjectInputStream objectInputStream = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();            objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);            objectOutputStream.writeObject(<span class="hljs-keyword">this</span>);            byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());            objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);            SpringDemo springDemo = (SpringDemo) objectInputStream.readObject();            <span class="hljs-keyword">return</span> springDemo;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                byteArrayInputStream.close();                byteArrayInputStream.close();                objectOutputStream.close();                byteArrayInputStream.close();            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;</code></pre></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>原型模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 工厂模式</title>
    <link href="/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式-工厂模式"><a href="#设计模式-工厂模式" class="headerlink" title="设计模式 - 工厂模式"></a>设计模式 - 工厂模式</h1><h2 id="一、简单（静态）工厂"><a href="#一、简单（静态）工厂" class="headerlink" title="一、简单（静态）工厂"></a>一、简单（静态）工厂</h2><h3 id="A、抛出场景"><a href="#A、抛出场景" class="headerlink" title="A、抛出场景"></a>A、抛出场景</h3><blockquote><p>一个外卖项目：要便于各种菜品的拓展，便于维护</p><p>菜品种类很多（黄焖鸡、大盘鸡等）</p><p>菜品制作有 prepare，make，package步骤</p><p>完成菜品的订购</p></blockquote><h3 id="B、基本介绍"><a href="#B、基本介绍" class="headerlink" title="B、基本介绍"></a>B、基本介绍</h3><ul><li>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式中最简单的使用模式</li></ul><pre><code class="hljs java">Calendar calendar = Calendar.getInstance();<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Category.FORMAT));&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title">createCalendar</span><span class="hljs-params">(TimeZone var0, Locale var1)</span> </span>&#123;        CalendarProvider var2 = LocaleProviderAdapter.getAdapter(CalendarProvider<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">var1</span>).<span class="hljs-title">getCalendarProvider</span>()</span>;        <span class="hljs-keyword">if</span> (var2 != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">return</span> var2.getInstance(var0, var1);            &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var7) &#123;            &#125;        &#125;        Object var3 = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">if</span> (var1.hasExtensions()) &#123;            String var4 = var1.getUnicodeLocaleType(<span class="hljs-string">"ca"</span>);            <span class="hljs-keyword">if</span> (var4 != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">byte</span> var6 = -<span class="hljs-number">1</span>;                <span class="hljs-keyword">switch</span>(var4.hashCode()) &#123;                <span class="hljs-keyword">case</span> -<span class="hljs-number">1581060683</span>:                    <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">"buddhist"</span>)) &#123;                        var6 = <span class="hljs-number">0</span>;                    &#125;                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> -<span class="hljs-number">752730191</span>:                    <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">"japanese"</span>)) &#123;                        var6 = <span class="hljs-number">1</span>;                    &#125;                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">283776265</span>:                    <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">"gregory"</span>)) &#123;                        var6 = <span class="hljs-number">2</span>;                    &#125;                &#125;                <span class="hljs-keyword">switch</span>(var6) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:                    var3 = <span class="hljs-keyword">new</span> BuddhistCalendar(var0, var1);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:                    var3 = <span class="hljs-keyword">new</span> JapaneseImperialCalendar(var0, var1);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:                    var3 = <span class="hljs-keyword">new</span> GregorianCalendar(var0, var1);                &#125;            &#125;        &#125;        <span class="hljs-keyword">if</span> (var3 == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">if</span> (var1.getLanguage() == <span class="hljs-string">"th"</span> &amp;&amp; var1.getCountry() == <span class="hljs-string">"TH"</span>) &#123;                var3 = <span class="hljs-keyword">new</span> BuddhistCalendar(var0, var1);            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var1.getVariant() == <span class="hljs-string">"JP"</span> &amp;&amp; var1.getLanguage() == <span class="hljs-string">"ja"</span> &amp;&amp; var1.getCountry() == <span class="hljs-string">"JP"</span>) &#123;                var3 = <span class="hljs-keyword">new</span> JapaneseImperialCalendar(var0, var1);            &#125; <span class="hljs-keyword">else</span> &#123;                var3 = <span class="hljs-keyword">new</span> GregorianCalendar(var0, var1);            &#125;        &#125;        <span class="hljs-keyword">return</span> (Calendar)var3;    &#125;</code></pre><h2 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h2><h3 id="A、模式介绍"><a href="#A、模式介绍" class="headerlink" title="A、模式介绍"></a>A、模式介绍</h3><p>定义创建方法的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化 在子类上。<code>工厂方法模式是对简单（静态）工厂进一步的抽象提取</code></p><h2 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h2><h3 id="A-基本介绍"><a href="#A-基本介绍" class="headerlink" title="　A.基本介绍"></a>　A.基本介绍</h3><p>抽象工厂模式：定义了一个 interface 用于创建相关 或有依赖关系的对象簇，不用指明具体类</p><p>抽象工厂模式可以将简单工厂模式 和 工厂方法模式进行整合</p><p>从设计层面看，抽象工厂模式是对简单工厂模式的改进（进一步抽象）</p><p>将工厂抽象成两层，AbsFactory（抽象工厂）和 具体实现的工厂子类。根据创建对象类型使用对应的工厂子类。将单个的简单工厂类变成了工厂簇，更利于代码的维护和拓展。</p><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">abstractFactory</span>.png slug %&#125;</span></code></pre><h2 id="四、工厂模式总结"><a href="#四、工厂模式总结" class="headerlink" title="四、工厂模式总结"></a>四、工厂模式总结</h2><ol><li>意义<ol><li>将实例化代码提取出来，放到一个类中统一管理和维护，达到和项目的依赖关系解耦，提高项目的拓展和维护性。</li></ol></li><li>三种工厂模式</li><li>依赖抽象原则<ol><li>不要让类继承具体类，而是继承<code>抽象类</code>或者<code>实现 interface（接口）</code></li><li>不覆盖基类中已经实现的方法</li></ol></li></ol><p>简单工厂是 建个工厂 不抽象的去创建 对象</p><p>工厂方法模式对 工厂进行抽象了一层，然后实现类去 担任 简单工厂里的工厂角色</p><p>抽象工厂模式是对 工厂方法模式 ，然后采用简单工厂模式的思想，<code>对从一个总的抽象工厂中，细分每个抽象工厂</code>(简单工厂模式思想)</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - UML类图</title>
    <link href="/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/"/>
    <url>/2019/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><blockquote><p>UML—Unified modeling language（统一建模语言），是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果。</p></blockquote><p>UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛华、依赖、组合、聚合等。</p><p>用例图<br>类图<br>时序图<br>协作图<br>配置图</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>UML 类图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 闲谈设计模式</title>
    <link href="/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%B2%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%B2%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="闲谈设计模式-七大原则"><a href="#闲谈设计模式-七大原则" class="headerlink" title="闲谈设计模式 - 七大原则"></a>闲谈设计模式 - 七大原则</h1><blockquote><p><strong>懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要.</strong></p></blockquote><h2 id="一、设计模式的目的"><a href="#一、设计模式的目的" class="headerlink" title="一、设计模式的目的"></a>一、设计模式的目的</h2><p>编写软件的过程，面临 == 耦合性、内聚性、维护性、可扩展性、重用性、灵活性== 等各方面的挑战。</p><p>设计模式就是为了解决这些问题</p><ul><li>代码重用性：相同功能代码，不写多次</li><li>可读性：编程规范性，利于阅读和理解</li><li>可扩展性：增加新的功能非常方便</li><li>可靠性：当增加新的功能后对原来功能没有影响</li></ul><h2 id="二、设计模式七大原则"><a href="#二、设计模式七大原则" class="headerlink" title="二、设计模式七大原则"></a>二、设计模式七大原则</h2><p>编程时遵循的原则，各种设计模式的基础</p><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h3><ul><li><p>基本介绍</p><p>对类来说，一个类只负责一项职责，如果 A 负责两个不同职责：职责1，职责2.</p><p>当职责1 需求变更的时候改变 A，可能会造成 职责2 执行错误，职责2 同理。</p><p>所以需要将 类A 的粒度分解成 A1 , A2</p></li><li><p>注意事项和细节</p><ul><li>降低类的复杂度，一个类只负责一项职责</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li></ul></li></ul><h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2.接口隔离原则"></a>2.接口隔离原则</h3><ul><li><p>基本介绍</p><p>客户端不应该依赖它不需要的接口，也就是说 一个类的依赖应该建立在最小的接口上</p></li><li><p>处理方法</p><p>将一个接口拆分成几个独立的接口，当类需要的时候多实现就可以</p></li></ul><h3 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3.依赖倒转原则（Dependence Inversion Principle）"></a>3.依赖倒转原则（Dependence Inversion Principle）</h3><ul><li>基本介绍<ul><li>高层模块不应该依赖底层模块，二者都应该是依赖抽象</li><li>==抽象不应该依赖细节，细节应该依赖抽象==</li><li>依赖倒转（倒置）的中心思想是==面向接口编程==</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多边形，抽象的东西要稳定的多。以抽象为基础搭建的架构比细节为基础的架构稳定的多。在Java中，抽象指的是接口或抽象类，细节是具体的实现类</li><li>使用接口或抽象类的目的是 指定好规范，而不涉及任何具体的操作，把展现细节的任务交给实现类</li><li>注意事项和细节</li><li>低层模块尽量都有抽象类和接口，或者两者都有程序稳定性更好。</li><li>变量的声明类型尽量是抽象类或者接口，这样在变量的引用和 实际对象间存在缓冲层，利于程序拓展和优化</li><li>继承时遵循里氏替换原则</li></ul></li></ul><h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4.里氏替换原则"></a>4.里氏替换原则</h3><ul><li><p>前言思考</p><ul><li>继承包含这层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏</li><li>继承在给程序设计带来便利的同时，也带来了弊端，比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则这个需要修改时，必须考虑到所有子类，并且父类修改后，所有涉及的子类的功能都有可能产生故障</li></ul><p>那么问题来了，如何正确使用继承？</p><p>答案：里氏替换原则</p><ul><li><p>基本介绍</p><ol><li><p>如果对每个类型 为 T1 的对象 o1，都有类型为 T2 的对象 o2,使得以 T1定义的所有程序 P 在所有的对象o1都代替成 o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。也就是，==所有引用父类的地方必须能透明地使用其子类对象==</p></li><li><p>在使用继承时 ，遵循里氏替换原则，在子类中尽量不要重写父类的方法</p></li><li>继承实际上让两个类耦合性增强了，在适当情况下，可以通过聚合、组合、依赖 来解决问题</li></ol></li></ul></li><li><p>解决方法</p><blockquote><p>类B 继承 类A  并重写父类方法，造成原有功能错误</p><p>实际编程中，常常会重写父类的方法完成新功能，这样写起来虽然简单，但是整个继承体系的复用性比较差，特别是运行多态比较频繁的时候</p></blockquote><p>解决方法</p><p>原来的父类和子类都继承一个更通俗（抽象）的基类，原有的继承关系去掉，采用依赖、聚合、组合等关系代替</p></li></ul><h3 id="5-开闭原则"><a href="#5-开闭原则" class="headerlink" title="5.开闭原则"></a>5.开闭原则</h3><ul><li><p>基本介绍</p><ol><li><p>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</p></li><li><p>一个软件实体 如 类、模块、函数 应该对外开放，对修改关闭。用抽象构建框架，用实现扩展细节</p></li><li><p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化</p></li><li><p>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则</p></li></ol></li></ul><h3 id="6-迪米特法则（降低类之间的耦合度）"><a href="#6-迪米特法则（降低类之间的耦合度）" class="headerlink" title="6.迪米特法则（降低类之间的耦合度）"></a>6.迪米特法则（降低类之间的耦合度）</h3><ul><li><p>基本介绍</p><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则（Demeter Principle - 最少知道法则）:一个类对自己依赖的类知道的越少越好。也就是，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</p></li><li><p>更简单的定义：只与直接的朋友通信</p><p>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，就说这两个对象之间是<code>朋友关系</code>。耦合的方式很多，依赖、关联、组合、聚合 等。其中，我们称出现<code>成员变量，方法参数，方法返回值</code>中的类为<code>直接的朋友</code>，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol></li><li><p>注意事项和细节</p><ol><li>迪米特法则的核心是降低类之间的耦合度</li><li>由于每个类都减少不了不必要的依赖，因此迪米特法则<code>只是要求降低</code>类之间的耦合关系，并不是要求完全没有依赖关系</li></ol></li></ul><h3 id="7-合成复用原则（Composite-Reuse-Principle）"><a href="#7-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="7.合成复用原则（Composite Reuse Principle）"></a>7.合成复用原则（Composite Reuse Principle）</h3><ul><li><p>基本介绍</p><p>原则是尽量使用合成/聚合的方式，而不是继承</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>七大原则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式 - 单例模式</title>
    <link href="/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/11/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式（Singleton-mode）"><a href="#单例模式（Singleton-mode）" class="headerlink" title="单例模式（Singleton mode）"></a>单例模式（Singleton mode）</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>采取一定的方法保证在整个软件系统中 ，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p><h2 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h2><ul><li>只需要一个实例<ul><li>各种 Manager</li><li>各种 Factory</li></ul></li></ul><h2 id="三、设计模式写法（八种）"><a href="#三、设计模式写法（八种）" class="headerlink" title="三、设计模式写法（八种）"></a>三、设计模式写法（八种）</h2><h3 id="1-饿汉式-（静态常量）"><a href="#1-饿汉式-（静态常量）" class="headerlink" title="1.饿汉式 （静态常量）"></a>1.饿汉式 （静态常量）</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><pre><code>1. 构造器私有化 2. 类的内部创建对象 3. 向外暴露一个静态公共方法（getInstance） 4. 代码实现</code></pre><h3 id="2-饿汉式（静态代码块）"><a href="#2-饿汉式（静态代码块）" class="headerlink" title="2. 饿汉式（静态代码块）"></a>2. 饿汉式（静态代码块）</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span>    <span class="hljs-keyword">static</span> Singleton instance;        <span class="hljs-keyword">static</span> &#123;        instance = <span class="hljs-keyword">new</span> Singleton();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><p>​    小结：饿汉式说白了就是创建类的时候创建实例，这样可以保证线程安全，但是如果项目中没有用到就会造成资源浪费</p><h3 id="3-懒汉式（线程不安全）"><a href="#3-懒汉式（线程不安全）" class="headerlink" title="3. 懒汉式（线程不安全）"></a>3. 懒汉式（线程不安全）</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;            instance = <span class="hljs-keyword">new</span> Singleton();        &#125;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><h3 id="4-懒汉式（线程安全，同步方法）"><a href="#4-懒汉式（线程安全，同步方法）" class="headerlink" title="4. 懒汉式（线程安全，同步方法）"></a>4. 懒汉式（线程安全，同步方法）</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;            instance = <span class="hljs-keyword">new</span> Singleton();        &#125;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><p><code>这种方式会效率太低，不推荐使用</code></p><h3 id="5-懒汉式（线程安全，同步代码块）"><a href="#5-懒汉式（线程安全，同步代码块）" class="headerlink" title="5. 懒汉式（线程安全，同步代码块）"></a>5. 懒汉式（线程安全，同步代码块）</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span><span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;                instance = <span class="hljs-keyword">new</span> Singleton();            &#125;        &#125;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><p><code>不能起到线程同步的作用，在实际中不能使用</code></p><h3 id="6-双重检查（Double-Check）"><a href="#6-双重检查（Double-Check）" class="headerlink" title="6.双重检查（Double Check）"></a>6.双重检查（Double Check）</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">synchronized</span> (Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;                    instance = <span class="hljs-keyword">new</span> Singleton();                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><p>两次 <code>if (instance == null)</code> 解决线程安全问题，同时解决懒加载问题，<code>推荐使用</code></p><h3 id="7-静态内部类"><a href="#7-静态内部类" class="headerlink" title="7.静态内部类"></a>7.静态内部类</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;    &#125;&#125;</code></pre><p>这种方式 采用了类加载机制保证初始化实例时只有一个线程</p><p><code>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高，推荐使用</code></p><h3 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8. 枚举"></a>8. 枚举</h3><p>不仅能避免多线程同步问题，而且还能防止反序列话重新创建新的对象<code>提倡使用</code></p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><ul><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li><li>想实例化一个单例类的时候，使用相应的获取方法，而不是使用 new</li><li>单例模式使用的场景<ol><li>需要<code>频繁进行创建和销毁的对象</code>（各种池）</li><li>创建对象耗时过多或耗费资源过多，但是又经常用到的对象、工具类对象、频繁访问的数据库、文件的对象（数据源、session工厂等）</li></ol></li></ul><p>在实际使用中，多使用<code>饿汉式（两种方法）、双重检查、静态内部类、枚举</code></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
